
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20150226 (SVN rev 63)
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20150226 (SVN rev 63) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Analizador extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\137\000\002\002\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\027\003\000\002\027\003\000\002\027\003\000" +
    "\002\027\003\000\002\027\003\000\002\027\003\000\002" +
    "\023\005\000\002\023\003\000\002\023\006\000\002\022" +
    "\005\000\002\022\006\000\002\025\003\000\002\025\003" +
    "\000\002\021\004\000\002\021\005\000\002\021\003\000" +
    "\002\024\006\000\002\024\005\000\002\030\004\000\002" +
    "\031\005\000\002\031\005\000\002\031\003\000\002\032" +
    "\005\000\002\032\005\000\002\032\005\000\002\032\003" +
    "\000\002\033\003\000\002\033\005\000\002\035\003\000" +
    "\002\035\003\000\002\036\003\000\002\036\002\000\002" +
    "\034\003\000\002\034\003\000\002\034\003\000\002\034" +
    "\003\000\002\034\003\000\002\034\003\000\002\037\005" +
    "\000\002\037\003\000\002\037\005\000\002\040\005\000" +
    "\002\040\003\000\002\040\004\000\002\044\003\000\002" +
    "\044\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\003\000\002\042\005\000\002\042\005\000\002\042\005" +
    "\000\002\042\003\000\002\043\004\000\002\043\006\000" +
    "\002\007\005\000\002\007\004\000\002\007\002\000\002" +
    "\006\005\000\002\006\003\000\002\005\006\000\002\004" +
    "\004\000\002\004\004\000\002\011\003\000\002\011\005" +
    "\000\002\010\013\000\002\013\004\000\002\013\006\000" +
    "\002\013\003\000\002\045\006\000\002\045\004\000\002" +
    "\012\004\000\002\012\004\000\002\020\003\000\002\020" +
    "\003\000\002\017\004\000\002\017\002\000\002\016\011" +
    "\000\002\016\002\000\002\015\007\000\002\015\003\000" +
    "\002\014\010\000\002\003\004\000\002\003\004\000\002" +
    "\003\004\000\002\003\004\000\002\003\004\000\002\003" +
    "\002\000\002\002\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\036\004\001\002\000\030\004\013\005" +
    "\021\006\017\007\015\010\023\016\012\021\010\024\025" +
    "\030\016\034\022\037\uffa4\001\002\000\004\002\006\001" +
    "\002\000\004\002\001\001\002\000\004\016\234\001\002" +
    "\000\004\056\220\001\002\000\050\004\013\005\021\006" +
    "\017\007\015\010\023\016\012\021\010\022\uffa4\023\uffa4" +
    "\024\025\025\uffa4\027\uffa4\030\016\031\uffa4\032\uffa4\033" +
    "\uffa4\034\022\035\uffa4\037\uffa4\001\002\000\004\020\171" +
    "\001\002\000\004\016\000\001\002\000\050\004\013\005" +
    "\021\006\017\007\015\010\023\016\012\021\010\022\uffa4" +
    "\023\uffa4\024\025\025\uffa4\027\uffa4\030\016\031\uffa4\032" +
    "\uffa4\033\uffa4\034\022\035\uffa4\037\uffa4\001\002\000\004" +
    "\016\ufffd\001\002\000\004\056\144\001\002\000\004\016" +
    "\uffff\001\002\000\050\004\013\005\021\006\017\007\015" +
    "\010\023\016\012\021\010\022\uffa4\023\uffa4\024\025\025" +
    "\uffa4\027\uffa4\030\016\031\uffa4\032\uffa4\033\uffa4\034\022" +
    "\035\uffa4\037\uffa4\001\002\000\004\016\ufffe\001\002\000" +
    "\006\003\127\056\130\001\002\000\004\016\ufffc\001\002" +
    "\000\004\037\125\001\002\000\006\003\033\056\034\001" +
    "\002\000\050\004\013\005\021\006\017\007\015\010\023" +
    "\016\012\021\010\022\uffa4\023\uffa4\024\025\025\uffa4\027" +
    "\uffa4\030\016\031\uffa4\032\uffa4\033\uffa4\034\022\035\uffa4" +
    "\037\uffa4\001\002\000\050\004\013\005\021\006\017\007" +
    "\015\010\023\016\012\021\010\022\uffa4\023\uffa4\024\025" +
    "\025\uffa4\027\uffa4\030\016\031\uffa4\032\uffa4\033\uffa4\034" +
    "\022\035\uffa4\037\uffa4\001\002\000\072\003\uffec\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\010\uffec\011\uffec\012\uffec\013" +
    "\uffec\014\uffec\015\uffec\016\uffec\021\uffec\022\uffec\023\uffec" +
    "\024\uffec\025\uffec\027\uffec\030\uffec\031\uffec\032\uffec\033" +
    "\uffec\034\uffec\035\uffec\037\uffec\055\uffec\056\uffec\057\uffec" +
    "\001\002\000\024\022\uffa7\023\uffa7\025\uffa7\027\uffa7\031" +
    "\uffa7\032\uffa7\033\uffa7\035\uffa7\037\uffa7\001\002\000\024" +
    "\022\uffa5\023\uffa5\025\uffa5\027\uffa5\031\uffa5\032\uffa5\033" +
    "\uffa5\035\uffa5\037\uffa5\001\002\000\050\004\uffbd\005\uffbd" +
    "\006\uffbd\007\uffbd\010\uffbd\016\uffbd\021\uffbd\022\uffbd\023" +
    "\uffbd\024\uffbd\025\uffbd\027\uffbd\030\uffbd\031\uffbd\032\uffbd" +
    "\033\uffbd\034\uffbd\035\uffbd\037\uffbd\001\002\000\024\003" +
    "\040\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\055\042\056\uffdc\001\002\000\050\004\uffbe\005\uffbe\006" +
    "\uffbe\007\uffbe\010\uffbe\016\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\027\uffbe\030\uffbe\031\uffbe\032\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\037\uffbe\001\002\000\042\003\uffcb" +
    "\017\uffcb\040\uffcb\041\uffcb\042\062\043\063\044\061\045" +
    "\uffcb\046\uffcb\047\uffcb\050\uffcb\051\uffcb\052\uffcb\053\uffcb" +
    "\054\uffcb\057\uffcb\001\002\000\014\003\uffd4\017\uffd4\045" +
    "\uffd4\046\uffd4\057\uffd4\001\002\000\006\017\111\057\110" +
    "\001\002\000\012\003\103\045\102\046\105\057\112\001" +
    "\002\000\020\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd" +
    "\016\uffdd\056\uffdd\001\002\000\020\011\074\012\077\013" +
    "\076\014\075\015\071\016\070\056\073\001\002\000\042" +
    "\003\uffc7\017\uffc7\040\uffc7\041\uffc7\042\uffc7\043\uffc7\044" +
    "\uffc7\045\uffc7\046\uffc7\047\uffc7\050\uffc7\051\uffc7\052\uffc7" +
    "\053\uffc7\054\uffc7\057\uffc7\001\002\000\034\003\uffd1\017" +
    "\uffd1\040\052\041\046\045\uffd1\046\uffd1\047\056\050\054" +
    "\051\050\052\053\053\051\054\047\057\uffd1\001\002\000" +
    "\022\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc" +
    "\055\042\056\uffdc\001\002\000\024\003\uffd6\011\uffd6\012" +
    "\uffd6\013\uffd6\014\uffd6\015\uffd6\016\uffd6\055\uffd6\056\uffd6" +
    "\001\002\000\024\003\uffd8\011\uffd8\012\uffd8\013\uffd8\014" +
    "\uffd8\015\uffd8\016\uffd8\055\uffd8\056\uffd8\001\002\000\024" +
    "\003\uffd7\011\uffd7\012\uffd7\013\uffd7\014\uffd7\015\uffd7\016" +
    "\uffd7\055\uffd7\056\uffd7\001\002\000\022\011\uffdc\012\uffdc" +
    "\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042\056\uffdc\001" +
    "\002\000\024\003\uffd9\011\uffd9\012\uffd9\013\uffd9\014\uffd9" +
    "\015\uffd9\016\uffd9\055\uffd9\056\uffd9\001\002\000\024\003" +
    "\uffda\011\uffda\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda" +
    "\055\uffda\056\uffda\001\002\000\024\003\040\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042\056\uffdc" +
    "\001\002\000\024\003\uffdb\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\055\uffdb\056\uffdb\001\002\000\014" +
    "\003\uffd2\017\uffd2\045\uffd2\046\uffd2\057\uffd2\001\002\000" +
    "\042\003\uffcd\017\uffcd\040\uffcd\041\uffcd\042\062\043\063" +
    "\044\061\045\uffcd\046\uffcd\047\uffcd\050\uffcd\051\uffcd\052" +
    "\uffcd\053\uffcd\054\uffcd\057\uffcd\001\002\000\022\011\uffdc" +
    "\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042\056" +
    "\uffdc\001\002\000\022\011\uffdc\012\uffdc\013\uffdc\014\uffdc" +
    "\015\uffdc\016\uffdc\055\042\056\uffdc\001\002\000\022\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042" +
    "\056\uffdc\001\002\000\042\003\uffc9\017\uffc9\040\uffc9\041" +
    "\uffc9\042\uffc9\043\uffc9\044\uffc9\045\uffc9\046\uffc9\047\uffc9" +
    "\050\uffc9\051\uffc9\052\uffc9\053\uffc9\054\uffc9\057\uffc9\001" +
    "\002\000\042\003\uffca\017\uffca\040\uffca\041\uffca\042\uffca" +
    "\043\uffca\044\uffca\045\uffca\046\uffca\047\uffca\050\uffca\051" +
    "\uffca\052\uffca\053\uffca\054\uffca\057\uffca\001\002\000\042" +
    "\003\uffc8\017\uffc8\040\uffc8\041\uffc8\042\uffc8\043\uffc8\044" +
    "\uffc8\045\uffc8\046\uffc8\047\uffc8\050\uffc8\051\uffc8\052\uffc8" +
    "\053\uffc8\054\uffc8\057\uffc8\001\002\000\042\003\uffcc\017" +
    "\uffcc\040\uffcc\041\uffcc\042\062\043\063\044\061\045\uffcc" +
    "\046\uffcc\047\uffcc\050\uffcc\051\uffcc\052\uffcc\053\uffcc\054" +
    "\uffcc\057\uffcc\001\002\000\042\003\ufff6\017\ufff6\040\ufff6" +
    "\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047" +
    "\ufff6\050\ufff6\051\ufff6\052\ufff6\053\ufff6\054\ufff6\057\ufff6" +
    "\001\002\000\042\003\ufff7\017\ufff7\040\ufff7\041\ufff7\042" +
    "\ufff7\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\052\ufff7\053\ufff7\054\ufff7\057\ufff7\001\002\000" +
    "\042\003\uffc6\017\uffc6\040\uffc6\041\uffc6\042\uffc6\043\uffc6" +
    "\044\uffc6\045\uffc6\046\uffc6\047\uffc6\050\uffc6\051\uffc6\052" +
    "\uffc6\053\uffc6\054\uffc6\057\uffc6\001\002\000\024\003\040" +
    "\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055" +
    "\042\056\uffdc\001\002\000\042\003\ufffb\017\ufffb\040\ufffb" +
    "\041\ufffb\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\052\ufffb\053\ufffb\054\ufffb\057\ufffb" +
    "\001\002\000\042\003\ufff8\017\ufff8\040\ufff8\041\ufff8\042" +
    "\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050\ufff8" +
    "\051\ufff8\052\ufff8\053\ufff8\054\ufff8\057\ufff8\001\002\000" +
    "\042\003\ufff9\017\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9" +
    "\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\057\ufff9\001\002\000\042\003\ufffa" +
    "\017\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa\053\ufffa" +
    "\054\ufffa\057\ufffa\001\002\000\012\003\103\045\102\046" +
    "\105\057\101\001\002\000\042\003\uffc5\017\uffc5\040\uffc5" +
    "\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046\uffc5\047" +
    "\uffc5\050\uffc5\051\uffc5\052\uffc5\053\uffc5\054\uffc5\057\uffc5" +
    "\001\002\000\024\003\uffdf\011\uffdf\012\uffdf\013\uffdf\014" +
    "\uffdf\015\uffdf\016\uffdf\055\uffdf\056\uffdf\001\002\000\006" +
    "\017\111\057\110\001\002\000\024\003\040\011\uffdc\012" +
    "\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042\056\uffdc" +
    "\001\002\000\024\003\uffde\011\uffde\012\uffde\013\uffde\014" +
    "\uffde\015\uffde\016\uffde\055\uffde\056\uffde\001\002\000\014" +
    "\003\uffd5\017\uffd5\045\uffd5\046\uffd5\057\uffd5\001\002\000" +
    "\014\003\uffd3\017\uffd3\045\uffd3\046\uffd3\057\uffd3\001\002" +
    "\000\014\003\uffcf\017\uffcf\045\uffcf\046\uffcf\057\uffcf\001" +
    "\002\000\014\003\uffce\017\uffce\045\uffce\046\uffce\057\uffce" +
    "\001\002\000\032\003\114\004\013\005\021\006\017\007" +
    "\015\010\023\016\012\021\010\024\025\025\uffa4\030\016" +
    "\034\022\001\002\000\050\004\uffbf\005\uffbf\006\uffbf\007" +
    "\uffbf\010\uffbf\016\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf" +
    "\025\uffbf\027\uffbf\030\uffbf\031\uffbf\032\uffbf\033\uffbf\034" +
    "\uffbf\035\uffbf\037\uffbf\001\002\000\050\004\uffc0\005\uffc0" +
    "\006\uffc0\007\uffc0\010\uffc0\016\uffc0\021\uffc0\022\uffc0\023" +
    "\uffc0\024\uffc0\025\uffc0\027\uffc0\030\uffc0\031\uffc0\032\uffc0" +
    "\033\uffc0\034\uffc0\035\uffc0\037\uffc0\001\002\000\004\025" +
    "\116\001\002\000\052\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\026\117\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\037\uffc2\001\002\000\032\003\121\004" +
    "\013\005\021\006\017\007\015\010\023\016\012\021\010" +
    "\024\025\027\uffa4\030\016\034\022\001\002\000\050\004" +
    "\uffc1\005\uffc1\006\uffc1\007\uffc1\010\uffc1\016\uffc1\021\uffc1" +
    "\022\uffc1\023\uffc1\024\uffc1\025\uffc1\027\uffc1\030\uffc1\031" +
    "\uffc1\032\uffc1\033\uffc1\034\uffc1\035\uffc1\037\uffc1\001\002" +
    "\000\050\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\016" +
    "\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3" +
    "\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037" +
    "\uffc3\001\002\000\004\027\123\001\002\000\050\004\uffc4" +
    "\005\uffc4\006\uffc4\007\uffc4\010\uffc4\016\uffc4\021\uffc4\022" +
    "\uffc4\023\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4" +
    "\032\uffc4\033\uffc4\034\uffc4\035\uffc4\037\uffc4\001\002\000" +
    "\014\003\uffd0\017\uffd0\045\uffd0\046\uffd0\057\uffd0\001\002" +
    "\000\004\002\uffa3\001\002\000\050\004\uffb4\005\uffb4\006" +
    "\uffb4\007\uffb4\010\uffb4\016\uffb4\021\uffb4\022\uffb4\023\uffb4" +
    "\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4\032\uffb4\033" +
    "\uffb4\034\uffb4\035\uffb4\037\uffb4\001\002\000\050\004\uffb3" +
    "\005\uffb3\006\uffb3\007\uffb3\010\uffb3\016\uffb3\021\uffb3\022" +
    "\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030\uffb3\031\uffb3" +
    "\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\001\002\000" +
    "\024\003\131\011\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc" +
    "\016\uffdc\055\042\056\uffdc\001\002\000\054\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\016\uffb5\017\111\021\uffb5" +
    "\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031" +
    "\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5\037\uffb5\057\110" +
    "\001\002\000\012\003\103\045\102\046\105\057\133\001" +
    "\002\000\034\003\135\004\013\005\021\006\017\007\015" +
    "\010\023\016\012\021\010\023\uffa4\024\025\030\016\034" +
    "\022\035\uffa4\001\002\000\050\004\uffb6\005\uffb6\006\uffb6" +
    "\007\uffb6\010\uffb6\016\uffb6\021\uffb6\022\uffb6\023\uffb6\024" +
    "\uffb6\025\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6" +
    "\034\uffb6\035\uffb6\037\uffb6\001\002\000\050\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\016\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7\031\uffb7\032" +
    "\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\001\002\000\006" +
    "\023\137\035\140\001\002\000\004\017\141\001\002\000" +
    "\050\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\016\uffb9" +
    "\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9\030" +
    "\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037\uffb9" +
    "\001\002\000\004\035\142\001\002\000\050\004\uffb8\005" +
    "\uffb8\006\uffb8\007\uffb8\010\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\025\uffb8\027\uffb8\030\uffb8\031\uffb8\032" +
    "\uffb8\033\uffb8\034\uffb8\035\uffb8\037\uffb8\001\002\000\024" +
    "\022\uffa6\023\uffa6\025\uffa6\027\uffa6\031\uffa6\032\uffa6\033" +
    "\uffa6\035\uffa6\037\uffa6\001\002\000\004\016\145\001\002" +
    "\000\004\057\146\001\002\000\010\031\uffad\032\uffad\033" +
    "\uffad\001\002\000\010\031\uffab\032\152\033\153\001\002" +
    "\000\004\031\151\001\002\000\050\004\uffaa\005\uffaa\006" +
    "\uffaa\007\uffaa\010\uffaa\016\uffaa\021\uffaa\022\uffaa\023\uffaa" +
    "\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa\033" +
    "\uffaa\034\uffaa\035\uffaa\037\uffaa\001\002\000\004\056\161" +
    "\001\002\000\034\004\013\005\021\006\017\007\015\010" +
    "\023\016\012\021\010\023\uffa4\024\025\030\016\031\uffa4" +
    "\032\uffa4\034\022\001\002\000\010\023\155\031\uffaf\032" +
    "\uffaf\001\002\000\004\017\160\001\002\000\006\031\uffad" +
    "\032\uffad\001\002\000\006\031\uffac\032\152\001\002\000" +
    "\010\031\uffb0\032\uffb0\033\uffb0\001\002\000\006\012\164" +
    "\014\163\001\002\000\004\057\165\001\002\000\004\057" +
    "\uffb2\001\002\000\004\057\uffb1\001\002\000\036\004\013" +
    "\005\021\006\017\007\015\010\023\016\012\021\010\023" +
    "\uffa4\024\025\030\016\031\uffa4\032\uffa4\033\uffa4\034\022" +
    "\001\002\000\012\023\155\031\uffaf\032\uffaf\033\uffaf\001" +
    "\002\000\010\031\uffae\032\uffae\033\uffae\001\002\000\024" +
    "\022\uffa9\023\uffa9\025\uffa9\027\uffa9\031\uffa9\032\uffa9\033" +
    "\uffa9\035\uffa9\037\uffa9\001\002\000\022\003\175\011\074" +
    "\012\077\013\076\014\075\015\071\016\070\056\174\001" +
    "\002\000\020\017\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1" +
    "\044\uffe1\057\uffe1\001\002\000\020\017\uffe6\040\uffe6\041" +
    "\uffe6\042\206\043\207\044\205\057\uffe6\001\002\000\020" +
    "\011\074\012\077\013\076\014\075\015\071\016\070\056" +
    "\174\001\002\000\004\017\214\001\002\000\072\003\ufff2" +
    "\004\ufff2\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2" +
    "\023\ufff2\024\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032" +
    "\ufff2\033\ufff2\034\ufff2\035\ufff2\037\ufff2\055\ufff2\056\ufff2" +
    "\057\ufff2\001\002\000\020\017\uffe2\040\uffe2\041\uffe2\042" +
    "\uffe2\043\uffe2\044\uffe2\057\uffe2\001\002\000\010\017\203" +
    "\040\201\041\202\001\002\000\020\011\074\012\077\013" +
    "\076\014\075\015\071\016\070\056\174\001\002\000\020" +
    "\011\074\012\077\013\076\014\075\015\071\016\070\056" +
    "\174\001\002\000\072\003\uffe9\004\uffe9\005\uffe9\006\uffe9" +
    "\007\uffe9\010\uffe9\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015" +
    "\uffe9\016\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\025\uffe9" +
    "\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033\uffe9\034\uffe9\035" +
    "\uffe9\037\uffe9\055\uffe9\056\uffe9\057\uffe9\001\002\000\020" +
    "\017\uffe7\040\uffe7\041\uffe7\042\206\043\207\044\205\057" +
    "\uffe7\001\002\000\020\011\074\012\077\013\076\014\075" +
    "\015\071\016\070\056\174\001\002\000\020\011\074\012" +
    "\077\013\076\014\075\015\071\016\070\056\174\001\002" +
    "\000\020\011\074\012\077\013\076\014\075\015\071\016" +
    "\070\056\174\001\002\000\020\017\uffe4\040\uffe4\041\uffe4" +
    "\042\uffe4\043\uffe4\044\uffe4\057\uffe4\001\002\000\020\017" +
    "\uffe5\040\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\057\uffe5" +
    "\001\002\000\020\017\uffe3\040\uffe3\041\uffe3\042\uffe3\043" +
    "\uffe3\044\uffe3\057\uffe3\001\002\000\020\017\uffe8\040\uffe8" +
    "\041\uffe8\042\206\043\207\044\205\057\uffe8\001\002\000" +
    "\072\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\010\ufff1" +
    "\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016\ufff1\021" +
    "\ufff1\022\ufff1\023\ufff1\024\ufff1\025\ufff1\027\ufff1\030\ufff1" +
    "\031\ufff1\032\ufff1\033\ufff1\034\ufff1\035\ufff1\037\ufff1\055" +
    "\ufff1\056\ufff1\057\ufff1\001\002\000\010\040\201\041\202" +
    "\057\216\001\002\000\020\017\uffe0\040\uffe0\041\uffe0\042" +
    "\uffe0\043\uffe0\044\uffe0\057\uffe0\001\002\000\024\022\uffa8" +
    "\023\uffa8\025\uffa8\027\uffa8\031\uffa8\032\uffa8\033\uffa8\035" +
    "\uffa8\037\uffa8\001\002\000\016\004\013\005\021\006\017" +
    "\007\015\010\023\016\012\001\002\000\024\003\040\011" +
    "\uffdc\012\uffdc\013\uffdc\014\uffdc\015\uffdc\016\uffdc\055\042" +
    "\056\uffdc\001\002\000\012\003\103\017\223\045\102\046" +
    "\105\001\002\000\016\004\013\005\021\006\017\007\015" +
    "\010\023\016\012\001\002\000\004\057\225\001\002\000" +
    "\032\004\013\005\021\006\017\007\015\010\023\016\012" +
    "\021\010\022\uffa4\023\uffa4\024\025\030\016\034\022\001" +
    "\002\000\004\022\232\001\002\000\006\022\uffbc\023\230" +
    "\001\002\000\004\017\231\001\002\000\004\022\uffbb\001" +
    "\002\000\050\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba" +
    "\016\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027" +
    "\uffba\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba" +
    "\037\uffba\001\002\000\004\017\243\001\002\000\010\017" +
    "\ufff4\020\171\060\236\001\002\000\072\003\uffee\004\uffee" +
    "\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\012\uffee\013" +
    "\uffee\014\uffee\015\uffee\016\uffee\021\uffee\022\uffee\023\uffee" +
    "\024\uffee\025\uffee\027\uffee\030\uffee\031\uffee\032\uffee\033" +
    "\uffee\034\uffee\035\uffee\037\uffee\055\uffee\056\uffee\057\uffee" +
    "\001\002\000\006\003\241\016\240\001\002\000\004\017" +
    "\ufff5\001\002\000\006\017\ufff4\060\236\001\002\000\004" +
    "\017\242\001\002\000\004\017\ufff3\001\002\000\072\003" +
    "\uffed\004\uffed\005\uffed\006\uffed\007\uffed\010\uffed\011\uffed" +
    "\012\uffed\013\uffed\014\uffed\015\uffed\016\uffed\021\uffed\022" +
    "\uffed\023\uffed\024\uffed\025\uffed\027\uffed\030\uffed\031\uffed" +
    "\032\uffed\033\uffed\034\uffed\035\uffed\037\uffed\055\uffed\056" +
    "\uffed\057\uffed\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\002\004\001\001\000\022\003\023\004" +
    "\010\010\026\012\017\014\025\021\013\022\027\026\006" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\022" +
    "\234\023\232\001\001\000\002\001\001\000\022\003\216" +
    "\004\010\010\026\012\017\014\025\021\013\022\027\026" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\022" +
    "\003\167\004\010\010\026\012\017\014\025\021\013\022" +
    "\027\026\006\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\022\003\142\004\010\010\026\012" +
    "\017\014\025\021\013\022\027\026\006\001\001\000\002" +
    "\001\001\000\004\045\125\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\005\034\001\001\000\022\003\031" +
    "\004\010\010\026\012\017\014\025\021\013\022\027\026" +
    "\006\001\001\000\022\003\030\004\010\010\026\012\017" +
    "\014\025\021\013\022\027\026\006\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\036\042\037\040\040\036\041\044\042\035\043" +
    "\043\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\123\001\001\000\004\035\103\001" +
    "\001\000\002\001\001\000\004\027\071\001\001\000\002" +
    "\001\001\000\004\034\054\001\001\000\010\036\042\042" +
    "\066\043\043\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\036\042\042\057\043\043\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\036\042" +
    "\040\056\041\044\042\035\043\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\036\042" +
    "\043\065\001\001\000\006\036\042\043\064\001\001\000" +
    "\006\036\042\043\063\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\036\042" +
    "\037\077\040\036\041\044\042\035\043\043\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\035\103\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\044\106\001\001\000\014\036\042" +
    "\040\105\041\044\042\035\043\043\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\024\003\114\004\010\006\112\010" +
    "\026\012\017\014\025\021\013\022\027\026\006\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\007\117\001\001\000\022\003\121\004\010\010\026" +
    "\012\017\014\025\021\013\022\027\026\006\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\036\042\037\131\040\036" +
    "\041\044\042\035\043\043\001\001\000\004\044\123\001" +
    "\001\000\004\035\103\001\001\000\024\003\135\004\010" +
    "\010\026\012\017\013\133\014\025\021\013\022\027\026" +
    "\006\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\015\147\016\146\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\022\003\153\004\010\010\026\012\017\014" +
    "\025\021\013\022\027\026\006\001\001\000\004\017\155" +
    "\001\001\000\002\001\001\000\004\016\156\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\020\161\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\022\003\165\004\010\010\026\012\017\014\025\021\013" +
    "\022\027\026\006\001\001\000\004\017\166\001\001\000" +
    "\002\001\001\000\002\001\001\000\014\027\171\030\175" +
    "\031\177\032\172\033\176\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\027\171\031\214\032\172\033\176" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\027\171\032\212\033\176" +
    "\001\001\000\010\027\171\032\203\033\176\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\171\033\211" +
    "\001\001\000\006\027\171\033\210\001\001\000\006\027" +
    "\171\033\207\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\021\220\022\027\026\006\001\001\000\016\036\042\037" +
    "\221\040\036\041\044\042\035\043\043\001\001\000\004" +
    "\035\103\001\001\000\010\021\223\022\027\026\006\001" +
    "\001\000\002\001\001\000\024\003\226\004\010\010\026" +
    "\011\225\012\017\014\025\021\013\022\027\026\006\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\023\236\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public JTextArea outputArea;
    public static int errors = 0;
    
    public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
      System.err.println("  "+ errors + "==> " + info + " "+ message);
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }



/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action_part00000000(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERALS ::= BOOL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // DECLARE_B ::= ID COMMA DECLARE_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_B",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE_B ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_B",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_B ::= ID COMMA error END 
            {
              Object RESULT =null;
		 parser.report_error("Declaracion no valida", "ra"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_B",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARE_A ::= ID ASSIGN ARIT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_A",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARE_A ::= ID ASSIGN error END 
            {
              Object RESULT =null;
		 parser.report_error("Declaracion no valida", "ra"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_A",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE_RECOVER ::= END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_RECOVER",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARE_RECOVER ::= PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_RECOVER",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARE_S ::= TYPES DECLARE_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_S",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // DECLARE_S ::= TYPES DECLARE_B END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_S",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // DECLARE_S ::= DECLARE_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_S",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // DECLARE_FOR ::= TYPES ID ASSIGN E 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // DECLARE_FOR ::= ID ASSIGN E 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // ARIT ::= E END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ARIT",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // E ::= E PLUS T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E MINUS T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T ::= T MULT F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // T ::= T DIV F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // T ::= T MOD F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // T ::= F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // F ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // Concat ::= AND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Concat",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // Concat ::= OR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Concat",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // Negation ::= NOT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Negation",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Negation ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Negation",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LogicalOperators ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LogicalOperators ::= GREATERTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LogicalOperators ::= LESSEQUALTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LogicalOperators ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LogicalOperators ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LogicalA ::= LogicalA Concat LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalA",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LogicalA ::= LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalA",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // LogicalA ::= LogicalA error LogicalErrorEnd 
            {
              Object RESULT =null;
		 parser.report_error("Declaracion logica no valida", "ra"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalA",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalB",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // LogicalB ::= ELogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalB",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // LogicalB ::= error LogicalErrorEnd 
            {
              Object RESULT =null;
		 parser.report_error("Declaracion logica no valida", "ra"); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalB",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // LogicalErrorEnd ::= PARDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalErrorEnd",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // LogicalErrorEnd ::= END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalErrorEnd",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELogical ::= ELogical PLUS TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELogical ::= ELogical MINUS TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELogical ::= TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // TLogical ::= TLogical MULT FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // TLogical ::= TLogical DIV FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // TLogical ::= TLogical MOD FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // TLogical ::= FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FLogical ::= Negation LITERALS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FLogical",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FLogical ::= Negation PARIZQ LogicalA PARDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FLogical",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // IF_C ::= YET PROGRAM_BODY YETEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_C",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // IF_C ::= YET error 
            {
              Object RESULT =null;
		 parser.report_error("YET sin END", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_C",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // IF_C ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_C",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // IF_B ::= PROGRAM_BODY CONDEND IF_C 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_B",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // IF_B ::= error 
            {
              Object RESULT =null;
		 parser.report_error("IF SIN END", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_B",4, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // IF_A ::= PARIZQ LogicalA PARDER IF_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_A",3, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // IF_S ::= COND IF_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_S",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // IF_S ::= COND error 
            {
              Object RESULT =null;
		 parser.report_error("COND sin fin", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_S",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // FOR_A ::= PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_A",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // FOR_A ::= PROGRAM_BODY OUT END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_A",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // FOR_S ::= REP PARIZQ DECLARE_S LogicalA END DECLARE_S PARDER FOR_A REPEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_S",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-8)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // WHILE_A ::= PROGRAM_BODY TILEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_A",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // WHILE_A ::= PROGRAM_BODY OUT END TILEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_A",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // WHILE_A ::= error 
            {
              Object RESULT =null;
		parser.report_error("no til end", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_A",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // WHILE_B ::= PARIZQ LogicalA PARDER WHILE_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_B",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILE_B ::= PARIZQ error 
            {
              Object RESULT =null;
		 parser.report_error("wrong condition for til", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_B",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // WHILE_S ::= TIL WHILE_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_S",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WHILE_S ::= TIL error 
            {
              Object RESULT =null;
		 parser.report_error("worng til structure", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_S",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCH_TYPES ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH_TYPES ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCH_C ::= OUT END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_C",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH_C ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_C",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH_B ::= SWITCH_B OPT PARIZQ SWITCH_TYPES PARDER PROGRAM_BODY SWITCH_C 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_B",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH_B ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_B",12, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SWITCH_A ::= SWITCH_B ANY PROGRAM_BODY SWITCH_C SWITCH_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_A",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SWITCH_A ::= SWITCH_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_A",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH_S ::= SET PARIZQ ID PARDER SWITCH_A SETEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_S",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // PROGRAM_BODY ::= DECLARE_S PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // PROGRAM_BODY ::= IF_S PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // PROGRAM_BODY ::= FOR_S PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // PROGRAM_BODY ::= WHILE_S PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PROGRAM_BODY ::= SWITCH_S PROGRAM_BODY 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PROGRAM_BODY ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Analizador$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
              return CUP$Analizador$do_action_part00000000(
                               CUP$Analizador$act_num,
                               CUP$Analizador$parser,
                               CUP$Analizador$stack,
                               CUP$Analizador$top);
    }
}

}
