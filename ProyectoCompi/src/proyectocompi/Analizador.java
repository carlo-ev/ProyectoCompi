
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Thu Mar 26 18:34:42 CST 2015
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Thu Mar 26 18:34:42 CST 2015
  */
public class Analizador extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Analizador() {super();}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Analizador(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\130\000\002\002\004\000\002\033\003\000\002\033" +
    "\003\000\002\033\003\000\002\033\003\000\002\033\003" +
    "\000\002\033\002\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\023\003\000\002\031\005\000\002\031" +
    "\004\000\002\030\006\000\002\027\004\000\002\027\004" +
    "\000\002\032\006\000\002\037\003\000\002\037\005\000" +
    "\002\036\005\000\002\036\005\000\002\036\005\000\002" +
    "\036\003\000\002\035\005\000\002\035\005\000\002\035" +
    "\003\000\002\041\003\000\002\041\003\000\002\042\003" +
    "\000\002\042\002\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\003\000\002" +
    "\040\003\000\002\044\005\000\002\044\003\000\002\043" +
    "\005\000\002\043\003\000\002\047\004\000\002\047\006" +
    "\000\002\046\005\000\002\046\005\000\002\046\005\000" +
    "\002\046\003\000\002\045\005\000\002\045\005\000\002" +
    "\045\003\000\002\024\011\000\002\025\005\000\002\025" +
    "\002\000\002\007\007\000\002\007\004\000\002\004\007" +
    "\000\002\012\004\000\002\012\006\000\002\011\011\000" +
    "\002\010\004\000\002\014\003\000\002\014\005\000\002" +
    "\013\010\000\002\022\003\000\002\022\003\000\002\022" +
    "\003\000\002\021\004\000\002\021\002\000\002\020\011" +
    "\000\002\017\007\000\002\017\003\000\002\015\010\000" +
    "\002\052\004\000\002\052\003\000\002\052\003\000\002" +
    "\051\003\000\002\051\003\000\002\051\003\000\002\051" +
    "\003\000\002\051\003\000\002\051\003\000\002\003\003" +
    "\000\002\003\002\000\002\002\005\000\002\002\005\000" +
    "\002\002\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\006\003\004\036\005\001\002\000\034\003" +
    "\040\004\014\005\024\006\021\007\016\010\026\016\ufffb" +
    "\021\011\024\030\030\017\034\023\037\uffad\040\034\001" +
    "\002\000\034\003\025\004\014\005\024\006\021\007\016" +
    "\010\026\016\ufffb\021\011\024\030\030\017\034\023\037" +
    "\uffad\040\034\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\004\016\230\001\002\000\004\061" +
    "\167\001\002\000\056\004\uffb3\005\uffb3\006\uffb3\007\uffb3" +
    "\010\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3\024\uffb3\025" +
    "\uffb3\027\uffb3\030\uffb3\031\uffb3\032\uffb3\033\uffb3\034\uffb3" +
    "\035\uffb3\037\uffb3\040\uffb3\041\uffb3\042\uffb3\001\002\000" +
    "\056\004\014\005\024\006\021\007\016\010\026\016\ufffb" +
    "\021\011\022\uffae\023\uffae\024\030\025\uffae\027\uffae\030" +
    "\017\031\uffae\032\uffae\033\uffae\034\023\035\uffae\037\uffae" +
    "\040\034\041\uffae\042\uffae\001\002\000\004\016\000\001" +
    "\002\000\056\004\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4" +
    "\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\025\uffb4\027" +
    "\uffb4\030\uffb4\031\uffb4\032\uffb4\033\uffb4\034\uffb4\035\uffb4" +
    "\037\uffb4\040\uffb4\041\uffb4\042\uffb4\001\002\000\004\016" +
    "\ufffd\001\002\000\004\061\140\001\002\000\056\004\uffaf" +
    "\005\uffaf\006\uffaf\007\uffaf\010\uffaf\016\uffaf\021\uffaf\022" +
    "\uffaf\023\uffaf\024\uffaf\025\uffaf\027\uffaf\030\uffaf\031\uffaf" +
    "\032\uffaf\033\uffaf\034\uffaf\035\uffaf\037\uffaf\040\uffaf\041" +
    "\uffaf\042\uffaf\001\002\000\004\016\uffff\001\002\000\056" +
    "\004\uffb1\005\uffb1\006\uffb1\007\uffb1\010\uffb1\016\uffb1\021" +
    "\uffb1\022\uffb1\023\uffb1\024\uffb1\025\uffb1\027\uffb1\030\uffb1" +
    "\031\uffb1\032\uffb1\033\uffb1\034\uffb1\035\uffb1\037\uffb1\040" +
    "\uffb1\041\uffb1\042\uffb1\001\002\000\004\061\127\001\002" +
    "\000\004\016\ufffe\001\002\000\034\002\uffaa\004\uffb5\005" +
    "\uffb5\006\uffb5\007\uffb5\010\uffb5\016\uffb5\021\uffb5\024\uffb5" +
    "\030\uffb5\034\uffb5\037\uffb5\040\uffb5\001\002\000\004\016" +
    "\ufffc\001\002\000\004\037\126\001\002\000\004\061\055" +
    "\001\002\000\056\004\uffb0\005\uffb0\006\uffb0\007\uffb0\010" +
    "\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0\024\uffb0\025\uffb0" +
    "\027\uffb0\030\uffb0\031\uffb0\032\uffb0\033\uffb0\034\uffb0\035" +
    "\uffb0\037\uffb0\040\uffb0\041\uffb0\042\uffb0\001\002\000\056" +
    "\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\016\uffb6\021" +
    "\uffb6\022\uffb6\023\uffb6\024\uffb6\025\uffb6\027\uffb6\030\uffb6" +
    "\031\uffb6\032\uffb6\033\uffb6\034\uffb6\035\uffb6\037\uffb6\040" +
    "\uffb6\041\uffb6\042\uffb6\001\002\000\056\004\uffb2\005\uffb2" +
    "\006\uffb2\007\uffb2\010\uffb2\016\uffb2\021\uffb2\022\uffb2\023" +
    "\uffb2\024\uffb2\025\uffb2\027\uffb2\030\uffb2\031\uffb2\032\uffb2" +
    "\033\uffb2\034\uffb2\035\uffb2\037\uffb2\040\uffb2\041\uffb2\042" +
    "\uffb2\001\002\000\004\016\035\001\002\000\004\061\036" +
    "\001\002\000\004\062\037\001\002\000\036\003\040\004" +
    "\014\005\024\006\021\007\016\010\026\016\ufffb\021\011" +
    "\024\030\030\017\034\023\040\034\041\uffad\042\uffad\001" +
    "\002\000\056\004\uffb5\005\uffb5\006\uffb5\007\uffb5\010\uffb5" +
    "\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025\uffb5\027" +
    "\uffb5\030\uffb5\031\uffb5\032\uffb5\033\uffb5\034\uffb5\035\uffb5" +
    "\037\uffb5\040\uffb5\041\uffb5\042\uffb5\001\002\000\006\041" +
    "\uffcb\042\042\001\002\000\016\011\050\012\053\013\051" +
    "\014\052\015\046\016\045\001\002\000\004\041\044\001" +
    "\002\000\056\004\uffcd\005\uffcd\006\uffcd\007\uffcd\010\uffcd" +
    "\016\uffcd\021\uffcd\022\uffcd\023\uffcd\024\uffcd\025\uffcd\027" +
    "\uffcd\030\uffcd\031\uffcd\032\uffcd\033\uffcd\034\uffcd\035\uffcd" +
    "\037\uffcd\040\uffcd\041\uffcd\042\uffcd\001\002\000\040\017" +
    "\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\047\ufff5\050\ufff5" +
    "\051\ufff5\052\ufff5\053\ufff5\054\ufff5\055\ufff5\056\ufff5\057" +
    "\ufff5\062\ufff5\001\002\000\040\017\ufff6\043\ufff6\044\ufff6" +
    "\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6\052\ufff6\053" +
    "\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\062\ufff6\001\002" +
    "\000\004\017\054\001\002\000\040\017\ufffa\043\ufffa\044" +
    "\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa\051\ufffa\052\ufffa" +
    "\053\ufffa\054\ufffa\055\ufffa\056\ufffa\057\ufffa\062\ufffa\001" +
    "\002\000\040\017\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\051\ufff8\052\ufff8\053\ufff8\054\ufff8\055" +
    "\ufff8\056\ufff8\057\ufff8\062\ufff8\001\002\000\040\017\ufff7" +
    "\043\ufff7\044\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\051" +
    "\ufff7\052\ufff7\053\ufff7\054\ufff7\055\ufff7\056\ufff7\057\ufff7" +
    "\062\ufff7\001\002\000\040\017\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\052\ufff9\053\ufff9" +
    "\054\ufff9\055\ufff9\056\ufff9\057\ufff9\062\ufff9\001\002\000" +
    "\004\041\uffcc\001\002\000\022\011\uffe1\012\uffe1\013\uffe1" +
    "\014\uffe1\015\uffe1\016\uffe1\060\060\061\uffe1\001\002\000" +
    "\040\017\uffce\043\uffce\044\uffce\045\101\046\102\047\100" +
    "\050\uffce\051\uffce\052\uffce\053\uffce\054\uffce\055\uffce\056" +
    "\uffce\057\uffce\062\uffce\001\002\000\012\017\uffd7\050\uffd7" +
    "\051\uffd7\062\uffd7\001\002\000\020\011\uffe2\012\uffe2\013" +
    "\uffe2\014\uffe2\015\uffe2\016\uffe2\061\uffe2\001\002\000\010" +
    "\050\113\051\115\062\117\001\002\000\020\011\050\012" +
    "\053\013\051\014\052\015\046\016\045\061\107\001\002" +
    "\000\040\017\uffd1\043\uffd1\044\uffd1\045\uffd1\046\uffd1\047" +
    "\uffd1\050\uffd1\051\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\062\uffd1\001\002\000\032\017\uffd9\043" +
    "\071\044\065\050\uffd9\051\uffd9\052\075\053\073\054\067" +
    "\055\072\056\070\057\066\062\uffd9\001\002\000\022\011" +
    "\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\060\060" +
    "\061\uffe1\001\002\000\022\011\uffdb\012\uffdb\013\uffdb\014" +
    "\uffdb\015\uffdb\016\uffdb\060\uffdb\061\uffdb\001\002\000\022" +
    "\011\uffdd\012\uffdd\013\uffdd\014\uffdd\015\uffdd\016\uffdd\060" +
    "\uffdd\061\uffdd\001\002\000\022\011\uffdc\012\uffdc\013\uffdc" +
    "\014\uffdc\015\uffdc\016\uffdc\060\uffdc\061\uffdc\001\002\000" +
    "\022\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1" +
    "\060\060\061\uffe1\001\002\000\022\011\uffde\012\uffde\013" +
    "\uffde\014\uffde\015\uffde\016\uffde\060\uffde\061\uffde\001\002" +
    "\000\022\011\uffdf\012\uffdf\013\uffdf\014\uffdf\015\uffdf\016" +
    "\uffdf\060\uffdf\061\uffdf\001\002\000\022\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\060\060\061\uffe1\001" +
    "\002\000\022\011\uffe0\012\uffe0\013\uffe0\014\uffe0\015\uffe0" +
    "\016\uffe0\060\uffe0\061\uffe0\001\002\000\012\017\uffda\050" +
    "\uffda\051\uffda\062\uffda\001\002\000\040\017\uffd0\043\uffd0" +
    "\044\uffd0\045\101\046\102\047\100\050\uffd0\051\uffd0\052" +
    "\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\062\uffd0" +
    "\001\002\000\022\011\uffe1\012\uffe1\013\uffe1\014\uffe1\015" +
    "\uffe1\016\uffe1\060\060\061\uffe1\001\002\000\022\011\uffe1" +
    "\012\uffe1\013\uffe1\014\uffe1\015\uffe1\016\uffe1\060\060\061" +
    "\uffe1\001\002\000\022\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\060\060\061\uffe1\001\002\000\040\017" +
    "\uffd3\043\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3" +
    "\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057" +
    "\uffd3\062\uffd3\001\002\000\040\017\uffd4\043\uffd4\044\uffd4" +
    "\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4\052\uffd4\053" +
    "\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\062\uffd4\001\002" +
    "\000\040\017\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2\047" +
    "\uffd2\050\uffd2\051\uffd2\052\uffd2\053\uffd2\054\uffd2\055\uffd2" +
    "\056\uffd2\057\uffd2\062\uffd2\001\002\000\040\017\uffcf\043" +
    "\uffcf\044\uffcf\045\101\046\102\047\100\050\uffcf\051\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\062" +
    "\uffcf\001\002\000\022\011\uffe1\012\uffe1\013\uffe1\014\uffe1" +
    "\015\uffe1\016\uffe1\060\060\061\uffe1\001\002\000\040\017" +
    "\uffd6\043\uffd6\044\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\062\uffd6\001\002\000\010\050\113\051\115\062\112" +
    "\001\002\000\040\017\uffd5\043\uffd5\044\uffd5\045\uffd5\046" +
    "\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053\uffd5\054\uffd5" +
    "\055\uffd5\056\uffd5\057\uffd5\062\uffd5\001\002\000\022\011" +
    "\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4\060\uffe4" +
    "\061\uffe4\001\002\000\022\011\uffe1\012\uffe1\013\uffe1\014" +
    "\uffe1\015\uffe1\016\uffe1\060\060\061\uffe1\001\002\000\022" +
    "\011\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\060" +
    "\uffe3\061\uffe3\001\002\000\012\017\uffd8\050\uffd8\051\uffd8" +
    "\062\uffd8\001\002\000\034\003\040\004\014\005\024\006" +
    "\021\007\016\010\026\016\ufffb\021\011\024\030\025\uffad" +
    "\030\017\034\023\040\034\001\002\000\056\004\uffc8\005" +
    "\uffc8\006\uffc8\007\uffc8\010\uffc8\016\uffc8\021\uffc8\022\uffc8" +
    "\023\uffc8\024\uffc8\025\uffc8\027\uffc8\030\uffc8\031\uffc8\032" +
    "\uffc8\033\uffc8\034\uffc8\035\uffc8\037\uffc8\040\uffc8\041\uffc8" +
    "\042\uffc8\001\002\000\004\025\122\001\002\000\060\004" +
    "\uffc9\005\uffc9\006\uffc9\007\uffc9\010\uffc9\016\uffc9\021\uffc9" +
    "\022\uffc9\023\uffc9\024\uffc9\025\uffc9\026\123\027\uffc9\030" +
    "\uffc9\031\uffc9\032\uffc9\033\uffc9\034\uffc9\035\uffc9\037\uffc9" +
    "\040\uffc9\041\uffc9\042\uffc9\001\002\000\034\003\040\004" +
    "\014\005\024\006\021\007\016\010\026\016\ufffb\021\011" +
    "\024\030\027\uffad\030\017\034\023\040\034\001\002\000" +
    "\004\027\125\001\002\000\056\004\uffca\005\uffca\006\uffca" +
    "\007\uffca\010\uffca\016\uffca\021\uffca\022\uffca\023\uffca\024" +
    "\uffca\025\uffca\027\uffca\030\uffca\031\uffca\032\uffca\033\uffca" +
    "\034\uffca\035\uffca\037\uffca\040\uffca\041\uffca\042\uffca\001" +
    "\002\000\004\002\uffac\001\002\000\022\011\uffe1\012\uffe1" +
    "\013\uffe1\014\uffe1\015\uffe1\016\uffe1\060\060\061\uffe1\001" +
    "\002\000\010\050\113\051\115\062\131\001\002\000\036" +
    "\003\040\004\014\005\024\006\021\007\016\010\026\016" +
    "\ufffb\021\011\023\uffad\024\030\030\017\034\023\035\uffad" +
    "\040\034\001\002\000\006\023\133\035\135\001\002\000" +
    "\004\017\136\001\002\000\056\004\uffc1\005\uffc1\006\uffc1" +
    "\007\uffc1\010\uffc1\016\uffc1\021\uffc1\022\uffc1\023\uffc1\024" +
    "\uffc1\025\uffc1\027\uffc1\030\uffc1\031\uffc1\032\uffc1\033\uffc1" +
    "\034\uffc1\035\uffc1\037\uffc1\040\uffc1\041\uffc1\042\uffc1\001" +
    "\002\000\056\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3" +
    "\016\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027" +
    "\uffc3\030\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\001\002\000\004\035" +
    "\137\001\002\000\056\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\025" +
    "\uffc2\027\uffc2\030\uffc2\031\uffc2\032\uffc2\033\uffc2\034\uffc2" +
    "\035\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\001\002\000" +
    "\010\012\144\014\143\016\141\001\002\000\004\062\uffbe" +
    "\001\002\000\004\062\145\001\002\000\004\062\uffc0\001" +
    "\002\000\004\062\uffbf\001\002\000\002\001\002\000\010" +
    "\031\uffb9\032\151\033\152\001\002\000\004\031\150\001" +
    "\002\000\056\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010\uffb8" +
    "\016\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\027" +
    "\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035\uffb8" +
    "\037\uffb8\040\uffb8\041\uffb8\042\uffb8\001\002\000\004\061" +
    "\160\001\002\000\034\003\040\004\014\005\024\006\021" +
    "\007\016\010\026\016\ufffb\021\011\023\uffad\024\030\030" +
    "\017\034\023\040\034\001\002\000\004\023\154\001\002" +
    "\000\004\017\157\001\002\000\002\001\002\000\006\031" +
    "\uffba\032\151\001\002\000\010\031\uffbd\032\uffbd\033\uffbd" +
    "\001\002\000\010\012\144\014\143\016\141\001\002\000" +
    "\004\062\162\001\002\000\042\003\040\004\014\005\024" +
    "\006\021\007\016\010\026\016\ufffb\021\011\023\uffad\024" +
    "\030\030\017\031\uffad\032\uffad\033\uffad\034\023\040\034" +
    "\001\002\000\012\023\154\031\uffbc\032\uffbc\033\uffbc\001" +
    "\002\000\010\031\uffbb\032\uffbb\033\uffbb\001\002\000\056" +
    "\004\uffb7\005\uffb7\006\uffb7\007\uffb7\010\uffb7\016\uffb7\021" +
    "\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\027\uffb7\030\uffb7" +
    "\031\uffb7\032\uffb7\033\uffb7\034\uffb7\035\uffb7\037\uffb7\040" +
    "\uffb7\041\uffb7\042\uffb7\001\002\000\056\004\uffc4\005\uffc4" +
    "\006\uffc4\007\uffc4\010\uffc4\016\uffc4\021\uffc4\022\uffc4\023" +
    "\uffc4\024\uffc4\025\uffc4\027\uffc4\030\uffc4\031\uffc4\032\uffc4" +
    "\033\uffc4\034\uffc4\035\uffc4\037\uffc4\040\uffc4\041\uffc4\042" +
    "\uffc4\001\002\000\016\004\014\005\024\006\021\007\016" +
    "\010\026\016\ufffb\001\002\000\022\011\uffe1\012\uffe1\013" +
    "\uffe1\014\uffe1\015\uffe1\016\uffe1\060\060\061\uffe1\001\002" +
    "\000\010\017\172\050\113\051\115\001\002\000\016\004" +
    "\014\005\024\006\021\007\016\010\026\016\ufffb\001\002" +
    "\000\004\016\204\001\002\000\004\062\175\001\002\000" +
    "\036\003\040\004\014\005\024\006\021\007\016\010\026" +
    "\016\ufffb\021\011\022\uffad\023\uffad\024\030\030\017\034" +
    "\023\040\034\001\002\000\056\004\uffc5\005\uffc5\006\uffc5" +
    "\007\uffc5\010\uffc5\016\uffc5\021\uffc5\022\uffc5\023\uffc5\024" +
    "\uffc5\025\uffc5\027\uffc5\030\uffc5\031\uffc5\032\uffc5\033\uffc5" +
    "\034\uffc5\035\uffc5\037\uffc5\040\uffc5\041\uffc5\042\uffc5\001" +
    "\002\000\006\022\201\023\200\001\002\000\004\017\202" +
    "\001\002\000\056\004\uffc7\005\uffc7\006\uffc7\007\uffc7\010" +
    "\uffc7\016\uffc7\021\uffc7\022\uffc7\023\uffc7\024\uffc7\025\uffc7" +
    "\027\uffc7\030\uffc7\031\uffc7\032\uffc7\033\uffc7\034\uffc7\035" +
    "\uffc7\037\uffc7\040\uffc7\041\uffc7\042\uffc7\001\002\000\004" +
    "\022\203\001\002\000\056\004\uffc6\005\uffc6\006\uffc6\007" +
    "\uffc6\010\uffc6\016\uffc6\021\uffc6\022\uffc6\023\uffc6\024\uffc6" +
    "\025\uffc6\027\uffc6\030\uffc6\031\uffc6\032\uffc6\033\uffc6\034" +
    "\uffc6\035\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6\001\002" +
    "\000\004\020\205\001\002\000\020\011\050\012\053\013" +
    "\051\014\052\015\046\016\045\061\210\001\002\000\020" +
    "\017\uffed\043\uffed\044\uffed\045\uffed\046\uffed\047\uffed\062" +
    "\uffed\001\002\000\020\017\uffe5\043\uffe5\044\uffe5\045\217" +
    "\046\220\047\216\062\uffe5\001\002\000\020\011\050\012" +
    "\053\013\051\014\052\015\046\016\045\061\210\001\002" +
    "\000\020\017\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\062\uffe8\001\002\000\010\043\213\044\214\062\uffee" +
    "\001\002\000\020\011\050\012\053\013\051\014\052\015" +
    "\046\016\045\061\210\001\002\000\020\011\050\012\053" +
    "\013\051\014\052\015\046\016\045\061\210\001\002\000" +
    "\020\017\uffe6\043\uffe6\044\uffe6\045\217\046\220\047\216" +
    "\062\uffe6\001\002\000\020\011\050\012\053\013\051\014" +
    "\052\015\046\016\045\061\210\001\002\000\020\011\050" +
    "\012\053\013\051\014\052\015\046\016\045\061\210\001" +
    "\002\000\020\011\050\012\053\013\051\014\052\015\046" +
    "\016\045\061\210\001\002\000\020\017\uffea\043\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\062\uffea\001\002\000\020" +
    "\017\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047\uffeb\062" +
    "\uffeb\001\002\000\020\017\uffe9\043\uffe9\044\uffe9\045\uffe9" +
    "\046\uffe9\047\uffe9\062\uffe9\001\002\000\020\017\uffe7\043" +
    "\uffe7\044\uffe7\045\217\046\220\047\216\062\uffe7\001\002" +
    "\000\010\043\213\044\214\062\226\001\002\000\020\017" +
    "\uffec\043\uffec\044\uffec\045\uffec\046\uffec\047\uffec\062\uffec" +
    "\001\002\000\074\004\uffef\005\uffef\006\uffef\007\uffef\010" +
    "\uffef\011\uffef\012\uffef\013\uffef\014\uffef\015\uffef\016\uffef" +
    "\021\uffef\022\uffef\023\uffef\024\uffef\025\uffef\027\uffef\030" +
    "\uffef\031\uffef\032\uffef\033\uffef\034\uffef\035\uffef\037\uffef" +
    "\040\uffef\041\uffef\042\uffef\060\uffef\061\uffef\001\002\000" +
    "\010\017\233\020\235\063\232\001\002\000\074\004\ufff0" +
    "\005\ufff0\006\ufff0\007\ufff0\010\ufff0\011\ufff0\012\ufff0\013" +
    "\ufff0\014\ufff0\015\ufff0\016\ufff0\021\ufff0\022\ufff0\023\ufff0" +
    "\024\ufff0\025\ufff0\027\ufff0\030\ufff0\031\ufff0\032\ufff0\033" +
    "\ufff0\034\ufff0\035\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\060\ufff0\061\ufff0\001\002\000\004\016\241\001\002\000" +
    "\074\004\ufff4\005\ufff4\006\ufff4\007\ufff4\010\ufff4\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\021\ufff4\022" +
    "\ufff4\023\ufff4\024\ufff4\025\ufff4\027\ufff4\030\ufff4\031\ufff4" +
    "\032\ufff4\033\ufff4\034\ufff4\035\ufff4\037\ufff4\040\ufff4\041" +
    "\ufff4\042\ufff4\060\ufff4\061\ufff4\001\002\000\074\004\ufff2" +
    "\005\ufff2\006\ufff2\007\ufff2\010\ufff2\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\021\ufff2\022\ufff2\023\ufff2" +
    "\024\ufff2\025\ufff2\027\ufff2\030\ufff2\031\ufff2\032\ufff2\033" +
    "\ufff2\034\ufff2\035\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2" +
    "\060\ufff2\061\ufff2\001\002\000\020\011\050\012\053\013" +
    "\051\014\052\015\046\016\045\061\210\001\002\000\010" +
    "\017\233\043\213\044\214\001\002\000\074\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\010\ufff1\011\ufff1\012\ufff1\013\ufff1" +
    "\014\ufff1\015\ufff1\016\ufff1\021\ufff1\022\ufff1\023\ufff1\024" +
    "\ufff1\025\ufff1\027\ufff1\030\ufff1\031\ufff1\032\ufff1\033\ufff1" +
    "\034\ufff1\035\ufff1\037\ufff1\040\ufff1\041\ufff1\042\ufff1\060" +
    "\ufff1\061\ufff1\001\002\000\074\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\010\ufff3\011\ufff3\012\ufff3\013\ufff3\014\ufff3\015" +
    "\ufff3\016\ufff3\021\ufff3\022\ufff3\023\ufff3\024\ufff3\025\ufff3" +
    "\027\ufff3\030\ufff3\031\ufff3\032\ufff3\033\ufff3\034\ufff3\035" +
    "\ufff3\037\ufff3\040\ufff3\041\ufff3\042\ufff3\060\ufff3\061\ufff3" +
    "\001\002\000\006\017\233\063\232\001\002\000\004\037" +
    "\243\001\002\000\004\002\uffab\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\241\000\004\002\005\001\001\000\026\003\241\004" +
    "\011\010\032\013\021\015\030\024\017\027\014\033\007" +
    "\051\031\052\012\001\001\000\026\003\026\004\011\010" +
    "\032\013\021\015\030\024\017\027\014\033\007\051\031" +
    "\052\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\030\230\031\226\001\001\000\004\011\165\001\001" +
    "\000\002\001\001\000\022\004\011\010\032\013\021\015" +
    "\030\024\017\027\014\033\007\051\164\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\003\040" +
    "\004\011\010\032\013\021\015\030\024\017\027\014\033" +
    "\007\051\031\052\012\001\001\000\002\001\001\000\004" +
    "\025\042\001\001\000\004\034\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\061\043\060\044\056\045\063\046\055\047\062\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\041\113\001\001\000\004\034\107\001\001\000" +
    "\002\001\001\000\004\040\073\001\001\000\010\042\061" +
    "\046\105\047\062\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\042\061\046\076\047\062" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\042" +
    "\061\044\075\045\063\046\055\047\062\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\042" +
    "\061\047\104\001\001\000\006\042\061\047\103\001\001" +
    "\000\006\042\061\047\102\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\061\043\110\044\056\045\063\046\055\047\062\001" +
    "\001\000\002\001\001\000\004\041\113\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\042\061\044\115\045" +
    "\063\046\055\047\062\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\120\004\011\007\117\010\032\013" +
    "\021\015\030\024\017\027\014\033\007\051\031\052\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\026\003\123\004\011\010\032\013\021\015\030" +
    "\024\017\027\014\033\007\051\031\052\012\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\042\061\043\127\044\056\045\063\046\055\047\062\001" +
    "\001\000\004\041\113\001\001\000\026\003\131\004\011" +
    "\010\032\013\021\015\030\024\017\027\014\033\007\051" +
    "\031\052\012\001\001\000\004\014\133\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\022\141\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\017\146\020\145\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\003\152\004\011\010\032\013\021\015\030\024\017" +
    "\027\014\033\007\051\031\052\012\001\001\000\004\021" +
    "\154\001\001\000\002\001\001\000\004\020\155\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\022\160\001" +
    "\001\000\002\001\001\000\026\003\162\004\011\010\032" +
    "\013\021\015\030\024\017\027\014\033\007\051\031\052" +
    "\012\001\001\000\004\021\163\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\027\167\033" +
    "\007\001\001\000\016\042\061\043\170\044\056\045\063" +
    "\046\055\047\062\001\001\000\004\041\113\001\001\000" +
    "\006\032\173\033\172\001\001\000\002\001\001\000\002" +
    "\001\001\000\030\003\176\004\011\010\032\012\175\013" +
    "\021\015\030\024\017\027\014\033\007\051\031\052\012" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\034\205\035\211\036\206\037" +
    "\210\001\001\000\002\001\001\000\002\001\001\000\012" +
    "\034\205\035\224\036\206\037\210\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\034\205\036\223\037\210" +
    "\001\001\000\010\034\205\036\214\037\210\001\001\000" +
    "\002\001\001\000\006\034\205\037\222\001\001\000\006" +
    "\034\205\037\221\001\001\000\006\034\205\037\220\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\023\233\001\001\000\002\001\001" +
    "\000\004\031\237\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\034\205\035\235\036\206\037\210\001\001" +
    "\000\004\023\236\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\023\233\001\001\000\002\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Analizador$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Analizador$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Analizador$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
        outputArea.append("("+errors+")> " + message + info + "\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  @Override
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Analizador$actions {
  private final Analizador parser;

  /** Constructor */
  CUP$Analizador$actions(Analizador parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Analizador$do_action(
    int                        CUP$Analizador$act_num,
    java_cup.runtime.lr_parser CUP$Analizador$parser,
    java.util.Stack            CUP$Analizador$stack,
    int                        CUP$Analizador$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Analizador$result;

      /* select the action based on the action number */
      switch (CUP$Analizador$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // PROGRAM ::= MAIN error 
            {
              Object RESULT =null;
		 parser.report_error("Error Reaching RUN END", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // PROGRAM ::= error PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;
		 parser.report_error("RUN END without RUN", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // PROGRAM_BODY ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // PROGRAM_BODY ::= STATEMENTS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",1, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STATEMENT ::= FUNC_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // STATEMENT ::= SWITCH_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // STATEMENT ::= WHILE_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // STATEMENT ::= FOR_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // STATEMENT ::= IF_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // STATEMENT ::= DECLARE_S 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENT",39, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // STATEMENTS ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Error in a Statement", ""); 
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENTS",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENTS",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("STATEMENTS",40, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // SWITCH_S ::= SET PARIZQ SWITCH_TYPES PARDER SWITCH_B SETEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_S",11, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // SWITCH_B ::= SWITCH_C 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_B",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // SWITCH_B ::= SWITCH_C ANY PROGRAM_BODY SWITCH_D SWITCH_C 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_B",13, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // SWITCH_C ::= SWITCH_C OPT PARIZQ SWITCH_TYPES PARDER PROGRAM_BODY SWITCH_D 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_C",14, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // SWITCH_D ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_D",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SWITCH_D ::= OUT END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_D",15, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SWITCH_TYPES ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCH_TYPES ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCH_TYPES ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",16, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // WHILE_S ::= TIL PARIZQ LogicalA PARDER PROGRAM_BODY WHILE_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_S",9, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-5)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // WHILE_A ::= OUT END TILEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_A",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // WHILE_A ::= TILEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("WHILE_A",10, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FOR_S ::= REP FOR_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_S",6, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FOR_A ::= PARIZQ DECLARE_S LogicalA END DECLARE_FOR PARDER FOR_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_A",7, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FOR_B ::= PROGRAM_BODY OUT END REPEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_B",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FOR_B ::= PROGRAM_BODY REPEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FOR_B",8, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // IF_S ::= COND PARIZQ LogicalA PARDER IF_C 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_S",2, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // IF_C ::= PROGRAM_BODY CONDEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_C",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // IF_C ::= PROGRAM_BODY CONDEND YET PROGRAM_BODY YETEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("IF_C",5, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-4)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // FUNC_A ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FUNC_A",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // FUNC_A ::= RET LITERALS END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FUNC_A",19, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // FUNC_S ::= ACT ID PARIZQ PARDER PROGRAM_BODY FUNC_A ACTEND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FUNC_S",18, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-6)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ELogical ::= TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ELogical ::= ELogical MINUS TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELogical ::= ELogical PLUS TLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("ELogical",35, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TLogical ::= FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // TLogical ::= TLogical MOD FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TLogical ::= TLogical DIV FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TLogical ::= TLogical MULT FLogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TLogical",36, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // FLogical ::= Negation PARIZQ LogicalA PARDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FLogical",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // FLogical ::= Negation LITERALS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("FLogical",37, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LogicalA ::= LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalA",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // LogicalA ::= LogicalA Concat LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalA",33, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // LogicalB ::= ELogical 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalB",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalB",34, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // LogicalOperators ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // LogicalOperators ::= EQUAL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalOperators ::= LESSEQUALTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalOperators ::= GREATERTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalOperators ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LogicalOperators",30, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // Negation ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Negation",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // Negation ::= NOT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Negation",32, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // Concat ::= OR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Concat",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // Concat ::= AND 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("Concat",31, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E MINUS T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // E ::= E PLUS T 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("E",27, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T ::= T MOD F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // T ::= T DIV F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // T ::= T MULT F 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("T",28, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // F ::= LITERALS 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("F",29, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // DECLARE_FOR ::= TYPES ID ASSIGN E 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",24, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARE_S ::= TYPES DECLARE_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_S",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARE_S ::= TYPES DECLARE_A 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_S",21, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // DECLARE_A ::= ID ASSIGN E DECLARE_END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_A",22, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-3)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // DECLARE_B ::= ID DECLARE_END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_B",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // DECLARE_B ::= ID COMMA DECLARE_B 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_B",23, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-2)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // DECLARE_END ::= END 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("DECLARE_END",17, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERALS ::= ID 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= STRING 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= CHAR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= FLOAT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= DIGIT 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= BOOL 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("LITERALS",26, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // TYPES ::= 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              Object RESULT =null;

              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("TYPES",25, ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          return CUP$Analizador$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)).value;
		RESULT = start_val;
              CUP$Analizador$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Analizador$stack.elementAt(CUP$Analizador$top-1)), ((java_cup.runtime.Symbol)CUP$Analizador$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Analizador$parser.done_parsing();
          return CUP$Analizador$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

