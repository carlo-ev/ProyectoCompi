package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

parser code {:
    
    public TreeNode AST = new TreeNode();
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++; 
            outputArea.append("("+errors+")> " + message + info + "\n");
        }else {
            StringBuffer m = new StringBuffer("Error ");
            if (info instanceof java_cup.runtime.Symbol) 
               m.append( "("+info.toString()+")" );     
            m.append(" : "+message);   
            //System.err.println(m);
            outputArea.append("> "+m+"\n");
        }
    }
   
    @Override
    public void report_fatal_error(String message, Object info) {
      report_error(message, info);
      throw new RuntimeException("Fatal Syntax Error");
    }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }

:}


//----------- TERMINALES

    terminal Boolean BOOL;
    terminal Integer DIGIT;
    terminal Float FLOAT;
    terminal Character CHAR;
    terminal String STRING;
    terminal String ID;

    terminal NUM, BIN, DEC, SYM, STR;
    terminal END, ASSIGN;
    terminal REP, REPEND;
    terminal COND, CONDEND, YET, YETEND;
    terminal SET, SETEND, OPT, OPTEND, ANY, ANYEND;
    terminal TIL, TILEND;
    terminal MAIN, MAINEND, ACT, ACTEND, RET, NIL;
    terminal PLUS, MINUS, MULT, DIV;
    terminal AND, OR, LESSTHAN, GREATERTHAN, GREATEREQUALTHAN, LESSEQUALTHAN, EQUAL, NOTEQUAL;
    terminal PARIZQ, PARDER, COMMA;

//----------- NO TEMRINALES

    non terminal TreeNode BooleanTypes;
    non terminal TreeNode SWITCH_LITERALS, DEFAULT, CASE, _SWITCH;
    non terminal TreeNode _IF, _ELSE;
    non terminal TreeNode LISTA_IDS, DECLARE_VARIABLE;
    non terminal TreeNode PROGRAM, PROGRAM_BODY;
    non terminal TreeNode _WHILE;
    non terminal TreeNode LITERALS, E, T, F;
    non terminal TreeNode LogicalA, LogicalB;
    non terminal String LogicalOperators, Concat, TYPES, FUNCTION_TYPES;
    non terminal TreeNode ELogical, TLogical, FLogical;
    non terminal TreeNode STATEMENT, STATEMENTS;
    non terminal TreeNode _FOR, FOR_ASSIGN;
    non terminal TreeNode PARAMS, CALL_FUNCTION, PARAM, RETURN, ARGUMENT, ARGUMENTS, DECLARE_FUNCTION;

//-----------Presedencia
precedence left AND, OR;

start with PROGRAM;

    TYPES ::= NUM:num                                                           {: RESULT = "num"; :}
        | DEC:dec                                                               {: RESULT = "dec"; :}
        | BIN:bin                                                               {: RESULT = "bin"; :}
        | SYM:sym                                                               {: RESULT = "sym"; :}
        | STR:str                                                               {: RESULT = "str"; :}
        ;

    LITERALS ::= BOOL:bl                                                        {: RESULT = new TreeNode( Boolean.toString(bl), "bin" ); :} 
        | DIGIT:dt                                                              {: RESULT = new TreeNode( Integer.toString(dt), "num" ); :}
        | FLOAT:ft                                                              {: RESULT = new TreeNode( Float.toString(ft), "dec" ); :}
        | CHAR:chr                                                              {: RESULT = new TreeNode("'" + Character.toString(chr) + "'", "sym" ); :}
        | STRING:str                                                            {: RESULT = new TreeNode('"' + str + '"', "str"); :}
        | ID:id                                                                 {: RESULT = new TreeNode(id); :}
        | ID:id PARIZQ PARAMS:p PARDER                                          {: RESULT = new TreeNode(id, p); :}
        | ID:id PARIZQ error:err PARDER                                         {:
                                                                                    RESULT = new TreeNode(id, new TreeNode(""));
                                                                                    parser.report_error("Error defining function params", err); 
                                                                                :}
        ;

    Concat ::= AND:and                                                          {: RESULT = "and"; :} 
        | OR:or                                                                 {: RESULT = "or"; :}
        ;

    LogicalOperators ::= LESSTHAN:lt                                            {: RESULT = "<"; :}
        | GREATERTHAN:gt                                                        {: RESULT = ">"; :} 
        | LESSEQUALTHAN:let                                                     {: RESULT = "<="; :}
        | GREATEREQUALTHAN:get                                                  {: RESULT = ">="; :}
        | EQUAL:e                                                               {: RESULT = "=="; :}
        | NOTEQUAL:ne                                                           {: RESULT = "!="; :}
        ;


//----------- ARIT OPERATION
    F ::= LITERALS:li                                                           {: RESULT = li; :}
        | PARIZQ E:e PARDER                                                     {: RESULT = e; :};
    T ::= T:t MULT:m F:f                                                        {: RESULT = new TreeNode("*",t,f); :}
        | T:t DIV:d F:f                                                         {: RESULT = new TreeNode("/",t,f); :}
        | F:f                                                                   {: RESULT = f; :}
        ;
    E ::= E:e PLUS:p T:t                                                        {: RESULT = new TreeNode("+",e,t); :}
        | E:e MINUS:m T:t                                                       {: RESULT = new TreeNode("-",e,t); :}
        | T:t                                                                   {: RESULT = t; :}
        ;

//----------- ARIT OPERATION END


//----------- Logical Operations

    LogicalB ::= ELogical:el LogicalOperators:op LogicalB:lb                    {: RESULT = new TreeNode(op ,el, lb); :}
        | ELogical:el                                                           {: RESULT = el; :}
        ;
    LogicalA ::= LogicalA:al Concat:concat LogicalB:lb                          {: RESULT = new TreeNode(concat, al, lb); :} 
        | LogicalB:lb                                                           {: RESULT = lb; :}
        ;

//----------- Logical Operations END


//----------- Arithmetic Operations for Logical Statements

    BooleanTypes ::= BOOL:bl                                                    {: RESULT = new TreeNode( Boolean.toString(bl), "bin" ); :}
        | DIGIT:di                                                              {: RESULT = new TreeNode( Integer.toString(di), "num" ); :}
        | FLOAT:fl                                                              {: RESULT = new TreeNode( Float.toString(fl), "dec" ); :}
        | CHAR:ch                                                               {: RESULT = new TreeNode("'" + Character.toString(ch)  + "'", "sym"); :}
        | ID:id                                                                 {: RESULT = new TreeNode(id); :}
        ;
    FLogical ::= BooleanTypes:lit                                               {: RESULT = lit; :}
        | PARIZQ LogicalA:la PARDER                                             {: RESULT = la; :}
        ;
    TLogical ::= TLogical:tl MULT:m FLogical:fl                                 {: RESULT = new TreeNode("*", tl, fl); :}
        | TLogical:tl DIV:d FLogical:fl                                         {: RESULT = new TreeNode("/", tl, fl); :}
        | FLogical:fl                                                           {: RESULT = fl; :}
        ;
    ELogical ::= ELogical:el PLUS:p TLogical:tl                                 {: RESULT = new TreeNode("+", el, tl); :} 
        | ELogical:fl MINUS:m TLogical:tl                                       {: RESULT = new TreeNode("-", fl, tl); :}
        | TLogical:tl                                                           {: RESULT = tl; :}
        ;

//----------- Arithmetic Operations for Logical Statements END


//----------- Statement ID or Function Disambiguation

    CALL_FUNCTION ::= ID:id PARIZQ PARAMS:p PARDER END                          {: RESULT = new TreeNode("Call Function", new TreeNode(id, p)); :}
        | ID:id ASSIGN:a E:e END                                                {: RESULT = new TreeNode("=", new TreeNode(id), e); :}
        | ID:id PARIZQ PARAMS:p PARDER                                          {: parser.report_error("Missing ';' to end statement", ""); :}
        | ID:id ASSIGN:a E:e                                                    {: parser.report_error("Missing ';' to end statement", ""); :} 
        | ID ASSIGN END                                                         {: parser.report_error("Misssing assigning statement", ""); :}
        | ID ASSIGN error:err END                                               {: parser.report_error("Error assigning statement", ""); :}
        | ID PARIZQ error:err PARDER END                                        {: parser.report_error("Error in Function parameter statement", err); :}
        | ID PARIZQ error:err                                                   {: parser.report_error("Error in Function parameter statement", err); :}
        | ID error:err END                                                      {: parser.report_error("Error in ID operation statement", err); :}
        | ID error:err                                                          {: parser.report_error("Undefined ID operation", err); :}
        ;

//----------- Statement ID or Function End


//----------- FUNCTION PARAM LIST

    PARAM ::= PARAMS:p COMMA:c BooleanTypes:bt                                  {: ((TreeNode)p).addChild(bt); RESULT = p; :} 
        | BooleanTypes:bt                                                       {: RESULT = new TreeNode("Params", bt); :};
    PARAMS ::= PARAM:p                                                          {: RESULT = p; :}
        |                                                                       {: RESULT = new TreeNode(""); :};

//----------- FUNCTION PARAM LIST END


//----------- FUNCTION DECLARATION

    RETURN ::= RET:ret LITERALS:lit END                                         {: RESULT = new TreeNode("ret", lit); :}
        |                                                                       {: RESULT = new TreeNode(""); :}
        ;
    ARGUMENT ::= ARGUMENT:arg COMMA TYPES:t ID:id                               {: ((TreeNode)arg).addChild( new TreeNode(id, t.toString()) ); RESULT = arg; :}
        | TYPES:t ID:id                                                         {: RESULT = new TreeNode("Arguments", new TreeNode(id, t.toString()) ); :}
        ;
    ARGUMENTS ::= ARGUMENT:args                                                 {: RESULT = args; :}
        |                                                                       {: RESULT = new TreeNode(""); :}
        ;
    FUNCTION_TYPES ::= TYPES:t                                                  {: RESULT = t; :} 
        | NIL:nil                                                               {: RESULT = "nil"; :}
        ;
    DECLARE_FUNCTION ::= FUNCTION_TYPES:t ACT:act ID:id PARIZQ ARGUMENTS:args PARDER PROGRAM_BODY:body RETURN:r ACTEND 
                                                                                {: RESULT = new TreeNode("act", t, new TreeNode(id, "act"), args, body, r); :}
        | ACT ID PARIZQ ARGUMENTS PARDER PROGRAM_BODY RETURN ACTEND             {: parser.report_error("Error ACT without return type", ""); :}
        | FUNCTION_TYPES ACT ID PARIZQ error:err PARDER PROGRAM_BODY RETURN ACTEND
                                                                                {: parser.report_error("Error in ACT argument declaration", err); :}
        | ACT error:err                                                         {: parser.report_error("Error in ACT declaration", ""); :}
        | FUNCTION_TYPES ACT error                                              {: parser.report_error("Error in ACT declaration", ""); :}
        ;

//----------- FUNCTION DECLARATION END


//----------- _WHILE

    _WHILE ::= TIL:til PARIZQ LogicalA:la PARDER PROGRAM_BODY:body TILEND       {: RESULT = new TreeNode("til", la, body); :}
        | TIL PARIZQ PARDER PROGRAM_BODY TILEND                                 {: parser.report_error("Error empty boolean condition on TIL", ""); :}
        | TIL PARIZQ error:err PARDER PROGRAM_BODY TILEND                       {: parser.report_error("Error in TIL boolean statement", err); :}
        | TIL error:err                                                         {: parser.report_error("Error in TIL declaration", ""); :}
        ;

//----------- _WHILE END


//----------- _SWITCH 

    SWITCH_LITERALS ::= CHAR:ch                                                 {: RESULT = new TreeNode("'" + Character.toString(ch) + "'"); :}
        | DIGIT:dt                                                              {: RESULT = new TreeNode(Integer.toString(dt) ); :}
        | ID:id                                                                 {: RESULT = new TreeNode(id); :}
        ;
    DEFAULT ::= ANY:any PROGRAM_BODY:body ANYEND                                {: RESULT = new TreeNode("any", body); :}
        | ANY error:err                                                         {: parser.report_error("Error in ANY declaration", ""); :}
        |                                                                       {: RESULT = new TreeNode(""); :}
        ;
    CASE ::= CASE:c OPT:opt PARIZQ SWITCH_LITERALS:sl PARDER PROGRAM_BODY:b OPTEND  
                                                                                {: ((TreeNode)c).addChild( new TreeNode("opt", sl, b) ); RESULT = c; :}
        | CASE OPT PARIZQ PARDER PROGRAM_BODY OPTEND                            {: parser.report_error("Error in CASE empty defining parameter", ""); :}
        | CASE OPT PARIZQ error:err PARDER PROGRAM_BODY OPTEND                  {: parser.report_error("Error in CASE defining parameter", err); :}
        | CASE OPT error:err                                              {: parser.report_error("Error in CASE declaration", err); :}
        | error:err                                                             {: parser.report_error("Error in CASE declaration", err); :}
        |                                                                       {: RESULT = new TreeNode("CASES"); :}
        ;
    _SWITCH ::= SET:set PARIZQ SWITCH_LITERALS:sl PARDER CASE:c DEFAULT:d SETEND 
                                                                                {: RESULT = new TreeNode("set", sl, c, d); :}
        | SET PARIZQ PARDER CASE DEFAULT SETEND                                 {: parser.report_error("Error Empty Defininf parameter SET", ""); :}
        | SET PARIZQ error:err PARDER CASE DEFAULT SETEND                       {: parser.report_error("Error in SET defining parameter", err); :}
        | SET    error:err                                                      {: parser.report_error("Error in SET declaration", ""); :}
        ;

//----------- _SWITCH END


//----------- _FOR

    FOR_ASSIGN ::= ID:id ASSIGN:a E:e                                           {: RESULT = new TreeNode("=", new TreeNode(id), e); :}
        |                                                                       {: RESULT = new TreeNode(""); :}                             
        ;
    _FOR ::= REP:rep PARIZQ FOR_ASSIGN:fa END LogicalA:la END FOR_ASSIGN:fa2 PARDER PROGRAM_BODY:body REPEND 
                                                                                {: RESULT = new TreeNode("rep", fa, la, fa2, body); :}
        | REP PARIZQ PARDER PROGRAM_BODY REPEND                                 {: parser.report_error("Error Empty Definition statements on REP", ""); :}
        | REP PARIZQ error:err PARDER PROGRAM_BODY REPEND                       {: parser.report_error("Error in REP Definition Statements", err); :}
        | REP  error:err                                                        {: parser.report_error("Error in REP declaration", ""); :}
        ; 

//----------- _FOR END


//----------- _IF _ELSE

    _ELSE ::= YET:yet PROGRAM_BODY:body YETEND                                  {: RESULT = new TreeNode("yet", body); :}
        | YET error:err                                                   {: parser.report_error("Error in YET body", ""); :}
        |                                                                       {: RESULT = new TreeNode(""); :}
        ;
    _IF ::= COND:cond PARIZQ LogicalA:la PARDER PROGRAM_BODY:body CONDEND _ELSE:_else
                                                                                {: RESULT = new TreeNode("con", la, body, _else); :}
        | COND PARIZQ PARDER PROGRAM_BODY CONDEND _ELSE                         {: parser.report_error("Error Empty Boolean statement on CON", ""); :}                                                                   
        | COND PARIZQ error:err PARDER PROGRAM_BODY CONDEND _ELSE               {: parser.report_error("Error in CON boolean statement", err); :}
        | COND error:err                                                        {: parser.report_error("Error in CON declaration", ""); :}
        ;

//----------- _IF _ELSE END


//----------- DECLARACIONES

    LISTA_IDS ::= LISTA_IDS:li COMMA ID:id                                      {: ((TreeNode)li).addChild(new TreeNode(id)); RESULT = li; :}
        |   TYPES:type ID:id                                                    {: RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode(id) ); :}
        ;
    DECLARE_VARIABLE ::= TYPES:type ID:id ASSIGN:a E:e END                      {: RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode("=", new TreeNode(id) , e) ); :}
        | LISTA_IDS:li END                                                      {: RESULT = li; :}
        | TYPES error:err                                                       {: parser.report_error("Error in ID declaration", ""); :}
        ;

//----------- DECLARACIONES END


//----------- PROGRAM BEGINNING

    STATEMENT ::= DECLARE_VARIABLE:declare                                      {: RESULT = declare; :}
        | _IF:_if                                                               {: RESULT = _if; :}
        | _FOR:_for                                                             {: RESULT = _for; :}
        | _WHILE:_while                                                         {: RESULT = _while; :}
        | _SWITCH:_switch                                                       {: RESULT = _switch; :}
        | DECLARE_FUNCTION:function                                             {: RESULT = function; :}
        | CALL_FUNCTION:callfunction                                            {: RESULT = callfunction; :}
        ;

    STATEMENTS ::= STATEMENTS:statements STATEMENT:statement                    {:if( statements != null )
                                                                                { ((TreeNode)statements).addChild(statement); RESULT = statements; } :}
        | STATEMENT:statement                                                   {: RESULT = new TreeNode("Statements", statement); :}
      ; 

    PROGRAM_BODY ::= STATEMENTS:statements                                      {: RESULT = statements; :}
        |                                                                       {: RESULT = new TreeNode(""); :}
        ;

    PROGRAM ::= MAIN:main PROGRAM_BODY:body MAINEND                             {: RESULT = new TreeNode("Run", body); parser.AST = RESULT; :}
        | error PROGRAM_BODY MAINEND                                            {: parser.report_error("RUN END without RUN", ""); :}
        | MAIN error                                                            {: parser.report_error("Error Reaching RUN END", ""); :}
        ;