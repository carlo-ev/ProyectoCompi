
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon Jun 29 00:21:41 CST 2015
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon Jun 29 00:21:41 CST 2015
  */
public class TieParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TieParser() {super();}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\176\000\002\002\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\006\000\002\016\006\000\002\025\003\000\002\025" +
    "\003\000\002\024\003\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\021\003\000\002\021\005\000\002\020\005\000\002" +
    "\020\005\000\002\020\003\000\002\017\005\000\002\017" +
    "\005\000\002\017\003\000\002\023\005\000\002\023\003" +
    "\000\002\022\005\000\002\022\003\000\002\002\003\000" +
    "\002\002\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\032\003\000\002\032\005\000\002\031" +
    "\005\000\002\031\005\000\002\031\003\000\002\030\005" +
    "\000\002\030\005\000\002\030\003\000\002\040\007\000" +
    "\002\040\006\000\002\040\006\000\002\040\005\000\002" +
    "\040\005\000\002\040\006\000\002\040\007\000\002\040" +
    "\005\000\002\040\005\000\002\040\004\000\002\041\005" +
    "\000\002\041\003\000\002\037\003\000\002\037\002\000" +
    "\002\042\005\000\002\042\002\000\002\043\006\000\002" +
    "\043\004\000\002\044\003\000\002\044\002\000\002\027" +
    "\003\000\002\027\003\000\002\045\013\000\002\045\012" +
    "\000\002\045\013\000\002\045\004\000\002\045\005\000" +
    "\002\015\010\000\002\015\007\000\002\015\010\000\002" +
    "\015\004\000\002\003\003\000\002\003\003\000\002\003" +
    "\003\000\002\004\005\000\002\004\004\000\002\004\002" +
    "\000\002\005\011\000\002\005\010\000\002\005\011\000" +
    "\002\005\005\000\002\005\003\000\002\005\002\000\002" +
    "\006\011\000\002\006\010\000\002\006\011\000\002\006" +
    "\004\000\002\036\005\000\002\036\002\000\002\035\014" +
    "\000\002\035\007\000\002\035\010\000\002\035\004\000" +
    "\002\010\005\000\002\010\004\000\002\010\002\000\002" +
    "\007\011\000\002\007\010\000\002\007\011\000\002\007" +
    "\004\000\002\011\005\000\002\011\004\000\002\012\007" +
    "\000\002\012\004\000\002\012\004\000\002\033\003\000" +
    "\002\033\003\000\002\033\003\000\002\033\003\000\002" +
    "\033\003\000\002\033\003\000\002\033\003\000\002\034" +
    "\004\000\002\034\003\000\002\014\003\000\002\014\002" +
    "\000\002\013\005\000\002\013\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\006\003\004\037\005\001\002\000\034\011" +
    "\015\012\017\013\024\014\023\015\021\016\030\021\012" +
    "\023\033\027\022\035\025\040\uff87\041\041\044\014\001" +
    "\002\000\036\003\027\011\015\012\017\013\024\014\023" +
    "\015\021\016\030\021\012\023\033\027\022\035\025\040" +
    "\uff87\041\041\044\014\001\002\000\004\002\007\001\002" +
    "\000\004\002\001\001\002\000\054\011\uff8f\012\uff8f\013" +
    "\uff8f\014\uff8f\015\uff8f\016\uff8f\021\uff8f\022\uff8f\023\uff8f" +
    "\024\uff8f\026\uff8f\027\uff8f\032\uff8f\034\uff8f\035\uff8f\036" +
    "\uff8f\040\uff8f\041\uff8f\042\uff8f\043\uff8f\044\uff8f\001\002" +
    "\000\010\003\357\011\356\041\uffbe\001\002\000\006\003" +
    "\332\061\333\001\002\000\054\011\uff8b\012\uff8b\013\uff8b" +
    "\014\uff8b\015\uff8b\016\uff8b\021\uff8b\022\uff8b\023\uff8b\024" +
    "\uff8b\026\uff8b\027\uff8b\032\uff8b\034\uff8b\035\uff8b\036\uff8b" +
    "\040\uff8b\041\uff8b\042\uff8b\043\uff8b\044\uff8b\001\002\000" +
    "\004\041\uffbd\001\002\000\010\003\275\020\277\061\276" +
    "\001\002\000\054\011\015\012\017\013\024\014\023\015" +
    "\021\016\030\021\012\022\uff88\023\033\024\uff88\026\uff88" +
    "\027\022\032\uff88\034\uff88\035\025\036\uff88\040\uff88\041" +
    "\041\042\uff88\043\uff88\044\014\001\002\000\010\003\000" +
    "\011\000\041\000\001\002\000\004\041\256\001\002\000" +
    "\010\003\ufffd\011\ufffd\041\ufffd\001\002\000\006\003\210" +
    "\061\211\001\002\000\010\003\uffff\011\uffff\041\uffff\001" +
    "\002\000\010\003\ufffe\011\ufffe\041\ufffe\001\002\000\006" +
    "\003\173\061\174\001\002\000\054\011\uff8d\012\uff8d\013" +
    "\uff8d\014\uff8d\015\uff8d\016\uff8d\021\uff8d\022\uff8d\023\uff8d" +
    "\024\uff8d\026\uff8d\027\uff8d\032\uff8d\034\uff8d\035\uff8d\036" +
    "\uff8d\040\uff8d\041\uff8d\042\uff8d\043\uff8d\044\uff8d\001\002" +
    "\000\004\002\uff84\001\002\000\010\003\ufffc\011\ufffc\041" +
    "\ufffc\001\002\000\054\011\uff8e\012\uff8e\013\uff8e\014\uff8e" +
    "\015\uff8e\016\uff8e\021\uff8e\022\uff8e\023\uff8e\024\uff8e\026" +
    "\uff8e\027\uff8e\032\uff8e\034\uff8e\035\uff8e\036\uff8e\040\uff8e" +
    "\041\uff8e\042\uff8e\043\uff8e\044\uff8e\001\002\000\004\040" +
    "\172\001\002\000\006\003\112\061\113\001\002\000\054" +
    "\011\uff89\012\uff89\013\uff89\014\uff89\015\uff89\016\uff89\021" +
    "\uff89\022\uff89\023\uff89\024\uff89\026\uff89\027\uff89\032\uff89" +
    "\034\uff89\035\uff89\036\uff89\040\uff89\041\uff89\042\uff89\043" +
    "\uff89\044\uff89\001\002\000\054\011\uff8c\012\uff8c\013\uff8c" +
    "\014\uff8c\015\uff8c\016\uff8c\021\uff8c\022\uff8c\023\uff8c\024" +
    "\uff8c\026\uff8c\027\uff8c\032\uff8c\034\uff8c\035\uff8c\036\uff8c" +
    "\040\uff8c\041\uff8c\042\uff8c\043\uff8c\044\uff8c\001\002\000" +
    "\054\011\uff91\012\uff91\013\uff91\014\uff91\015\uff91\016\uff91" +
    "\021\uff91\022\uff91\023\uff91\024\uff91\026\uff91\027\uff91\032" +
    "\uff91\034\uff91\035\uff91\036\uff91\040\uff91\041\uff91\042\uff91" +
    "\043\uff91\044\uff91\001\002\000\006\017\110\063\107\001" +
    "\002\000\054\011\uff90\012\uff90\013\uff90\014\uff90\015\uff90" +
    "\016\uff90\021\uff90\022\uff90\023\uff90\024\uff90\026\uff90\027" +
    "\uff90\032\uff90\034\uff90\035\uff90\036\uff90\040\uff90\041\uff90" +
    "\042\uff90\043\uff90\044\uff90\001\002\000\006\003\043\011" +
    "\042\001\002\000\004\061\044\001\002\000\054\011\uffb9" +
    "\012\uffb9\013\uffb9\014\uffb9\015\uffb9\016\uffb9\021\uffb9\022" +
    "\uffb9\023\uffb9\024\uffb9\026\uffb9\027\uffb9\032\uffb9\034\uffb9" +
    "\035\uffb9\036\uffb9\040\uffb9\041\uffb9\042\uffb9\043\uffb9\044" +
    "\uffb9\001\002\000\016\012\017\013\024\014\023\015\021" +
    "\016\030\062\uffbf\001\002\000\006\062\uffc0\063\104\001" +
    "\002\000\004\062\051\001\002\000\004\011\050\001\002" +
    "\000\006\062\uffc1\063\uffc1\001\002\000\036\011\015\012" +
    "\017\013\024\014\023\015\021\016\030\021\012\023\033" +
    "\027\022\035\025\041\041\042\uff87\043\uff87\044\014\001" +
    "\002\000\006\042\uffc3\043\053\001\002\000\016\004\061" +
    "\005\064\006\063\007\062\010\057\011\056\001\002\000" +
    "\004\042\055\001\002\000\054\011\uffbb\012\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024" +
    "\uffbb\026\uffbb\027\uffbb\032\uffbb\034\uffbb\035\uffbb\036\uffbb" +
    "\040\uffbb\041\uffbb\042\uffbb\043\uffbb\044\uffbb\001\002\000" +
    "\072\011\ufff6\012\ufff6\013\ufff6\014\ufff6\015\ufff6\016\ufff6" +
    "\017\ufff6\021\ufff6\022\ufff6\023\ufff6\024\ufff6\026\ufff6\027" +
    "\ufff6\032\ufff6\034\ufff6\035\ufff6\036\ufff6\040\ufff6\041\ufff6" +
    "\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050" +
    "\ufff6\061\066\062\ufff6\001\002\000\070\011\ufff7\012\ufff7" +
    "\013\ufff7\014\ufff7\015\ufff7\016\ufff7\017\ufff7\021\ufff7\022" +
    "\ufff7\023\ufff7\024\ufff7\026\ufff7\027\ufff7\032\ufff7\034\ufff7" +
    "\035\ufff7\036\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7\062\ufff7\001\002" +
    "\000\004\017\065\001\002\000\070\011\ufffb\012\ufffb\013" +
    "\ufffb\014\ufffb\015\ufffb\016\ufffb\017\ufffb\021\ufffb\022\ufffb" +
    "\023\ufffb\024\ufffb\026\ufffb\027\ufffb\032\ufffb\034\ufffb\035" +
    "\ufffb\036\ufffb\040\ufffb\041\ufffb\042\ufffb\043\ufffb\044\ufffb" +
    "\045\ufffb\046\ufffb\047\ufffb\050\ufffb\062\ufffb\001\002\000" +
    "\070\011\ufff8\012\ufff8\013\ufff8\014\ufff8\015\ufff8\016\ufff8" +
    "\017\ufff8\021\ufff8\022\ufff8\023\ufff8\024\ufff8\026\ufff8\027" +
    "\ufff8\032\ufff8\034\ufff8\035\ufff8\036\ufff8\040\ufff8\041\ufff8" +
    "\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\047\ufff8\050" +
    "\ufff8\062\ufff8\001\002\000\070\011\ufff9\012\ufff9\013\ufff9" +
    "\014\ufff9\015\ufff9\016\ufff9\017\ufff9\021\ufff9\022\ufff9\023" +
    "\ufff9\024\ufff9\026\ufff9\027\ufff9\032\ufff9\034\ufff9\035\ufff9" +
    "\036\ufff9\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045" +
    "\ufff9\046\ufff9\047\ufff9\050\ufff9\062\ufff9\001\002\000\070" +
    "\011\ufffa\012\ufffa\013\ufffa\014\ufffa\015\ufffa\016\ufffa\017" +
    "\ufffa\021\ufffa\022\ufffa\023\ufffa\024\ufffa\026\ufffa\027\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\036\ufffa\040\ufffa\041\ufffa\042" +
    "\ufffa\043\ufffa\044\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\062\ufffa\001\002\000\004\042\uffc4\001\002\000\022\003" +
    "\074\004\067\005\072\006\077\007\076\011\073\062\uffc5" +
    "\063\uffc5\001\002\000\040\017\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\051\uffdf\052\uffdf\053\uffdf\054\uffdf\055\uffdf" +
    "\056\uffdf\057\uffdf\060\uffdf\062\uffdf\063\uffdf\001\002\000" +
    "\006\062\uffc7\063\uffc7\001\002\000\006\062\102\063\101" +
    "\001\002\000\040\017\uffde\045\uffde\046\uffde\047\uffde\050" +
    "\uffde\051\uffde\052\uffde\053\uffde\054\uffde\055\uffde\056\uffde" +
    "\057\uffde\060\uffde\062\uffde\063\uffde\001\002\000\040\017" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\062" +
    "\uffdb\063\uffdb\001\002\000\004\062\100\001\002\000\006" +
    "\062\uffc6\063\uffc6\001\002\000\040\017\uffdc\045\uffdc\046" +
    "\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054\uffdc" +
    "\055\uffdc\056\uffdc\057\uffdc\060\uffdc\062\uffdc\063\uffdc\001" +
    "\002\000\040\017\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\062\uffdd\063\uffdd\001\002\000\070\011\ufff4" +
    "\012\ufff4\013\ufff4\014\ufff4\015\ufff4\016\ufff4\017\ufff4\021" +
    "\ufff4\022\ufff4\023\ufff4\024\ufff4\026\ufff4\027\ufff4\032\ufff4" +
    "\034\ufff4\035\ufff4\036\ufff4\040\ufff4\041\ufff4\042\ufff4\043" +
    "\ufff4\044\ufff4\045\ufff4\046\ufff4\047\ufff4\050\ufff4\062\ufff4" +
    "\001\002\000\014\004\067\005\072\006\077\007\076\011" +
    "\073\001\002\000\070\011\ufff5\012\ufff5\013\ufff5\014\ufff5" +
    "\015\ufff5\016\ufff5\017\ufff5\021\ufff5\022\ufff5\023\ufff5\024" +
    "\ufff5\026\ufff5\027\ufff5\032\ufff5\034\ufff5\035\ufff5\036\ufff5" +
    "\040\ufff5\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046" +
    "\ufff5\047\ufff5\050\ufff5\062\ufff5\001\002\000\006\062\uffc8" +
    "\063\uffc8\001\002\000\014\012\017\013\024\014\023\015" +
    "\021\016\030\001\002\000\004\011\106\001\002\000\006" +
    "\062\uffc2\063\uffc2\001\002\000\004\011\111\001\002\000" +
    "\054\011\uff93\012\uff93\013\uff93\014\uff93\015\uff93\016\uff93" +
    "\021\uff93\022\uff93\023\uff93\024\uff93\026\uff93\027\uff93\032" +
    "\uff93\034\uff93\035\uff93\036\uff93\040\uff93\041\uff93\042\uff93" +
    "\043\uff93\044\uff93\001\002\000\006\017\uff96\063\uff96\001" +
    "\002\000\054\011\uff97\012\uff97\013\uff97\014\uff97\015\uff97" +
    "\016\uff97\021\uff97\022\uff97\023\uff97\024\uff97\026\uff97\027" +
    "\uff97\032\uff97\034\uff97\035\uff97\036\uff97\040\uff97\041\uff97" +
    "\042\uff97\043\uff97\044\uff97\001\002\000\022\003\121\004" +
    "\067\005\072\006\077\007\076\011\073\061\120\062\123" +
    "\001\002\000\036\017\uffd3\045\uffd3\046\uffd3\047\165\050" +
    "\166\051\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\062\uffd3\001\002\000\036\017\uffda\045" +
    "\uffda\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda" +
    "\054\uffda\055\uffda\056\uffda\057\uffda\060\uffda\062\uffda\001" +
    "\002\000\036\017\uffd6\045\uffd6\046\uffd6\047\uffd6\050\uffd6" +
    "\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6\056\uffd6\057" +
    "\uffd6\060\uffd6\062\uffd6\001\002\000\032\017\uffe2\045\156" +
    "\046\152\051\uffe2\052\uffe2\053\162\054\160\055\154\056" +
    "\157\057\155\060\153\062\uffe2\001\002\000\016\004\067" +
    "\005\072\006\077\007\076\011\073\061\120\001\002\000" +
    "\004\062\144\001\002\000\012\017\uffe0\051\uffe0\052\uffe0" +
    "\062\uffe0\001\002\000\034\011\015\012\017\013\024\014" +
    "\023\015\021\016\030\021\012\023\033\024\uff87\027\022" +
    "\035\025\041\041\044\014\001\002\000\010\051\125\052" +
    "\130\062\126\001\002\000\016\004\ufff3\005\ufff3\006\ufff3" +
    "\007\ufff3\011\ufff3\061\ufff3\001\002\000\034\011\015\012" +
    "\017\013\024\014\023\015\021\016\030\021\012\023\033" +
    "\024\uff87\027\022\035\025\041\041\044\014\001\002\000" +
    "\016\004\067\005\072\006\077\007\076\011\073\061\120" +
    "\001\002\000\016\004\ufff2\005\ufff2\006\ufff2\007\ufff2\011" +
    "\ufff2\061\ufff2\001\002\000\012\017\uffe1\051\uffe1\052\uffe1" +
    "\062\uffe1\001\002\000\004\024\133\001\002\000\056\011" +
    "\uff9b\012\uff9b\013\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b" +
    "\022\uff9b\023\uff9b\024\uff9b\025\135\026\uff9b\027\uff9b\032" +
    "\uff9b\034\uff9b\035\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b" +
    "\043\uff9b\044\uff9b\001\002\000\054\011\uff9a\012\uff9a\013" +
    "\uff9a\014\uff9a\015\uff9a\016\uff9a\021\uff9a\022\uff9a\023\uff9a" +
    "\024\uff9a\026\uff9a\027\uff9a\032\uff9a\034\uff9a\035\uff9a\036" +
    "\uff9a\040\uff9a\041\uff9a\042\uff9a\043\uff9a\044\uff9a\001\002" +
    "\000\036\003\136\011\015\012\017\013\024\014\023\015" +
    "\021\016\030\021\012\023\033\026\uff87\027\022\035\025" +
    "\041\041\044\014\001\002\000\054\011\uff9c\012\uff9c\013" +
    "\uff9c\014\uff9c\015\uff9c\016\uff9c\021\uff9c\022\uff9c\023\uff9c" +
    "\024\uff9c\026\uff9c\027\uff9c\032\uff9c\034\uff9c\035\uff9c\036" +
    "\uff9c\040\uff9c\041\uff9c\042\uff9c\043\uff9c\044\uff9c\001\002" +
    "\000\004\026\140\001\002\000\054\011\uff9d\012\uff9d\013" +
    "\uff9d\014\uff9d\015\uff9d\016\uff9d\021\uff9d\022\uff9d\023\uff9d" +
    "\024\uff9d\026\uff9d\027\uff9d\032\uff9d\034\uff9d\035\uff9d\036" +
    "\uff9d\040\uff9d\041\uff9d\042\uff9d\043\uff9d\044\uff9d\001\002" +
    "\000\004\024\142\001\002\000\056\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\135\026\uff9b\027\uff9b\032\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\001\002\000\054\011\uff99\012\uff99\013\uff99\014\uff99\015" +
    "\uff99\016\uff99\021\uff99\022\uff99\023\uff99\024\uff99\026\uff99" +
    "\027\uff99\032\uff99\034\uff99\035\uff99\036\uff99\040\uff99\041" +
    "\uff99\042\uff99\043\uff99\044\uff99\001\002\000\034\011\015" +
    "\012\017\013\024\014\023\015\021\016\030\021\012\023" +
    "\033\024\uff87\027\022\035\025\041\041\044\014\001\002" +
    "\000\004\024\146\001\002\000\056\011\uff9b\012\uff9b\013" +
    "\uff9b\014\uff9b\015\uff9b\016\uff9b\021\uff9b\022\uff9b\023\uff9b" +
    "\024\uff9b\025\135\026\uff9b\027\uff9b\032\uff9b\034\uff9b\035" +
    "\uff9b\036\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b" +
    "\001\002\000\054\011\uff98\012\uff98\013\uff98\014\uff98\015" +
    "\uff98\016\uff98\021\uff98\022\uff98\023\uff98\024\uff98\026\uff98" +
    "\027\uff98\032\uff98\034\uff98\035\uff98\036\uff98\040\uff98\041" +
    "\uff98\042\uff98\043\uff98\044\uff98\001\002\000\010\051\125" +
    "\052\130\062\151\001\002\000\036\017\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\062\uffd9\001\002\000" +
    "\016\004\067\005\072\006\077\007\076\011\073\061\120" +
    "\001\002\000\016\004\uffec\005\uffec\006\uffec\007\uffec\011" +
    "\uffec\061\uffec\001\002\000\016\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\011\uffee\061\uffee\001\002\000\016\004\uffed\005" +
    "\uffed\006\uffed\007\uffed\011\uffed\061\uffed\001\002\000\016" +
    "\004\067\005\072\006\077\007\076\011\073\061\120\001" +
    "\002\000\016\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef" +
    "\061\uffef\001\002\000\016\004\ufff0\005\ufff0\006\ufff0\007" +
    "\ufff0\011\ufff0\061\ufff0\001\002\000\016\004\067\005\072" +
    "\006\077\007\076\011\073\061\120\001\002\000\016\004" +
    "\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\061\ufff1\001\002" +
    "\000\012\017\uffe3\051\uffe3\052\uffe3\062\uffe3\001\002\000" +
    "\036\017\uffd5\045\uffd5\046\uffd5\047\165\050\166\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\062\uffd5\001\002\000\016\004\067\005\072\006\077" +
    "\007\076\011\073\061\120\001\002\000\016\004\067\005" +
    "\072\006\077\007\076\011\073\061\120\001\002\000\036" +
    "\017\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7\051\uffd7\052" +
    "\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\062\uffd7\001\002\000\036\017\uffd8\045\uffd8\046\uffd8\047" +
    "\uffd8\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8" +
    "\056\uffd8\057\uffd8\060\uffd8\062\uffd8\001\002\000\036\017" +
    "\uffd4\045\uffd4\046\uffd4\047\165\050\166\051\uffd4\052\uffd4" +
    "\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060\uffd4\062" +
    "\uffd4\001\002\000\004\002\uff86\001\002\000\054\011\uffb4" +
    "\012\uffb4\013\uffb4\014\uffb4\015\uffb4\016\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\032\uffb4\034\uffb4" +
    "\035\uffb4\036\uffb4\040\uffb4\041\uffb4\042\uffb4\043\uffb4\044" +
    "\uffb4\001\002\000\022\003\175\004\067\005\072\006\077" +
    "\007\076\011\073\061\120\062\177\001\002\000\004\062" +
    "\205\001\002\000\010\051\125\052\130\062\202\001\002" +
    "\000\034\011\015\012\017\013\024\014\023\015\021\016" +
    "\030\021\012\023\033\027\022\035\025\036\uff87\041\041" +
    "\044\014\001\002\000\004\036\201\001\002\000\054\011" +
    "\uffb6\012\uffb6\013\uffb6\014\uffb6\015\uffb6\016\uffb6\021\uffb6" +
    "\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\032\uffb6\034" +
    "\uffb6\035\uffb6\036\uffb6\040\uffb6\041\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\001\002\000\034\011\015\012\017\013\024\014" +
    "\023\015\021\016\030\021\012\023\033\027\022\035\025" +
    "\036\uff87\041\041\044\014\001\002\000\004\036\204\001" +
    "\002\000\054\011\uffb7\012\uffb7\013\uffb7\014\uffb7\015\uffb7" +
    "\016\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\026\uffb7\027" +
    "\uffb7\032\uffb7\034\uffb7\035\uffb7\036\uffb7\040\uffb7\041\uffb7" +
    "\042\uffb7\043\uffb7\044\uffb7\001\002\000\034\011\015\012" +
    "\017\013\024\014\023\015\021\016\030\021\012\023\033" +
    "\027\022\035\025\036\uff87\041\041\044\014\001\002\000" +
    "\004\036\207\001\002\000\054\011\uffb5\012\uffb5\013\uffb5" +
    "\014\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024" +
    "\uffb5\026\uffb5\027\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\041\uffb5\042\uffb5\043\uffb5\044\uffb5\001\002\000" +
    "\054\011\uffa4\012\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4" +
    "\021\uffa4\022\uffa4\023\uffa4\024\uffa4\026\uffa4\027\uffa4\032" +
    "\uffa4\034\uffa4\035\uffa4\036\uffa4\040\uffa4\041\uffa4\042\uffa4" +
    "\043\uffa4\044\uffa4\001\002\000\014\003\214\005\217\007" +
    "\216\011\212\062\213\001\002\000\004\062\uffb1\001\002" +
    "\000\012\003\221\030\uffa8\031\uffa8\033\uffa8\001\002\000" +
    "\004\062\247\001\002\000\004\062\220\001\002\000\004" +
    "\062\uffb3\001\002\000\004\062\uffb2\001\002\000\012\003" +
    "\221\030\uffa8\031\uffa8\033\uffa8\001\002\000\010\030\uffa9" +
    "\031\uffa9\033\uffa9\001\002\000\010\030\uffae\031\224\033" +
    "\225\001\002\000\004\030\246\001\002\000\006\003\231" +
    "\061\232\001\002\000\036\003\226\011\015\012\017\013" +
    "\024\014\023\015\021\016\030\021\012\023\033\027\022" +
    "\034\uff87\035\025\041\041\044\014\001\002\000\004\030" +
    "\uffaf\001\002\000\004\034\230\001\002\000\004\030\uffb0" +
    "\001\002\000\010\030\uffaa\031\uffaa\033\uffaa\001\002\000" +
    "\014\003\234\005\217\007\216\011\212\062\233\001\002" +
    "\000\034\011\015\012\017\013\024\014\023\015\021\016" +
    "\030\021\012\023\033\027\022\032\uff87\035\025\041\041" +
    "\044\014\001\002\000\004\062\241\001\002\000\004\062" +
    "\236\001\002\000\034\011\015\012\017\013\024\014\023" +
    "\015\021\016\030\021\012\023\033\027\022\032\uff87\035" +
    "\025\041\041\044\014\001\002\000\004\032\240\001\002" +
    "\000\010\030\uffad\031\uffad\033\uffad\001\002\000\034\011" +
    "\015\012\017\013\024\014\023\015\021\016\030\021\012" +
    "\023\033\027\022\032\uff87\035\025\041\041\044\014\001" +
    "\002\000\004\032\243\001\002\000\010\030\uffab\031\uffab" +
    "\033\uffab\001\002\000\004\032\245\001\002\000\010\030" +
    "\uffac\031\uffac\033\uffac\001\002\000\054\011\uffa7\012\uffa7" +
    "\013\uffa7\014\uffa7\015\uffa7\016\uffa7\021\uffa7\022\uffa7\023" +
    "\uffa7\024\uffa7\026\uffa7\027\uffa7\032\uffa7\034\uffa7\035\uffa7" +
    "\036\uffa7\040\uffa7\041\uffa7\042\uffa7\043\uffa7\044\uffa7\001" +
    "\002\000\012\003\221\030\uffa8\031\uffa8\033\uffa8\001\002" +
    "\000\010\030\uffae\031\224\033\225\001\002\000\004\030" +
    "\252\001\002\000\054\011\uffa5\012\uffa5\013\uffa5\014\uffa5" +
    "\015\uffa5\016\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026" +
    "\uffa5\027\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5" +
    "\041\uffa5\042\uffa5\043\uffa5\044\uffa5\001\002\000\010\030" +
    "\uffae\031\224\033\225\001\002\000\004\030\255\001\002" +
    "\000\054\011\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016" +
    "\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6" +
    "\032\uffa6\034\uffa6\035\uffa6\036\uffa6\040\uffa6\041\uffa6\042" +
    "\uffa6\043\uffa6\044\uffa6\001\002\000\006\003\260\011\257" +
    "\001\002\000\004\061\261\001\002\000\054\011\uffb8\012" +
    "\uffb8\013\uffb8\014\uffb8\015\uffb8\016\uffb8\021\uffb8\022\uffb8" +
    "\023\uffb8\024\uffb8\026\uffb8\027\uffb8\032\uffb8\034\uffb8\035" +
    "\uffb8\036\uffb8\040\uffb8\041\uffb8\042\uffb8\043\uffb8\044\uffb8" +
    "\001\002\000\020\003\263\012\017\013\024\014\023\015" +
    "\021\016\030\062\uffbf\001\002\000\004\062\270\001\002" +
    "\000\004\062\264\001\002\000\036\011\015\012\017\013" +
    "\024\014\023\015\021\016\030\021\012\023\033\027\022" +
    "\035\025\041\041\042\uff87\043\uff87\044\014\001\002\000" +
    "\006\042\uffc3\043\053\001\002\000\004\042\267\001\002" +
    "\000\054\011\uffba\012\uffba\013\uffba\014\uffba\015\uffba\016" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\026\uffba\027\uffba" +
    "\032\uffba\034\uffba\035\uffba\036\uffba\040\uffba\041\uffba\042" +
    "\uffba\043\uffba\044\uffba\001\002\000\036\011\015\012\017" +
    "\013\024\014\023\015\021\016\030\021\012\023\033\027" +
    "\022\035\025\041\041\042\uff87\043\uff87\044\014\001\002" +
    "\000\006\042\uffc3\043\053\001\002\000\004\042\273\001" +
    "\002\000\054\011\uffbc\012\uffbc\013\uffbc\014\uffbc\015\uffbc" +
    "\016\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc\026\uffbc\027" +
    "\uffbc\032\uffbc\034\uffbc\035\uffbc\036\uffbc\040\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\044\uffbc\001\002\000\054\011\uff8a\012" +
    "\uff8a\013\uff8a\014\uff8a\015\uff8a\016\uff8a\021\uff8a\022\uff8a" +
    "\023\uff8a\024\uff8a\026\uff8a\027\uff8a\032\uff8a\034\uff8a\035" +
    "\uff8a\036\uff8a\040\uff8a\041\uff8a\042\uff8a\043\uff8a\044\uff8a" +
    "\001\002\000\056\011\uffc9\012\uffc9\013\uffc9\014\uffc9\015" +
    "\uffc9\016\uffc9\017\331\021\uffc9\022\uffc9\023\uffc9\024\uffc9" +
    "\026\uffc9\027\uffc9\032\uffc9\034\uffc9\035\uffc9\036\uffc9\040" +
    "\uffc9\041\uffc9\042\uffc9\043\uffc9\044\uffc9\001\002\000\022" +
    "\003\324\004\067\005\072\006\077\007\076\011\073\062" +
    "\uffc5\063\uffc5\001\002\000\024\003\303\004\061\005\064" +
    "\006\063\007\062\010\057\011\056\017\304\061\302\001" +
    "\002\000\070\011\uffeb\012\uffeb\013\uffeb\014\uffeb\015\uffeb" +
    "\016\uffeb\017\uffeb\021\uffeb\022\uffeb\023\uffeb\024\uffeb\026" +
    "\uffeb\027\uffeb\032\uffeb\034\uffeb\035\uffeb\036\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\047" +
    "\uffeb\050\uffeb\062\uffeb\001\002\000\070\011\uffe4\012\uffe4" +
    "\013\uffe4\014\uffe4\015\uffe4\016\uffe4\017\uffe4\021\uffe4\022" +
    "\uffe4\023\uffe4\024\uffe4\026\uffe4\027\uffe4\032\uffe4\034\uffe4" +
    "\035\uffe4\036\uffe4\040\uffe4\041\uffe4\042\uffe4\043\uffe4\044" +
    "\uffe4\045\uffe4\046\uffe4\047\313\050\314\062\uffe4\001\002" +
    "\000\020\004\061\005\064\006\063\007\062\010\057\011" +
    "\056\061\302\001\002\000\004\017\320\001\002\000\054" +
    "\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016\uffce\021" +
    "\uffce\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce\032\uffce" +
    "\034\uffce\035\uffce\036\uffce\040\uffce\041\uffce\042\uffce\043" +
    "\uffce\044\uffce\001\002\000\070\011\uffe7\012\uffe7\013\uffe7" +
    "\014\uffe7\015\uffe7\016\uffe7\017\uffe7\021\uffe7\022\uffe7\023" +
    "\uffe7\024\uffe7\026\uffe7\027\uffe7\032\uffe7\034\uffe7\035\uffe7" +
    "\036\uffe7\040\uffe7\041\uffe7\042\uffe7\043\uffe7\044\uffe7\045" +
    "\uffe7\046\uffe7\047\uffe7\050\uffe7\062\uffe7\001\002\000\062" +
    "\011\uffcf\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\017" +
    "\311\021\uffcf\022\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf" +
    "\032\uffcf\034\uffcf\035\uffcf\036\uffcf\040\uffcf\041\uffcf\042" +
    "\uffcf\043\uffcf\044\uffcf\045\307\046\310\001\002\000\020" +
    "\004\061\005\064\006\063\007\062\010\057\011\056\061" +
    "\302\001\002\000\020\004\061\005\064\006\063\007\062" +
    "\010\057\011\056\061\302\001\002\000\054\011\uffd1\012" +
    "\uffd1\013\uffd1\014\uffd1\015\uffd1\016\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\026\uffd1\027\uffd1\032\uffd1\034\uffd1\035" +
    "\uffd1\036\uffd1\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1" +
    "\001\002\000\070\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015" +
    "\uffe5\016\uffe5\017\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5" +
    "\026\uffe5\027\uffe5\032\uffe5\034\uffe5\035\uffe5\036\uffe5\040" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5" +
    "\047\313\050\314\062\uffe5\001\002\000\020\004\061\005" +
    "\064\006\063\007\062\010\057\011\056\061\302\001\002" +
    "\000\020\004\061\005\064\006\063\007\062\010\057\011" +
    "\056\061\302\001\002\000\070\011\uffe8\012\uffe8\013\uffe8" +
    "\014\uffe8\015\uffe8\016\uffe8\017\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\026\uffe8\027\uffe8\032\uffe8\034\uffe8\035\uffe8" +
    "\036\uffe8\040\uffe8\041\uffe8\042\uffe8\043\uffe8\044\uffe8\045" +
    "\uffe8\046\uffe8\047\uffe8\050\uffe8\062\uffe8\001\002\000\070" +
    "\011\uffe9\012\uffe9\013\uffe9\014\uffe9\015\uffe9\016\uffe9\017" +
    "\uffe9\021\uffe9\022\uffe9\023\uffe9\024\uffe9\026\uffe9\027\uffe9" +
    "\032\uffe9\034\uffe9\035\uffe9\036\uffe9\040\uffe9\041\uffe9\042" +
    "\uffe9\043\uffe9\044\uffe9\045\uffe9\046\uffe9\047\uffe9\050\uffe9" +
    "\062\uffe9\001\002\000\070\011\uffe6\012\uffe6\013\uffe6\014" +
    "\uffe6\015\uffe6\016\uffe6\017\uffe6\021\uffe6\022\uffe6\023\uffe6" +
    "\024\uffe6\026\uffe6\027\uffe6\032\uffe6\034\uffe6\035\uffe6\036" +
    "\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6\045\uffe6" +
    "\046\uffe6\047\313\050\314\062\uffe6\001\002\000\054\011" +
    "\uffcd\012\uffcd\013\uffcd\014\uffcd\015\uffcd\016\uffcd\021\uffcd" +
    "\022\uffcd\023\uffcd\024\uffcd\026\uffcd\027\uffcd\032\uffcd\034" +
    "\uffcd\035\uffcd\036\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\044\uffcd\001\002\000\010\045\307\046\310\062\322\001" +
    "\002\000\070\011\uffea\012\uffea\013\uffea\014\uffea\015\uffea" +
    "\016\uffea\017\uffea\021\uffea\022\uffea\023\uffea\024\uffea\026" +
    "\uffea\027\uffea\032\uffea\034\uffea\035\uffea\036\uffea\040\uffea" +
    "\041\uffea\042\uffea\043\uffea\044\uffea\045\uffea\046\uffea\047" +
    "\uffea\050\uffea\062\uffea\001\002\000\006\062\327\063\101" +
    "\001\002\000\056\011\uffcb\012\uffcb\013\uffcb\014\uffcb\015" +
    "\uffcb\016\uffcb\021\uffcb\022\uffcb\023\uffcb\024\uffcb\026\uffcb" +
    "\027\uffcb\032\uffcb\034\uffcb\035\uffcb\036\uffcb\040\uffcb\041" +
    "\uffcb\042\uffcb\043\uffcb\044\uffcb\062\325\001\002\000\004" +
    "\017\326\001\002\000\054\011\uffcc\012\uffcc\013\uffcc\014" +
    "\uffcc\015\uffcc\016\uffcc\021\uffcc\022\uffcc\023\uffcc\024\uffcc" +
    "\026\uffcc\027\uffcc\032\uffcc\034\uffcc\035\uffcc\036\uffcc\040" +
    "\uffcc\041\uffcc\042\uffcc\043\uffcc\044\uffcc\001\002\000\056" +
    "\011\uffd0\012\uffd0\013\uffd0\014\uffd0\015\uffd0\016\uffd0\017" +
    "\330\021\uffd0\022\uffd0\023\uffd0\024\uffd0\026\uffd0\027\uffd0" +
    "\032\uffd0\034\uffd0\035\uffd0\036\uffd0\040\uffd0\041\uffd0\042" +
    "\uffd0\043\uffd0\044\uffd0\001\002\000\054\011\uffd2\012\uffd2" +
    "\013\uffd2\014\uffd2\015\uffd2\016\uffd2\021\uffd2\022\uffd2\023" +
    "\uffd2\024\uffd2\026\uffd2\027\uffd2\032\uffd2\034\uffd2\035\uffd2" +
    "\036\uffd2\040\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\001" +
    "\002\000\054\011\uffca\012\uffca\013\uffca\014\uffca\015\uffca" +
    "\016\uffca\021\uffca\022\uffca\023\uffca\024\uffca\026\uffca\027" +
    "\uffca\032\uffca\034\uffca\035\uffca\036\uffca\040\uffca\041\uffca" +
    "\042\uffca\043\uffca\044\uffca\001\002\000\054\011\uff9e\012" +
    "\uff9e\013\uff9e\014\uff9e\015\uff9e\016\uff9e\021\uff9e\022\uff9e" +
    "\023\uff9e\024\uff9e\026\uff9e\027\uff9e\032\uff9e\034\uff9e\035" +
    "\uff9e\036\uff9e\040\uff9e\041\uff9e\042\uff9e\043\uff9e\044\uff9e" +
    "\001\002\000\012\003\336\011\334\017\uffa2\062\335\001" +
    "\002\000\004\020\354\001\002\000\034\011\015\012\017" +
    "\013\024\014\023\015\021\016\030\021\012\022\uff87\023" +
    "\033\027\022\035\025\041\041\044\014\001\002\000\004" +
    "\062\347\001\002\000\004\017\340\001\002\000\016\004" +
    "\067\005\072\006\077\007\076\011\073\061\120\001\002" +
    "\000\010\017\342\051\125\052\130\001\002\000\006\011" +
    "\334\062\uffa2\001\002\000\004\062\344\001\002\000\034" +
    "\011\015\012\017\013\024\014\023\015\021\016\030\021" +
    "\012\022\uff87\023\033\027\022\035\025\041\041\044\014" +
    "\001\002\000\004\022\346\001\002\000\054\011\uffa1\012" +
    "\uffa1\013\uffa1\014\uffa1\015\uffa1\016\uffa1\021\uffa1\022\uffa1" +
    "\023\uffa1\024\uffa1\026\uffa1\027\uffa1\032\uffa1\034\uffa1\035" +
    "\uffa1\036\uffa1\040\uffa1\041\uffa1\042\uffa1\043\uffa1\044\uffa1" +
    "\001\002\000\034\011\015\012\017\013\024\014\023\015" +
    "\021\016\030\021\012\022\uff87\023\033\027\022\035\025" +
    "\041\041\044\014\001\002\000\004\022\351\001\002\000" +
    "\054\011\uff9f\012\uff9f\013\uff9f\014\uff9f\015\uff9f\016\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\026\uff9f\027\uff9f\032" +
    "\uff9f\034\uff9f\035\uff9f\036\uff9f\040\uff9f\041\uff9f\042\uff9f" +
    "\043\uff9f\044\uff9f\001\002\000\004\022\353\001\002\000" +
    "\054\011\uffa0\012\uffa0\013\uffa0\014\uffa0\015\uffa0\016\uffa0" +
    "\021\uffa0\022\uffa0\023\uffa0\024\uffa0\026\uffa0\027\uffa0\032" +
    "\uffa0\034\uffa0\035\uffa0\036\uffa0\040\uffa0\041\uffa0\042\uffa0" +
    "\043\uffa0\044\uffa0\001\002\000\020\004\061\005\064\006" +
    "\063\007\062\010\057\011\056\061\302\001\002\000\012" +
    "\017\uffa3\045\307\046\310\062\uffa3\001\002\000\010\017" +
    "\uff95\020\360\063\uff95\001\002\000\054\011\uff92\012\uff92" +
    "\013\uff92\014\uff92\015\uff92\016\uff92\021\uff92\022\uff92\023" +
    "\uff92\024\uff92\026\uff92\027\uff92\032\uff92\034\uff92\035\uff92" +
    "\036\uff92\040\uff92\041\uff92\042\uff92\043\uff92\044\uff92\001" +
    "\002\000\020\004\061\005\064\006\063\007\062\010\057" +
    "\011\056\061\302\001\002\000\010\017\362\045\307\046" +
    "\310\001\002\000\054\011\uff94\012\uff94\013\uff94\014\uff94" +
    "\015\uff94\016\uff94\021\uff94\022\uff94\023\uff94\024\uff94\026" +
    "\uff94\027\uff94\032\uff94\034\uff94\035\uff94\036\uff94\040\uff94" +
    "\041\uff94\042\uff94\043\uff94\044\uff94\001\002\000\004\040" +
    "\364\001\002\000\004\002\uff85\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\362\000\004\013\005\001\001\000\034\006\025\007" +
    "\037\011\036\012\035\014\362\015\030\026\010\027\017" +
    "\033\033\034\015\035\007\040\012\045\034\001\001\000" +
    "\034\006\025\007\037\011\036\012\035\014\031\015\030" +
    "\026\010\027\017\033\033\034\015\035\007\040\012\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\025" +
    "\007\037\011\036\012\035\015\030\026\010\027\017\033" +
    "\273\035\007\040\012\045\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\026\046\043\044\044\045\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\025\007\037\011\036\012\035\014" +
    "\051\015\030\026\010\027\017\033\033\034\015\035\007" +
    "\040\012\045\034\001\001\000\004\042\053\001\001\000" +
    "\004\016\057\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\067\037\070\041" +
    "\074\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\102\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\026\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\002\114" +
    "\022\123\023\121\030\116\031\113\032\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\024\160\001\001\000\016\002\114\022\147\023\121\030" +
    "\116\031\113\032\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\025\007\037\011\036\012\035\014" +
    "\140\015\030\026\010\027\017\033\033\034\015\035\007" +
    "\040\012\045\034\001\001\000\004\025\126\001\001\000" +
    "\002\001\001\000\034\006\025\007\037\011\036\012\035" +
    "\014\131\015\030\026\010\027\017\033\033\034\015\035" +
    "\007\040\012\045\034\001\001\000\014\002\114\023\130" +
    "\030\116\031\113\032\115\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\133\001\001" +
    "\000\002\001\001\000\034\006\025\007\037\011\036\012" +
    "\035\014\136\015\030\026\010\027\017\033\033\034\015" +
    "\035\007\040\012\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\010\142\001\001\000\002\001\001\000\034\006\025\007" +
    "\037\011\036\012\035\014\144\015\030\026\010\027\017" +
    "\033\033\034\015\035\007\040\012\045\034\001\001\000" +
    "\002\001\001\000\004\010\146\001\001\000\002\001\001" +
    "\000\004\025\126\001\001\000\002\001\001\000\010\002" +
    "\114\031\170\032\115\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\114\031\163\032" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\014" +
    "\002\114\023\162\030\116\031\113\032\115\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\002\114\032\167\001\001\000\006\002\114\032\166\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\016\002\114\022" +
    "\175\023\121\030\116\031\113\032\115\001\001\000\002" +
    "\001\001\000\004\025\126\001\001\000\034\006\025\007" +
    "\037\011\036\012\035\014\177\015\030\026\010\027\017" +
    "\033\033\034\015\035\007\040\012\045\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\006\025\007\037" +
    "\011\036\012\035\014\202\015\030\026\010\027\017\033" +
    "\033\034\015\035\007\040\012\045\034\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\025\007\037\011" +
    "\036\012\035\014\205\015\030\026\010\027\017\033\033" +
    "\034\015\035\007\040\012\045\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\003\214" +
    "\001\001\000\002\001\001\000\004\005\252\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\221\001\001\000\002\001\001\000" +
    "\004\004\222\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\025\007\037\011\036\012\035\014\226\015" +
    "\030\026\010\027\017\033\033\034\015\035\007\040\012" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\234\001\001" +
    "\000\034\006\025\007\037\011\036\012\035\014\243\015" +
    "\030\026\010\027\017\033\033\034\015\035\007\040\012" +
    "\045\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\034\006\025\007\037\011\036\012\035\014\236\015\030" +
    "\026\010\027\017\033\033\034\015\035\007\040\012\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\034" +
    "\006\025\007\037\011\036\012\035\014\241\015\030\026" +
    "\010\027\017\033\033\034\015\035\007\040\012\045\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\005\247" +
    "\001\001\000\004\004\250\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\004\253\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\026\046\043\044\044\261\001\001" +
    "\000\002\001\001\000\002\001\001\000\034\006\025\007" +
    "\037\011\036\012\035\014\264\015\030\026\010\027\017" +
    "\033\033\034\015\035\007\040\012\045\034\001\001\000" +
    "\004\042\265\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\025\007\037\011\036\012\035\014\270\015" +
    "\030\026\010\027\017\033\033\034\015\035\007\040\012" +
    "\045\034\001\001\000\004\042\271\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\002\067\037\322\041\074\001\001\000\012\016" +
    "\277\017\305\020\300\021\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\012\016\277\017\320\020\300\021" +
    "\304\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\016\277\020\316\021" +
    "\304\001\001\000\010\016\277\020\311\021\304\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\016\277\021" +
    "\315\001\001\000\006\016\277\021\314\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\036\336\001\001\000\002\001\001\000" +
    "\034\006\025\007\037\011\036\012\035\014\351\015\030" +
    "\026\010\027\017\033\033\034\015\035\007\040\012\045" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\002\114\022\340\023\121\030\116\031\113\032\115\001" +
    "\001\000\004\025\126\001\001\000\004\036\342\001\001" +
    "\000\002\001\001\000\034\006\025\007\037\011\036\012" +
    "\035\014\344\015\030\026\010\027\017\033\033\034\015" +
    "\035\007\040\012\045\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\006\025\007\037\011\036\012\035" +
    "\014\347\015\030\026\010\027\017\033\033\034\015\035" +
    "\007\040\012\045\034\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\277\017\354\020\300\021\304\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\016\277\017" +
    "\360\020\300\021\304\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TieParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TieParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TieParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TreeNode AST = new TreeNode();
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++; 
            outputArea.append("("+errors+")> " + message + info + "\n");
        }else {
            StringBuffer m = new StringBuffer("Error ");
            if (info instanceof java_cup.runtime.Symbol) 
               m.append( "("+info.toString()+")" );     
            m.append(" : "+message);   
            //System.err.println(m);
            outputArea.append("> "+m+"\n");
        }
    }
   
    @Override
    public void report_fatal_error(String message, Object info) {
      report_error(message, info);
      throw new RuntimeException("Fatal Syntax Error");
    }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TieParser$actions {
  private final TieParser parser;

  /** Constructor */
  CUP$TieParser$actions(TieParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TieParser$do_action(
    int                        CUP$TieParser$act_num,
    java_cup.runtime.lr_parser CUP$TieParser$parser,
    java.util.Stack            CUP$TieParser$stack,
    int                        CUP$TieParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TieParser$result;

      /* select the action based on the action number */
      switch (CUP$TieParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // PROGRAM ::= MAIN error 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error Reaching RUN END", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // PROGRAM ::= error PROGRAM_BODY MAINEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("RUN END without RUN", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              TreeNode RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Run", body); parser.AST = RESULT; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // PROGRAM_BODY ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // PROGRAM_BODY ::= STATEMENTS 
            {
              TreeNode RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statements = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = statements; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // STATEMENTS ::= STATEMENT 
            {
              TreeNode RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statement = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Statements", statement); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              TreeNode RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode statements = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statement = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		if( statements != null )
                                                                                { ((TreeNode)statements).addChild(statement); RESULT = statements; } 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // STATEMENT ::= CALL_FUNCTION 
            {
              TreeNode RESULT =null;
		int callfunctionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int callfunctionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode callfunction = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = callfunction; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // STATEMENT ::= DECLARE_FUNCTION 
            {
              TreeNode RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode function = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = function; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // STATEMENT ::= _SWITCH 
            {
              TreeNode RESULT =null;
		int _switchleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _switchright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _switch = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _switch; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // STATEMENT ::= _WHILE 
            {
              TreeNode RESULT =null;
		int _whileleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _whileright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _while = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _while; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // STATEMENT ::= _FOR 
            {
              TreeNode RESULT =null;
		int _forleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _forright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _for = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _for; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // STATEMENT ::= _IF 
            {
              TreeNode RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _if = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _if; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // STATEMENT ::= DECLARE_VARIABLE 
            {
              TreeNode RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode declare = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = declare; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARE_VARIABLE ::= TYPES error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in ID declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARE_VARIABLE ::= LISTA_IDS END 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARE_VARIABLE ::= TYPES ID ASSIGN E END 
            {
              TreeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode("=", new TreeNode(id) , e) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // LISTA_IDS ::= TYPES ID 
            {
              TreeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode(id) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // LISTA_IDS ::= LISTA_IDS COMMA ID 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)li).addChild(new TreeNode(id)); RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // _IF ::= COND error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in CON declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // _IF ::= COND PARIZQ error PARDER PROGRAM_BODY CONDEND _ELSE 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		 parser.report_error("Error in CON boolean statement", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // _IF ::= COND PARIZQ PARDER PROGRAM_BODY CONDEND _ELSE 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error Empty Boolean statement on CON", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // _IF ::= COND PARIZQ LogicalA PARDER PROGRAM_BODY CONDEND _ELSE 
            {
              TreeNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _else = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("con", la, body, _else); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // _ELSE ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // _ELSE ::= YET error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in YET body", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // _ELSE ::= YET PROGRAM_BODY YETEND 
            {
              TreeNode RESULT =null;
		int yetleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int yetright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object yet = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("yet", body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // _FOR ::= REP error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in REP declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // _FOR ::= REP PARIZQ error PARDER PROGRAM_BODY REPEND 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		 parser.report_error("Error in REP Definition Statements", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // _FOR ::= REP PARIZQ PARDER PROGRAM_BODY REPEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error Empty Definition statements on REP", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // _FOR ::= REP PARIZQ FOR_ASSIGN END LogicalA END FOR_ASSIGN PARDER PROGRAM_BODY REPEND 
            {
              TreeNode RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).left;
		int repright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		TreeNode fa = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int fa2left = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int fa2right = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode fa2 = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("rep", fa, la, fa2, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // FOR_ASSIGN ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // FOR_ASSIGN ::= ID ASSIGN E 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("=", new TreeNode(id), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // _SWITCH ::= SET error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in SET declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // _SWITCH ::= SET PARIZQ error PARDER CASE DEFAULT SETEND 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		 parser.report_error("Error in SET defining parameter", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // _SWITCH ::= SET PARIZQ PARDER CASE DEFAULT SETEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error Empty Defininf parameter SET", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // _SWITCH ::= SET PARIZQ SWITCH_LITERALS PARDER CASE DEFAULT SETEND 
            {
              TreeNode RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object set = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode sl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("set", sl, c, d); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // CASE ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode("CASES"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // CASE ::= error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in CASE declaration", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // CASE ::= CASE OPT error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in CASE declaration", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // CASE ::= CASE OPT PARIZQ error PARDER PROGRAM_BODY OPTEND 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		 parser.report_error("Error in CASE defining parameter", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // CASE ::= CASE OPT PARIZQ PARDER PROGRAM_BODY OPTEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error in CASE empty defining parameter", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // CASE ::= CASE OPT PARIZQ SWITCH_LITERALS PARDER PROGRAM_BODY OPTEND 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode sl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode b = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 ((TreeNode)c).addChild( new TreeNode("opt", sl, b) ); RESULT = c; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DEFAULT ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DEFAULT ::= ANY error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in ANY declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DEFAULT ::= ANY PROGRAM_BODY ANYEND 
            {
              TreeNode RESULT =null;
		int anyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int anyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object any = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("any", body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH_LITERALS ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCH_LITERALS ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(Integer.toString(dt) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // SWITCH_LITERALS ::= CHAR 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("'" + Character.toString(ch) + "'"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _WHILE ::= TIL error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in TIL declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _WHILE ::= TIL PARIZQ error PARDER PROGRAM_BODY TILEND 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		 parser.report_error("Error in TIL boolean statement", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _WHILE ::= TIL PARIZQ PARDER PROGRAM_BODY TILEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error empty boolean condition on TIL", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _WHILE ::= TIL PARIZQ LogicalA PARDER PROGRAM_BODY TILEND 
            {
              TreeNode RESULT =null;
		int tilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object til = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("til", la, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARE_FUNCTION ::= FUNCTION_TYPES ACT error 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error in ACT declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARE_FUNCTION ::= ACT error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in ACT declaration", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARE_FUNCTION ::= FUNCTION_TYPES ACT ID PARIZQ error PARDER PROGRAM_BODY RETURN ACTEND 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		 parser.report_error("Error in ACT argument declaration", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARE_FUNCTION ::= ACT ID PARIZQ ARGUMENTS PARDER PROGRAM_BODY RETURN ACTEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error ACT without return type", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARE_FUNCTION ::= FUNCTION_TYPES ACT ID PARIZQ ARGUMENTS PARDER PROGRAM_BODY RETURN ACTEND 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode args = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode r = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("act", t, new TreeNode(id, "act"), args, body, r); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNCTION_TYPES ::= NIL 
            {
              String RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "nil"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNCTION_TYPES ::= TYPES 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // ARGUMENTS ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // ARGUMENTS ::= ARGUMENT 
            {
              TreeNode RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode args = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = args; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // ARGUMENT ::= TYPES ID 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Arguments", new TreeNode(id, t.toString()) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // ARGUMENT ::= ARGUMENT COMMA TYPES ID 
            {
              TreeNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode arg = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)arg).addChild( new TreeNode(id, t.toString()) ); RESULT = arg; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RETURN ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RETURN ::= RET LITERALS END 
            {
              TreeNode RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode lit = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("ret", lit); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // PARAMS ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // PARAMS ::= PARAM 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // PARAM ::= BooleanTypes 
            {
              TreeNode RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode bt = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Params", bt); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // PARAM ::= PARAMS COMMA BooleanTypes 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int btleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode bt = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)p).addChild(bt); RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // CALL_FUNCTION ::= ID error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Undefined ID operation", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // CALL_FUNCTION ::= ID error END 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 parser.report_error("Error in ID operation statement", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // CALL_FUNCTION ::= ID PARIZQ error 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Error in Function parameter statement", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // CALL_FUNCTION ::= ID PARIZQ error PARDER END 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		 parser.report_error("Error in Function parameter statement", err); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CALL_FUNCTION ::= ID ASSIGN error END 
            {
              TreeNode RESULT =null;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 parser.report_error("Error assigning statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_FUNCTION ::= ID ASSIGN END 
            {
              TreeNode RESULT =null;
		 parser.report_error("Misssing assigning statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL_FUNCTION ::= ID ASSIGN E 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 parser.report_error("Missing ';' to end statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CALL_FUNCTION ::= ID PARIZQ PARAMS PARDER 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 parser.report_error("Missing ';' to end statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CALL_FUNCTION ::= ID ASSIGN E END 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("=", new TreeNode(id), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CALL_FUNCTION ::= ID PARIZQ PARAMS PARDER END 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		 RESULT = new TreeNode("Call Function", new TreeNode(id, p)); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELogical ::= TLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = tl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELogical ::= ELogical MINUS TLogical 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("-", fl, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // ELogical ::= ELogical PLUS TLogical 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("+", el, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TLogical ::= FLogical 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TLogical ::= TLogical DIV FLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("/", tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TLogical ::= TLogical MULT FLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("*", tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FLogical ::= PARIZQ LogicalA PARDER 
            {
              TreeNode RESULT =null;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = la; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FLogical ::= BooleanTypes 
            {
              TreeNode RESULT =null;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lit = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = lit; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BooleanTypes ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BooleanTypes ::= CHAR 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("'" + Character.toString(ch)  + "'", "sym"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BooleanTypes ::= FLOAT 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Float.toString(fl), "dec" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // BooleanTypes ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer di = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Integer.toString(di), "num" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // BooleanTypes ::= BOOL 
            {
              TreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl), "bin" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalA ::= LogicalB 
            {
              TreeNode RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = lb; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalA ::= LogicalA Concat LogicalB 
            {
              TreeNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode al = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int concatleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String concat = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(concat, al, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // LogicalB ::= ELogical 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = el; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(op ,el, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= T 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // E ::= E MINUS T 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("-",e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // E ::= E PLUS T 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("+",e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= F 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = f; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= T DIV F 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("/",t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // T ::= T MULT F 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("*",t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= PARIZQ E PARDER 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = e; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // F ::= LITERALS 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LogicalOperators ::= NOTEQUAL 
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "!="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LogicalOperators ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "=="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              String RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = ">="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LogicalOperators ::= LESSEQUALTHAN 
            {
              String RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "<="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LogicalOperators ::= GREATERTHAN 
            {
              String RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = ">"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LogicalOperators ::= LESSTHAN 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "<"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Concat ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "or"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Concat ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "and"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // LITERALS ::= ID PARIZQ error PARDER 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int errleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int errright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object err = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		
                                                                                    RESULT = new TreeNode(id, new TreeNode(""));
                                                                                    parser.report_error("Error defining function params", err); 
                                                                                
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERALS ::= ID PARIZQ PARAMS PARDER 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(id, p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= STRING 
            {
              TreeNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode('"' + str + '"', "str"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= CHAR 
            {
              TreeNode RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("'" + Character.toString(chr) + "'", "sym" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= FLOAT 
            {
              TreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Float ft = (Float)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Float.toString(ft), "dec" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Integer.toString(dt), "num" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERALS ::= BOOL 
            {
              TreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl), "bin" ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "str"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              String RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "sym"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              String RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "bin"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "dec"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "num"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		RESULT = start_val;
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TieParser$parser.done_parsing();
          return CUP$TieParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

