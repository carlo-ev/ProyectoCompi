
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sat Apr 04 18:15:22 CST 2015
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sat Apr 04 18:15:22 CST 2015
  */
public class TieParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TieParser() {super();}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\147\000\002\002\004\000\002\037\003\000\002\037" +
    "\003\000\002\037\003\000\002\037\003\000\002\037\003" +
    "\000\002\040\003\000\002\040\003\000\002\040\003\000" +
    "\002\040\003\000\002\040\003\000\002\040\004\000\002" +
    "\045\003\000\002\045\003\000\002\046\003\000\002\046" +
    "\002\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\044\003\000" +
    "\002\002\003\000\002\002\002\000\002\003\004\000\002" +
    "\004\004\000\002\004\005\000\002\035\005\000\002\035" +
    "\004\000\002\034\006\000\002\033\004\000\002\033\004" +
    "\000\002\036\006\000\002\043\003\000\002\043\005\000" +
    "\002\042\005\000\002\042\005\000\002\042\005\000\002" +
    "\042\003\000\002\041\005\000\002\041\005\000\002\041" +
    "\003\000\002\050\005\000\002\050\003\000\002\047\005" +
    "\000\002\047\003\000\002\053\004\000\002\053\006\000" +
    "\002\052\005\000\002\052\005\000\002\052\005\000\002" +
    "\052\003\000\002\051\005\000\002\051\005\000\002\051" +
    "\003\000\002\024\005\000\002\024\002\000\002\023\004" +
    "\000\002\023\002\000\002\022\005\000\002\025\003\000" +
    "\002\025\003\000\002\021\013\000\002\030\004\000\002" +
    "\030\002\000\002\027\004\000\002\027\002\000\002\026" +
    "\007\000\002\026\005\000\002\011\007\000\002\011\004" +
    "\000\002\010\007\000\002\007\004\000\002\007\006\000" +
    "\002\006\011\000\002\005\004\000\002\020\003\000\002" +
    "\020\005\000\002\017\010\000\002\016\003\000\002\016" +
    "\003\000\002\016\003\000\002\015\004\000\002\015\002" +
    "\000\002\014\011\000\002\013\007\000\002\013\003\000" +
    "\002\012\010\000\002\055\004\000\002\055\003\000\002" +
    "\055\003\000\002\054\003\000\002\054\003\000\002\054" +
    "\003\000\002\054\003\000\002\054\003\000\002\054\003" +
    "\000\002\054\003\000\002\032\003\000\002\032\002\000" +
    "\002\031\005\000\002\031\005\000\002\031\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\006\003\004\036\005\001\002\000\034\003" +
    "\046\004\017\005\026\006\025\007\021\010\031\016\015" +
    "\021\011\024\032\030\022\034\027\037\uff9e\043\014\001" +
    "\002\000\034\003\030\004\017\005\026\006\025\007\021" +
    "\010\031\016\015\021\011\024\032\030\022\034\027\037" +
    "\uff9e\043\014\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\006\016\267\040\uffc5\001\002\000" +
    "\004\063\245\001\002\000\056\004\uffa5\005\uffa5\006\uffa5" +
    "\007\uffa5\010\uffa5\016\uffa5\021\uffa5\022\uffa5\023\uffa5\024" +
    "\uffa5\025\uffa5\027\uffa5\030\uffa5\031\uffa5\032\uffa5\033\uffa5" +
    "\034\uffa5\035\uffa5\037\uffa5\041\uffa5\042\uffa5\043\uffa5\001" +
    "\002\000\056\004\uffa0\005\uffa0\006\uffa0\007\uffa0\010\uffa0" +
    "\016\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\027" +
    "\uffa0\030\uffa0\031\uffa0\032\uffa0\033\uffa0\034\uffa0\035\uffa0" +
    "\037\uffa0\041\uffa0\042\uffa0\043\uffa0\001\002\000\004\040" +
    "\uffc4\001\002\000\010\020\220\051\066\063\064\001\002" +
    "\000\056\004\017\005\026\006\025\007\021\010\031\016" +
    "\015\021\011\022\uff9f\023\uff9f\024\032\025\uff9f\027\uff9f" +
    "\030\022\031\uff9f\032\uff9f\033\uff9f\034\027\035\uff9f\037" +
    "\uff9f\041\uff9f\042\uff9f\043\014\001\002\000\006\016\000" +
    "\040\000\001\002\000\056\004\uffa6\005\uffa6\006\uffa6\007" +
    "\uffa6\010\uffa6\016\uffa6\021\uffa6\022\uffa6\023\uffa6\024\uffa6" +
    "\025\uffa6\027\uffa6\030\uffa6\031\uffa6\032\uffa6\033\uffa6\034" +
    "\uffa6\035\uffa6\037\uffa6\041\uffa6\042\uffa6\043\uffa6\001\002" +
    "\000\006\016\ufffd\040\ufffd\001\002\000\004\063\170\001" +
    "\002\000\056\004\uffa1\005\uffa1\006\uffa1\007\uffa1\010\uffa1" +
    "\016\uffa1\021\uffa1\022\uffa1\023\uffa1\024\uffa1\025\uffa1\027" +
    "\uffa1\030\uffa1\031\uffa1\032\uffa1\033\uffa1\034\uffa1\035\uffa1" +
    "\037\uffa1\041\uffa1\042\uffa1\043\uffa1\001\002\000\056\004" +
    "\uffa3\005\uffa3\006\uffa3\007\uffa3\010\uffa3\016\uffa3\021\uffa3" +
    "\022\uffa3\023\uffa3\024\uffa3\025\uffa3\027\uffa3\030\uffa3\031" +
    "\uffa3\032\uffa3\033\uffa3\034\uffa3\035\uffa3\037\uffa3\041\uffa3" +
    "\042\uffa3\043\uffa3\001\002\000\006\016\uffff\040\uffff\001" +
    "\002\000\006\016\ufffe\040\ufffe\001\002\000\004\063\157" +
    "\001\002\000\034\002\uff9b\004\uffa7\005\uffa7\006\uffa7\007" +
    "\uffa7\010\uffa7\016\uffa7\021\uffa7\024\uffa7\030\uffa7\034\uffa7" +
    "\037\uffa7\043\uffa7\001\002\000\006\016\ufffc\040\ufffc\001" +
    "\002\000\004\063\106\001\002\000\004\037\105\001\002" +
    "\000\004\040\040\001\002\000\056\004\uffa8\005\uffa8\006" +
    "\uffa8\007\uffa8\010\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\025\uffa8\027\uffa8\030\uffa8\031\uffa8\032\uffa8\033" +
    "\uffa8\034\uffa8\035\uffa8\037\uffa8\041\uffa8\042\uffa8\043\uffa8" +
    "\001\002\000\056\004\uffa2\005\uffa2\006\uffa2\007\uffa2\010" +
    "\uffa2\016\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2\025\uffa2" +
    "\027\uffa2\030\uffa2\031\uffa2\032\uffa2\033\uffa2\034\uffa2\035" +
    "\uffa2\037\uffa2\041\uffa2\042\uffa2\043\uffa2\001\002\000\056" +
    "\004\uffa4\005\uffa4\006\uffa4\007\uffa4\010\uffa4\016\uffa4\021" +
    "\uffa4\022\uffa4\023\uffa4\024\uffa4\025\uffa4\027\uffa4\030\uffa4" +
    "\031\uffa4\032\uffa4\033\uffa4\034\uffa4\035\uffa4\037\uffa4\041" +
    "\uffa4\042\uffa4\043\uffa4\001\002\000\004\016\041\001\002" +
    "\000\004\063\042\001\002\000\014\004\017\005\026\006" +
    "\025\007\021\010\031\001\002\000\004\016\101\001\002" +
    "\000\004\064\045\001\002\000\036\003\046\004\017\005" +
    "\026\006\025\007\021\010\031\016\015\021\011\024\032" +
    "\030\022\034\027\041\uff9e\042\uff9e\043\014\001\002\000" +
    "\056\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7\016\uffa7" +
    "\021\uffa7\022\uffa7\023\uffa7\024\uffa7\025\uffa7\027\uffa7\030" +
    "\uffa7\031\uffa7\032\uffa7\033\uffa7\034\uffa7\035\uffa7\037\uffa7" +
    "\041\uffa7\042\uffa7\043\uffa7\001\002\000\006\041\uffc9\042" +
    "\050\001\002\000\016\011\056\012\061\013\060\014\057" +
    "\015\054\016\053\001\002\000\004\041\052\001\002\000" +
    "\056\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010\uffc3\016\uffc3" +
    "\021\uffc3\022\uffc3\023\uffc3\024\uffc3\025\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\032\uffc3\033\uffc3\034\uffc3\035\uffc3\037\uffc3" +
    "\041\uffc3\042\uffc3\043\uffc3\001\002\000\044\017\uffea\044" +
    "\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\066\052\uffea" +
    "\053\uffea\054\uffea\055\uffea\056\uffea\057\uffea\060\uffea\061" +
    "\uffea\063\064\064\uffea\001\002\000\040\017\ufff7\044\ufff7" +
    "\045\ufff7\046\ufff7\047\ufff7\050\ufff7\052\ufff7\053\ufff7\054" +
    "\ufff7\055\ufff7\056\ufff7\057\ufff7\060\ufff7\061\ufff7\064\ufff7" +
    "\001\002\000\004\017\062\001\002\000\040\017\ufffb\044" +
    "\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\052\ufffb\053\ufffb" +
    "\054\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\064" +
    "\ufffb\001\002\000\040\017\ufff8\044\ufff8\045\ufff8\046\ufff8" +
    "\047\ufff8\050\ufff8\052\ufff8\053\ufff8\054\ufff8\055\ufff8\056" +
    "\ufff8\057\ufff8\060\ufff8\061\ufff8\064\ufff8\001\002\000\040" +
    "\017\ufff9\044\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9\052" +
    "\ufff9\053\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\064\ufff9\001\002\000\040\017\ufffa\044\ufffa\045" +
    "\ufffa\046\ufffa\047\ufffa\050\ufffa\052\ufffa\053\ufffa\054\ufffa" +
    "\055\ufffa\056\ufffa\057\ufffa\060\ufffa\061\ufffa\064\ufffa\001" +
    "\002\000\004\041\uffca\001\002\000\040\017\uffeb\044\uffeb" +
    "\045\uffeb\046\uffeb\047\uffeb\050\uffeb\052\uffeb\053\uffeb\054" +
    "\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb\064\uffeb" +
    "\001\002\000\006\016\071\064\uffbf\001\002\000\040\017" +
    "\ufff6\044\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\052\ufff6" +
    "\053\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\064\ufff6\001\002\000\004\016\067\001\002\000\004" +
    "\063\070\001\002\000\006\016\071\064\uffbf\001\002\000" +
    "\006\064\uffc1\065\074\001\002\000\004\064\073\001\002" +
    "\000\040\017\uffbe\044\uffbe\045\uffbe\046\uffbe\047\uffbe\050" +
    "\uffbe\052\uffbe\053\uffbe\054\uffbe\055\uffbe\056\uffbe\057\uffbe" +
    "\060\uffbe\061\uffbe\064\uffbe\001\002\000\006\016\071\064" +
    "\uffbf\001\002\000\004\064\uffc0\001\002\000\004\064\uffc2" +
    "\001\002\000\004\064\100\001\002\000\040\017\uffbd\044" +
    "\uffbd\045\uffbd\046\uffbd\047\uffbd\050\uffbd\052\uffbd\053\uffbd" +
    "\054\uffbd\055\uffbd\056\uffbd\057\uffbd\060\uffbd\061\uffbd\064" +
    "\uffbd\001\002\000\006\064\uffc7\065\102\001\002\000\014" +
    "\004\017\005\026\006\025\007\021\010\031\001\002\000" +
    "\004\064\uffc6\001\002\000\004\064\uffc8\001\002\000\004" +
    "\002\uff9d\001\002\000\022\011\ufff2\012\ufff2\013\ufff2\014" +
    "\ufff2\015\ufff2\016\ufff2\062\113\063\ufff2\001\002\000\040" +
    "\017\uffcb\044\uffcb\045\uffcb\046\132\047\133\050\131\052" +
    "\uffcb\053\uffcb\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\064\uffcb\001\002\000\012\017\uffd4\052\uffd4\053" +
    "\uffd4\064\uffd4\001\002\000\020\011\056\012\061\013\060" +
    "\014\057\015\054\016\053\063\153\001\002\000\010\052" +
    "\141\053\143\064\140\001\002\000\020\011\ufff3\012\ufff3" +
    "\013\ufff3\014\ufff3\015\ufff3\016\ufff3\063\ufff3\001\002\000" +
    "\040\017\uffce\044\uffce\045\uffce\046\uffce\047\uffce\050\uffce" +
    "\052\uffce\053\uffce\054\uffce\055\uffce\056\uffce\057\uffce\060" +
    "\uffce\061\uffce\064\uffce\001\002\000\032\017\uffd6\044\122" +
    "\045\116\052\uffd6\053\uffd6\054\126\055\124\056\120\057" +
    "\123\060\121\061\117\064\uffd6\001\002\000\022\011\ufff2" +
    "\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\062\113\063" +
    "\ufff2\001\002\000\022\011\uffec\012\uffec\013\uffec\014\uffec" +
    "\015\uffec\016\uffec\062\uffec\063\uffec\001\002\000\022\011" +
    "\uffee\012\uffee\013\uffee\014\uffee\015\uffee\016\uffee\062\uffee" +
    "\063\uffee\001\002\000\022\011\uffed\012\uffed\013\uffed\014" +
    "\uffed\015\uffed\016\uffed\062\uffed\063\uffed\001\002\000\022" +
    "\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\062" +
    "\113\063\ufff2\001\002\000\022\011\uffef\012\uffef\013\uffef" +
    "\014\uffef\015\uffef\016\uffef\062\uffef\063\uffef\001\002\000" +
    "\022\011\ufff0\012\ufff0\013\ufff0\014\ufff0\015\ufff0\016\ufff0" +
    "\062\ufff0\063\ufff0\001\002\000\022\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\062\113\063\ufff2\001\002" +
    "\000\022\011\ufff1\012\ufff1\013\ufff1\014\ufff1\015\ufff1\016" +
    "\ufff1\062\ufff1\063\ufff1\001\002\000\012\017\uffd7\052\uffd7" +
    "\053\uffd7\064\uffd7\001\002\000\040\017\uffcd\044\uffcd\045" +
    "\uffcd\046\132\047\133\050\131\052\uffcd\053\uffcd\054\uffcd" +
    "\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061\uffcd\064\uffcd\001" +
    "\002\000\022\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2" +
    "\016\ufff2\062\113\063\ufff2\001\002\000\022\011\ufff2\012" +
    "\ufff2\013\ufff2\014\ufff2\015\ufff2\016\ufff2\062\113\063\ufff2" +
    "\001\002\000\022\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015" +
    "\ufff2\016\ufff2\062\113\063\ufff2\001\002\000\040\017\uffd0" +
    "\044\uffd0\045\uffd0\046\uffd0\047\uffd0\050\uffd0\052\uffd0\053" +
    "\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0\060\uffd0\061\uffd0" +
    "\064\uffd0\001\002\000\040\017\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\047\uffd1\050\uffd1\052\uffd1\053\uffd1\054\uffd1\055\uffd1" +
    "\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1\001\002\000" +
    "\040\017\uffcf\044\uffcf\045\uffcf\046\uffcf\047\uffcf\050\uffcf" +
    "\052\uffcf\053\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060" +
    "\uffcf\061\uffcf\064\uffcf\001\002\000\040\017\uffcc\044\uffcc" +
    "\045\uffcc\046\132\047\133\050\131\052\uffcc\053\uffcc\054" +
    "\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc\064\uffcc" +
    "\001\002\000\034\003\046\004\017\005\026\006\025\007" +
    "\021\010\031\016\015\021\011\024\032\025\uff9e\030\022" +
    "\034\027\043\014\001\002\000\022\011\ufff5\012\ufff5\013" +
    "\ufff5\014\ufff5\015\ufff5\016\ufff5\062\ufff5\063\ufff5\001\002" +
    "\000\022\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\062\113\063\ufff2\001\002\000\022\011\ufff4\012\ufff4" +
    "\013\ufff4\014\ufff4\015\ufff4\016\ufff4\062\ufff4\063\ufff4\001" +
    "\002\000\012\017\uffd5\052\uffd5\053\uffd5\064\uffd5\001\002" +
    "\000\056\004\uffba\005\uffba\006\uffba\007\uffba\010\uffba\016" +
    "\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025\uffba\027\uffba" +
    "\030\uffba\031\uffba\032\uffba\033\uffba\034\uffba\035\uffba\037" +
    "\uffba\041\uffba\042\uffba\043\uffba\001\002\000\004\025\147" +
    "\001\002\000\060\004\uffbb\005\uffbb\006\uffbb\007\uffbb\010" +
    "\uffbb\016\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\150\027\uffbb\030\uffbb\031\uffbb\032\uffbb\033\uffbb\034" +
    "\uffbb\035\uffbb\037\uffbb\041\uffbb\042\uffbb\043\uffbb\001\002" +
    "\000\034\003\046\004\017\005\026\006\025\007\021\010" +
    "\031\016\015\021\011\024\032\027\uff9e\030\022\034\027" +
    "\043\014\001\002\000\004\027\152\001\002\000\056\004" +
    "\uffbc\005\uffbc\006\uffbc\007\uffbc\010\uffbc\016\uffbc\021\uffbc" +
    "\022\uffbc\023\uffbc\024\uffbc\025\uffbc\027\uffbc\030\uffbc\031" +
    "\uffbc\032\uffbc\033\uffbc\034\uffbc\035\uffbc\037\uffbc\041\uffbc" +
    "\042\uffbc\043\uffbc\001\002\000\022\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\062\113\063\ufff2\001\002" +
    "\000\040\017\uffd3\044\uffd3\045\uffd3\046\uffd3\047\uffd3\050" +
    "\uffd3\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3" +
    "\060\uffd3\061\uffd3\064\uffd3\001\002\000\010\052\141\053" +
    "\143\064\156\001\002\000\040\017\uffd2\044\uffd2\045\uffd2" +
    "\046\uffd2\047\uffd2\050\uffd2\052\uffd2\053\uffd2\054\uffd2\055" +
    "\uffd2\056\uffd2\057\uffd2\060\uffd2\061\uffd2\064\uffd2\001\002" +
    "\000\022\011\ufff2\012\ufff2\013\ufff2\014\ufff2\015\ufff2\016" +
    "\ufff2\062\113\063\ufff2\001\002\000\010\052\141\053\143" +
    "\064\161\001\002\000\036\003\046\004\017\005\026\006" +
    "\025\007\021\010\031\016\015\021\011\023\uff9e\024\032" +
    "\030\022\034\027\035\uff9e\043\014\001\002\000\006\023" +
    "\163\035\165\001\002\000\004\017\166\001\002\000\056" +
    "\004\uffb3\005\uffb3\006\uffb3\007\uffb3\010\uffb3\016\uffb3\021" +
    "\uffb3\022\uffb3\023\uffb3\024\uffb3\025\uffb3\027\uffb3\030\uffb3" +
    "\031\uffb3\032\uffb3\033\uffb3\034\uffb3\035\uffb3\037\uffb3\041" +
    "\uffb3\042\uffb3\043\uffb3\001\002\000\056\004\uffb5\005\uffb5" +
    "\006\uffb5\007\uffb5\010\uffb5\016\uffb5\021\uffb5\022\uffb5\023" +
    "\uffb5\024\uffb5\025\uffb5\027\uffb5\030\uffb5\031\uffb5\032\uffb5" +
    "\033\uffb5\034\uffb5\035\uffb5\037\uffb5\041\uffb5\042\uffb5\043" +
    "\uffb5\001\002\000\004\035\167\001\002\000\056\004\uffb4" +
    "\005\uffb4\006\uffb4\007\uffb4\010\uffb4\016\uffb4\021\uffb4\022" +
    "\uffb4\023\uffb4\024\uffb4\025\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\032\uffb4\033\uffb4\034\uffb4\035\uffb4\037\uffb4\041\uffb4\042" +
    "\uffb4\043\uffb4\001\002\000\010\012\174\014\173\016\171" +
    "\001\002\000\004\064\uffb0\001\002\000\004\064\175\001" +
    "\002\000\004\064\uffb2\001\002\000\004\064\uffb1\001\002" +
    "\000\002\001\002\000\010\031\uffab\032\201\033\202\001" +
    "\002\000\004\031\200\001\002\000\056\004\uffaa\005\uffaa" +
    "\006\uffaa\007\uffaa\010\uffaa\016\uffaa\021\uffaa\022\uffaa\023" +
    "\uffaa\024\uffaa\025\uffaa\027\uffaa\030\uffaa\031\uffaa\032\uffaa" +
    "\033\uffaa\034\uffaa\035\uffaa\037\uffaa\041\uffaa\042\uffaa\043" +
    "\uffaa\001\002\000\004\063\210\001\002\000\034\003\046" +
    "\004\017\005\026\006\025\007\021\010\031\016\015\021" +
    "\011\023\uff9e\024\032\030\022\034\027\043\014\001\002" +
    "\000\004\023\204\001\002\000\004\017\207\001\002\000" +
    "\002\001\002\000\006\031\uffac\032\201\001\002\000\010" +
    "\031\uffaf\032\uffaf\033\uffaf\001\002\000\010\012\174\014" +
    "\173\016\171\001\002\000\004\064\212\001\002\000\042" +
    "\003\046\004\017\005\026\006\025\007\021\010\031\016" +
    "\015\021\011\023\uff9e\024\032\030\022\031\uff9e\032\uff9e" +
    "\033\uff9e\034\027\043\014\001\002\000\012\023\204\031" +
    "\uffae\032\uffae\033\uffae\001\002\000\010\031\uffad\032\uffad" +
    "\033\uffad\001\002\000\056\004\uffa9\005\uffa9\006\uffa9\007" +
    "\uffa9\010\uffa9\016\uffa9\021\uffa9\022\uffa9\023\uffa9\024\uffa9" +
    "\025\uffa9\027\uffa9\030\uffa9\031\uffa9\032\uffa9\033\uffa9\034" +
    "\uffa9\035\uffa9\037\uffa9\041\uffa9\042\uffa9\043\uffa9\001\002" +
    "\000\004\017\243\001\002\000\056\004\uffe9\005\uffe9\006" +
    "\uffe9\007\uffe9\010\uffe9\016\uffe9\021\uffe9\022\uffe9\023\uffe9" +
    "\024\uffe9\025\uffe9\027\uffe9\030\uffe9\031\uffe9\032\uffe9\033" +
    "\uffe9\034\uffe9\035\uffe9\037\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\001\002\000\020\011\056\012\061\013\060\014\057\015" +
    "\054\016\053\063\223\001\002\000\020\017\uffe0\044\uffe0" +
    "\045\uffe0\046\uffe0\047\uffe0\050\uffe0\064\uffe0\001\002\000" +
    "\020\017\uffd8\044\uffd8\045\uffd8\046\233\047\234\050\232" +
    "\064\uffd8\001\002\000\020\011\056\012\061\013\060\014" +
    "\057\015\054\016\053\063\223\001\002\000\020\017\uffdb" +
    "\044\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\064\uffdb\001" +
    "\002\000\010\017\230\044\226\045\227\001\002\000\020" +
    "\011\056\012\061\013\060\014\057\015\054\016\053\063" +
    "\223\001\002\000\020\011\056\012\061\013\060\014\057" +
    "\015\054\016\053\063\223\001\002\000\056\004\uffe7\005" +
    "\uffe7\006\uffe7\007\uffe7\010\uffe7\016\uffe7\021\uffe7\022\uffe7" +
    "\023\uffe7\024\uffe7\025\uffe7\027\uffe7\030\uffe7\031\uffe7\032" +
    "\uffe7\033\uffe7\034\uffe7\035\uffe7\037\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\001\002\000\020\017\uffd9\044\uffd9\045\uffd9\046" +
    "\233\047\234\050\232\064\uffd9\001\002\000\020\011\056" +
    "\012\061\013\060\014\057\015\054\016\053\063\223\001" +
    "\002\000\020\011\056\012\061\013\060\014\057\015\054" +
    "\016\053\063\223\001\002\000\020\011\056\012\061\013" +
    "\060\014\057\015\054\016\053\063\223\001\002\000\020" +
    "\017\uffdd\044\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd\064" +
    "\uffdd\001\002\000\020\017\uffde\044\uffde\045\uffde\046\uffde" +
    "\047\uffde\050\uffde\064\uffde\001\002\000\020\017\uffdc\044" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\064\uffdc\001\002" +
    "\000\020\017\uffda\044\uffda\045\uffda\046\233\047\234\050" +
    "\232\064\uffda\001\002\000\010\044\226\045\227\064\242" +
    "\001\002\000\020\017\uffdf\044\uffdf\045\uffdf\046\uffdf\047" +
    "\uffdf\050\uffdf\064\uffdf\001\002\000\056\004\uffe8\005\uffe8" +
    "\006\uffe8\007\uffe8\010\uffe8\016\uffe8\021\uffe8\022\uffe8\023" +
    "\uffe8\024\uffe8\025\uffe8\027\uffe8\030\uffe8\031\uffe8\032\uffe8" +
    "\033\uffe8\034\uffe8\035\uffe8\037\uffe8\041\uffe8\042\uffe8\043" +
    "\uffe8\001\002\000\056\004\uffb6\005\uffb6\006\uffb6\007\uffb6" +
    "\010\uffb6\016\uffb6\021\uffb6\022\uffb6\023\uffb6\024\uffb6\025" +
    "\uffb6\027\uffb6\030\uffb6\031\uffb6\032\uffb6\033\uffb6\034\uffb6" +
    "\035\uffb6\037\uffb6\041\uffb6\042\uffb6\043\uffb6\001\002\000" +
    "\014\004\017\005\026\006\025\007\021\010\031\001\002" +
    "\000\004\016\267\001\002\000\022\011\ufff2\012\ufff2\013" +
    "\ufff2\014\ufff2\015\ufff2\016\ufff2\062\113\063\ufff2\001\002" +
    "\000\010\017\251\052\141\053\143\001\002\000\014\004" +
    "\017\005\026\006\025\007\021\010\031\001\002\000\004" +
    "\016\263\001\002\000\004\064\254\001\002\000\036\003" +
    "\046\004\017\005\026\006\025\007\021\010\031\016\015" +
    "\021\011\022\uff9e\023\uff9e\024\032\030\022\034\027\043" +
    "\014\001\002\000\056\004\uffb7\005\uffb7\006\uffb7\007\uffb7" +
    "\010\uffb7\016\uffb7\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025" +
    "\uffb7\027\uffb7\030\uffb7\031\uffb7\032\uffb7\033\uffb7\034\uffb7" +
    "\035\uffb7\037\uffb7\041\uffb7\042\uffb7\043\uffb7\001\002\000" +
    "\006\022\260\023\257\001\002\000\004\017\261\001\002" +
    "\000\056\004\uffb9\005\uffb9\006\uffb9\007\uffb9\010\uffb9\016" +
    "\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\027\uffb9" +
    "\030\uffb9\031\uffb9\032\uffb9\033\uffb9\034\uffb9\035\uffb9\037" +
    "\uffb9\041\uffb9\042\uffb9\043\uffb9\001\002\000\004\022\262" +
    "\001\002\000\056\004\uffb8\005\uffb8\006\uffb8\007\uffb8\010" +
    "\uffb8\016\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\032\uffb8\033\uffb8\034\uffb8\035" +
    "\uffb8\037\uffb8\041\uffb8\042\uffb8\043\uffb8\001\002\000\004" +
    "\020\264\001\002\000\020\011\056\012\061\013\060\014" +
    "\057\015\054\016\053\063\223\001\002\000\010\044\226" +
    "\045\227\064\uffe1\001\002\000\074\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\010\uffe2\011\uffe2\012\uffe2\013\uffe2\014\uffe2" +
    "\015\uffe2\016\uffe2\021\uffe2\022\uffe2\023\uffe2\024\uffe2\025" +
    "\uffe2\027\uffe2\030\uffe2\031\uffe2\032\uffe2\033\uffe2\034\uffe2" +
    "\035\uffe2\037\uffe2\041\uffe2\042\uffe2\043\uffe2\062\uffe2\063" +
    "\uffe2\001\002\000\010\017\272\020\273\065\271\001\002" +
    "\000\074\004\uffe3\005\uffe3\006\uffe3\007\uffe3\010\uffe3\011" +
    "\uffe3\012\uffe3\013\uffe3\014\uffe3\015\uffe3\016\uffe3\021\uffe3" +
    "\022\uffe3\023\uffe3\024\uffe3\025\uffe3\027\uffe3\030\uffe3\031" +
    "\uffe3\032\uffe3\033\uffe3\034\uffe3\035\uffe3\037\uffe3\041\uffe3" +
    "\042\uffe3\043\uffe3\062\uffe3\063\uffe3\001\002\000\004\016" +
    "\277\001\002\000\074\004\uffe5\005\uffe5\006\uffe5\007\uffe5" +
    "\010\uffe5\011\uffe5\012\uffe5\013\uffe5\014\uffe5\015\uffe5\016" +
    "\uffe5\021\uffe5\022\uffe5\023\uffe5\024\uffe5\025\uffe5\027\uffe5" +
    "\030\uffe5\031\uffe5\032\uffe5\033\uffe5\034\uffe5\035\uffe5\037" +
    "\uffe5\041\uffe5\042\uffe5\043\uffe5\062\uffe5\063\uffe5\001\002" +
    "\000\020\011\056\012\061\013\060\014\057\015\054\016" +
    "\053\063\223\001\002\000\010\017\275\044\226\045\227" +
    "\001\002\000\074\004\uffe4\005\uffe4\006\uffe4\007\uffe4\010" +
    "\uffe4\011\uffe4\012\uffe4\013\uffe4\014\uffe4\015\uffe4\016\uffe4" +
    "\021\uffe4\022\uffe4\023\uffe4\024\uffe4\025\uffe4\027\uffe4\030" +
    "\uffe4\031\uffe4\032\uffe4\033\uffe4\034\uffe4\035\uffe4\037\uffe4" +
    "\041\uffe4\042\uffe4\043\uffe4\062\uffe4\063\uffe4\001\002\000" +
    "\074\004\uffe6\005\uffe6\006\uffe6\007\uffe6\010\uffe6\011\uffe6" +
    "\012\uffe6\013\uffe6\014\uffe6\015\uffe6\016\uffe6\021\uffe6\022" +
    "\uffe6\023\uffe6\024\uffe6\025\uffe6\027\uffe6\030\uffe6\031\uffe6" +
    "\032\uffe6\033\uffe6\034\uffe6\035\uffe6\037\uffe6\041\uffe6\042" +
    "\uffe6\043\uffe6\062\uffe6\063\uffe6\001\002\000\006\017\272" +
    "\065\271\001\002\000\004\037\301\001\002\000\004\002" +
    "\uff9c\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\277\000\004\031\005\001\001\000\032\003\012\005" +
    "\036\010\011\012\035\017\023\021\022\025\033\032\277" +
    "\033\017\037\007\054\034\055\015\001\001\000\032\003" +
    "\012\005\036\010\011\012\035\017\023\021\022\025\033" +
    "\032\032\033\017\037\007\054\034\055\015\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\034\267\035\265" +
    "\001\001\000\004\006\243\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\004\216\026\215" +
    "\001\001\000\026\003\012\005\036\010\011\012\035\017" +
    "\023\021\022\025\033\033\017\037\007\054\214\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\022\043\037\042\001\001\000\002\001\001\000\002\001" +
    "\001\000\032\003\012\005\036\010\011\012\035\017\023" +
    "\021\022\025\033\032\046\033\017\037\007\054\034\055" +
    "\015\001\001\000\002\001\001\000\004\024\050\001\001" +
    "\000\004\040\054\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\002\064\026\062\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\027\076\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\027\071\001\001" +
    "\000\004\030\074\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\027\075\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\023" +
    "\102\001\001\000\006\022\103\037\042\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\046" +
    "\110\047\111\050\107\051\114\052\106\053\113\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\040\153\001" +
    "\001\000\004\045\141\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\044\124\001\001\000\010\046\110\052" +
    "\136\053\113\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\046\110\052\127\053\113\001" +
    "\001\000\002\001\001\000\002\001\001\000\014\046\110" +
    "\050\126\051\114\052\106\053\113\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\046\110" +
    "\053\135\001\001\000\006\046\110\053\134\001\001\000" +
    "\006\046\110\053\133\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\012\005\036\010\011\011\144\012\035\017\023\021\022" +
    "\025\033\032\145\033\017\037\007\054\034\055\015\001" +
    "\001\000\002\001\001\000\014\046\110\050\143\051\114" +
    "\052\106\053\113\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\032\003\012\005\036\010\011\012\035\017\023\021" +
    "\022\025\033\032\150\033\017\037\007\054\034\055\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\046" +
    "\110\047\154\050\107\051\114\052\106\053\113\001\001" +
    "\000\002\001\001\000\004\045\141\001\001\000\002\001" +
    "\001\000\016\046\110\047\157\050\107\051\114\052\106" +
    "\053\113\001\001\000\004\045\141\001\001\000\032\003" +
    "\012\005\036\010\011\012\035\017\023\021\022\025\033" +
    "\032\161\033\017\037\007\054\034\055\015\001\001\000" +
    "\004\020\163\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\016\171\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\013\176\014" +
    "\175\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\032\003\012\005\036\010" +
    "\011\012\035\017\023\021\022\025\033\032\202\033\017" +
    "\037\007\054\034\055\015\001\001\000\004\015\204\001" +
    "\001\000\002\001\001\000\004\014\205\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\016\210\001\001\000" +
    "\002\001\001\000\032\003\012\005\036\010\011\012\035" +
    "\017\023\021\022\025\033\032\212\033\017\037\007\054" +
    "\034\055\015\001\001\000\004\015\213\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\040\220\041\224\042\221\043\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\040\220\041" +
    "\240\042\221\043\223\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\040\220\042\237\043\223\001\001\000" +
    "\010\040\220\042\230\043\223\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\040\220\043\236\001\001\000" +
    "\006\040\220\043\235\001\001\000\006\040\220\043\234" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\033\246\037" +
    "\245\001\001\000\006\034\267\035\265\001\001\000\016" +
    "\046\110\047\247\050\107\051\114\052\106\053\113\001" +
    "\001\000\004\045\141\001\001\000\006\036\252\037\251" +
    "\001\001\000\002\001\001\000\002\001\001\000\034\003" +
    "\012\005\036\007\254\010\011\012\035\017\023\021\022" +
    "\025\033\032\255\033\017\037\007\054\034\055\015\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\040\220\041\264\042\221\043\223" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\035\275\001\001\000\002" +
    "\001\001\000\012\040\220\041\273\042\221\043\223\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TieParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TieParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TieParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
        outputArea.append("("+errors+")> " + message + info + "\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  @Override
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TieParser$actions {
  private final TieParser parser;

  /** Constructor */
  CUP$TieParser$actions(TieParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TieParser$do_action(
    int                        CUP$TieParser$act_num,
    java_cup.runtime.lr_parser CUP$TieParser$parser,
    java.util.Stack            CUP$TieParser$stack,
    int                        CUP$TieParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TieParser$result;

      /* select the action based on the action number */
      switch (CUP$TieParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // PROGRAM ::= MAIN error 
            {
              Object RESULT =null;
		 parser.report_error("Error Reaching RUN END", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // PROGRAM ::= error PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;
		 parser.report_error("RUN END without RUN", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // PROGRAM_BODY ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PROGRAM_BODY ::= STATEMENTS 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // STATEMENT ::= STATEMENT_ID_FUNC_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // STATEMENT ::= FUNC_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // STATEMENT ::= SWITCH_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // STATEMENT ::= WHILE_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STATEMENT ::= FOR_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STATEMENT ::= IF_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STATEMENT ::= DECLARE_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",42, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STATEMENTS ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Error in a Statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",43, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",43, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",43, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // SWITCH_S ::= SET PARIZQ SWITCH_TYPES PARDER SWITCH_A SETEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_S",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // SWITCH_A ::= SWITCH_B 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_A",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // SWITCH_A ::= SWITCH_B ANY PROGRAM_BODY SWITCH_C SWITCH_B 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_A",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // SWITCH_B ::= SWITCH_B OPT PARIZQ SWITCH_TYPES PARDER PROGRAM_BODY SWITCH_C 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_B",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // SWITCH_C ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_C",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // SWITCH_C ::= OUT END 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_C",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // SWITCH_TYPES ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // SWITCH_TYPES ::= DIGIT 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Number dt = (java.lang.Number)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // SWITCH_TYPES ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Character ch = (java.lang.Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_TYPES",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // WHILE_S ::= TIL PARIZQ LogicalA PARDER PROGRAM_BODY WHILE_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("WHILE_S",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // WHILE_A ::= OUT END TILEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("WHILE_A",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // WHILE_A ::= TILEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("WHILE_A",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR_S ::= REP FOR_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_S",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR_A ::= PARIZQ DECLARE_S LogicalA END DECLARE_FOR PARDER FOR_B 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_A",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR_B ::= PROGRAM_BODY OUT END REPEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_B",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR_B ::= PROGRAM_BODY REPEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_B",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // IF_S ::= COND PARIZQ LogicalA PARDER IF_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("IF_S",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // IF_A ::= PROGRAM_BODY CONDEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("IF_A",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // IF_A ::= PROGRAM_BODY CONDEND YET PROGRAM_BODY YETEND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("IF_A",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // FUNC_EXEC_S ::= PARIZQ FUNC_EXEC_A PARDER 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_S",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // FUNC_EXEC_S ::= DOT ID PARIZQ FUNC_EXEC_A PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_S",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // FUNC_EXEC_A ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_A",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // FUNC_EXEC_A ::= ID FUNC_EXEC_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_A",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // FUNC_EXEC_B ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_B",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNC_EXEC_B ::= COMMA FUNC_EXEC_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_EXEC_B",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNC_S ::= FUNC_TYPES ACT ID PARIZQ FUNC_A PARDER PROGRAM_BODY FUNC_C ACTEND 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_S",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNC_TYPES ::= NIL 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_TYPES",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNC_TYPES ::= TYPES 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_TYPES",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // FUNC_A ::= TYPES ID FUNC_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_A",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // FUNC_B ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_B",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // FUNC_B ::= COMMA FUNC_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_B",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // FUNC_C ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_C",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FUNC_C ::= RET LITERALS END 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNC_C",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELogical ::= TLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",39, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELogical ::= ELogical MINUS TLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",39, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELogical ::= ELogical PLUS TLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",39, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // TLogical ::= FLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",40, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // TLogical ::= TLogical MOD FLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",40, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // TLogical ::= TLogical DIV FLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",40, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // TLogical ::= TLogical MULT FLogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",40, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // FLogical ::= Negation PARIZQ LogicalA PARDER 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",41, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // FLogical ::= Negation LITERALS 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",41, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // LogicalA ::= LogicalB 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",37, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // LogicalA ::= LogicalA Concat LogicalB 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",37, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // LogicalB ::= ELogical 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",38, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",38, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // E ::= T 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // E ::= E MINUS T 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // E ::= E PLUS T 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // T ::= F 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // T ::= T MOD F 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // T ::= T DIV F 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // T ::= T MULT F 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // F ::= LITERALS 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // DECLARE_FOR ::= TYPES ID ASSIGN E 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FOR",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // DECLARE_S ::= TYPES DECLARE_B 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_S",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARE_S ::= TYPES DECLARE_A 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_S",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARE_A ::= ID ASSIGN E END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_A",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARE_B ::= ID END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_B",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARE_B ::= ID COMMA DECLARE_B 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_B",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // STATEMENT_ID_FUNC_A ::= ASSIGN E END 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT_ID_FUNC_A",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // STATEMENT_ID_FUNC_A ::= FUNC_EXEC_S END 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT_ID_FUNC_A",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // STATEMENT_ID_FUNC_S ::= ID STATEMENT_ID_FUNC_A 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT_ID_FUNC_S",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // ID_FUNC_S ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ID_FUNC_S",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // ID_FUNC_S ::= FUNC_EXEC_S 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ID_FUNC_S",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LogicalOperators ::= NOTEQUAL 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LogicalOperators ::= EQUAL 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LogicalOperators ::= LESSEQUALTHAN 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LogicalOperators ::= GREATERTHAN 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // LogicalOperators ::= LESSTHAN 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Negation ::= 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Negation ::= NOT 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Concat ::= OR 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Concat ::= AND 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= ID ID_FUNC_S 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		java.lang.String id = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.String str = (java.lang.String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Character chr = (java.lang.Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= FLOAT 
            {
              Object RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Number ft = (java.lang.Number)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= DIGIT 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Number dt = (java.lang.Number)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERALS ::= BOOL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		java.lang.Boolean bl = (java.lang.Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              Object RESULT =null;

              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		RESULT = start_val;
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TieParser$parser.done_parsing();
          return CUP$TieParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

