
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun Jun 07 01:30:51 CST 2015
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun Jun 07 01:30:51 CST 2015
  */
public class TieParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TieParser() {super();}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\143\000\002\002\004\000\002\026\003\000\002\026" +
    "\003\000\002\026\003\000\002\026\003\000\002\026\003" +
    "\000\002\016\003\000\002\016\003\000\002\016\003\000" +
    "\002\016\003\000\002\016\003\000\002\016\003\000\002" +
    "\016\006\000\002\025\003\000\002\025\003\000\002\033" +
    "\003\000\002\033\002\000\002\024\003\000\002\024\003" +
    "\000\002\024\003\000\002\024\003\000\002\024\003\000" +
    "\002\024\003\000\002\021\003\000\002\021\005\000\002" +
    "\020\005\000\002\020\005\000\002\020\005\000\002\020" +
    "\003\000\002\017\005\000\002\017\005\000\002\017\003" +
    "\000\002\023\005\000\002\023\003\000\002\022\005\000" +
    "\002\022\003\000\002\002\003\000\002\002\003\000\002" +
    "\002\003\000\002\002\003\000\002\002\003\000\002\032" +
    "\004\000\002\032\006\000\002\031\005\000\002\031\005" +
    "\000\002\031\005\000\002\031\003\000\002\030\005\000" +
    "\002\030\005\000\002\030\003\000\002\041\007\000\002" +
    "\041\006\000\002\042\005\000\002\042\003\000\002\040" +
    "\003\000\002\040\002\000\002\043\005\000\002\043\002" +
    "\000\002\044\006\000\002\044\004\000\002\045\003\000" +
    "\002\045\002\000\002\027\003\000\002\027\003\000\002" +
    "\046\013\000\002\015\010\000\002\003\003\000\002\003" +
    "\003\000\002\003\003\000\002\004\005\000\002\004\002" +
    "\000\002\005\011\000\002\005\002\000\002\006\011\000" +
    "\002\037\005\000\002\037\002\000\002\036\014\000\002" +
    "\010\005\000\002\010\002\000\002\007\011\000\002\011" +
    "\005\000\002\011\005\000\002\012\007\000\002\012\003" +
    "\000\002\034\003\000\002\034\003\000\002\034\003\000" +
    "\002\034\003\000\002\034\003\000\002\034\003\000\002" +
    "\034\003\000\002\035\004\000\002\035\003\000\002\035" +
    "\003\000\002\014\003\000\002\014\002\000\002\013\005" +
    "\000\002\013\005\000\002\013\004" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\003\004\037\005\001\002\000\034\003" +
    "\103\011\015\012\017\013\024\014\023\015\021\016\031" +
    "\021\012\023\032\027\022\035\025\040\uffa2\044\014\001" +
    "\002\000\034\003\026\011\015\012\017\013\024\014\023" +
    "\015\021\016\031\021\012\023\032\027\022\035\025\040" +
    "\uffa2\044\014\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\052\011\uffab\012\uffab\013\uffab\014" +
    "\uffab\015\uffab\016\uffab\021\uffab\022\uffab\023\uffab\024\uffab" +
    "\026\uffab\027\uffab\032\uffab\034\uffab\035\uffab\036\uffab\040" +
    "\uffab\042\uffab\043\uffab\044\uffab\001\002\000\006\011\254" +
    "\041\uffc3\001\002\000\004\063\240\001\002\000\052\011" +
    "\uffa7\012\uffa7\013\uffa7\014\uffa7\015\uffa7\016\uffa7\021\uffa7" +
    "\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027\uffa7\032\uffa7\034" +
    "\uffa7\035\uffa7\036\uffa7\040\uffa7\042\uffa7\043\uffa7\044\uffa7" +
    "\001\002\000\004\041\uffc2\001\002\000\006\020\212\063" +
    "\211\001\002\000\052\011\015\012\017\013\024\014\023" +
    "\015\021\016\031\021\012\022\uffa3\023\032\024\uffa3\026" +
    "\uffa3\027\022\032\uffa3\034\uffa3\035\025\036\uffa3\040\uffa3" +
    "\042\uffa3\043\uffa3\044\014\001\002\000\006\011\000\041" +
    "\000\001\002\000\004\041\152\001\002\000\006\011\ufffd" +
    "\041\ufffd\001\002\000\004\063\130\001\002\000\006\011" +
    "\uffff\041\uffff\001\002\000\006\011\ufffe\041\ufffe\001\002" +
    "\000\004\063\123\001\002\000\034\002\uff9f\011\uffa4\012" +
    "\uffa4\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4\023\uffa4" +
    "\027\uffa4\035\uffa4\040\uffa4\044\uffa4\001\002\000\052\011" +
    "\uffa9\012\uffa9\013\uffa9\014\uffa9\015\uffa9\016\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\032\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\001\002\000\052\011\uffaa\012\uffaa\013\uffaa\014\uffaa\015" +
    "\uffaa\016\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa" +
    "\027\uffaa\032\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\042" +
    "\uffaa\043\uffaa\044\uffaa\001\002\000\006\011\ufffc\041\ufffc" +
    "\001\002\000\004\063\044\001\002\000\004\040\043\001" +
    "\002\000\052\011\uffa5\012\uffa5\013\uffa5\014\uffa5\015\uffa5" +
    "\016\uffa5\021\uffa5\022\uffa5\023\uffa5\024\uffa5\026\uffa5\027" +
    "\uffa5\032\uffa5\034\uffa5\035\uffa5\036\uffa5\040\uffa5\042\uffa5" +
    "\043\uffa5\044\uffa5\001\002\000\052\011\uffa8\012\uffa8\013" +
    "\uffa8\014\uffa8\015\uffa8\016\uffa8\021\uffa8\022\uffa8\023\uffa8" +
    "\024\uffa8\026\uffa8\027\uffa8\032\uffa8\034\uffa8\035\uffa8\036" +
    "\uffa8\040\uffa8\042\uffa8\043\uffa8\044\uffa8\001\002\000\052" +
    "\011\uffad\012\uffad\013\uffad\014\uffad\015\uffad\016\uffad\021" +
    "\uffad\022\uffad\023\uffad\024\uffad\026\uffad\027\uffad\032\uffad" +
    "\034\uffad\035\uffad\036\uffad\040\uffad\042\uffad\043\uffad\044" +
    "\uffad\001\002\000\054\011\uffae\012\uffae\013\uffae\014\uffae" +
    "\015\uffae\016\uffae\021\uffae\022\uffae\023\uffae\024\uffae\026" +
    "\uffae\027\uffae\032\uffae\034\uffae\035\uffae\036\uffae\040\uffae" +
    "\042\uffae\043\uffae\044\uffae\065\041\001\002\000\052\011" +
    "\uffac\012\uffac\013\uffac\014\uffac\015\uffac\016\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac\032\uffac\034" +
    "\uffac\035\uffac\036\uffac\040\uffac\042\uffac\043\uffac\044\uffac" +
    "\001\002\000\004\011\042\001\002\000\054\011\uffb1\012" +
    "\uffb1\013\uffb1\014\uffb1\015\uffb1\016\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\026\uffb1\027\uffb1\032\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\065\uffb1" +
    "\001\002\000\004\002\uffa1\001\002\000\020\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047\063\ufff1\001\002" +
    "\000\040\017\uffd0\045\uffd0\046\uffd0\047\070\050\071\051" +
    "\067\052\uffd0\053\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\064\uffd0\001\002\000\012\017\uffde\052" +
    "\uffde\053\uffde\064\uffde\001\002\000\016\004\ufff2\005\ufff2" +
    "\006\ufff2\007\ufff2\011\ufff2\063\ufff2\001\002\000\016\004" +
    "\115\005\120\006\117\007\116\011\112\063\114\001\002" +
    "\000\010\052\077\053\101\064\076\001\002\000\040\017" +
    "\uffd3\045\uffd3\046\uffd3\047\uffd3\050\uffd3\051\uffd3\052\uffd3" +
    "\053\uffd3\054\uffd3\055\uffd3\056\uffd3\057\uffd3\060\uffd3\061" +
    "\uffd3\064\uffd3\001\002\000\032\017\uffe0\045\060\046\054" +
    "\052\uffe0\053\uffe0\054\064\055\062\056\056\057\061\060" +
    "\057\061\055\064\uffe0\001\002\000\020\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\062\047\063\ufff1\001\002\000" +
    "\020\004\uffeb\005\uffeb\006\uffeb\007\uffeb\011\uffeb\062\uffeb" +
    "\063\uffeb\001\002\000\020\004\uffed\005\uffed\006\uffed\007" +
    "\uffed\011\uffed\062\uffed\063\uffed\001\002\000\020\004\uffec" +
    "\005\uffec\006\uffec\007\uffec\011\uffec\062\uffec\063\uffec\001" +
    "\002\000\020\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1" +
    "\062\047\063\ufff1\001\002\000\020\004\uffee\005\uffee\006" +
    "\uffee\007\uffee\011\uffee\062\uffee\063\uffee\001\002\000\020" +
    "\004\uffef\005\uffef\006\uffef\007\uffef\011\uffef\062\uffef\063" +
    "\uffef\001\002\000\020\004\ufff1\005\ufff1\006\ufff1\007\ufff1" +
    "\011\ufff1\062\047\063\ufff1\001\002\000\020\004\ufff0\005" +
    "\ufff0\006\ufff0\007\ufff0\011\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\012\017\uffe1\052\uffe1\053\uffe1\064\uffe1\001\002\000" +
    "\040\017\uffd2\045\uffd2\046\uffd2\047\070\050\071\051\067" +
    "\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060" +
    "\uffd2\061\uffd2\064\uffd2\001\002\000\020\004\ufff1\005\ufff1" +
    "\006\ufff1\007\ufff1\011\ufff1\062\047\063\ufff1\001\002\000" +
    "\020\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047" +
    "\063\ufff1\001\002\000\020\004\ufff1\005\ufff1\006\ufff1\007" +
    "\ufff1\011\ufff1\062\047\063\ufff1\001\002\000\040\017\uffd5" +
    "\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5\052\uffd5\053" +
    "\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060\uffd5\061\uffd5" +
    "\064\uffd5\001\002\000\040\017\uffd6\045\uffd6\046\uffd6\047" +
    "\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054\uffd6\055\uffd6" +
    "\056\uffd6\057\uffd6\060\uffd6\061\uffd6\064\uffd6\001\002\000" +
    "\040\017\uffd4\045\uffd4\046\uffd4\047\uffd4\050\uffd4\051\uffd4" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\064\uffd4\001\002\000\040\017\uffd1\045\uffd1" +
    "\046\uffd1\047\070\050\071\051\067\052\uffd1\053\uffd1\054" +
    "\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1\061\uffd1\064\uffd1" +
    "\001\002\000\034\003\103\011\015\012\017\013\024\014" +
    "\023\015\021\016\031\021\012\023\032\024\uffa2\027\022" +
    "\035\025\044\014\001\002\000\020\004\ufff4\005\ufff4\006" +
    "\ufff4\007\ufff4\011\ufff4\062\ufff4\063\ufff4\001\002\000\020" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047\063" +
    "\ufff1\001\002\000\020\004\ufff3\005\ufff3\006\ufff3\007\ufff3" +
    "\011\ufff3\062\ufff3\063\ufff3\001\002\000\012\017\uffdf\052" +
    "\uffdf\053\uffdf\064\uffdf\001\002\000\052\011\uffa4\012\uffa4" +
    "\013\uffa4\014\uffa4\015\uffa4\016\uffa4\021\uffa4\022\uffa4\023" +
    "\uffa4\024\uffa4\026\uffa4\027\uffa4\032\uffa4\034\uffa4\035\uffa4" +
    "\036\uffa4\040\uffa4\042\uffa4\043\uffa4\044\uffa4\001\002\000" +
    "\004\024\105\001\002\000\054\011\uffb3\012\uffb3\013\uffb3" +
    "\014\uffb3\015\uffb3\016\uffb3\021\uffb3\022\uffb3\023\uffb3\024" +
    "\uffb3\025\107\026\uffb3\027\uffb3\032\uffb3\034\uffb3\035\uffb3" +
    "\036\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\001\002\000" +
    "\052\011\uffb2\012\uffb2\013\uffb2\014\uffb2\015\uffb2\016\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\001\002\000\034\003\103\011\015\012\017\013" +
    "\024\014\023\015\021\016\031\021\012\023\032\026\uffa2" +
    "\027\022\035\025\044\014\001\002\000\004\026\111\001" +
    "\002\000\052\011\uffb4\012\uffb4\013\uffb4\014\uffb4\015\uffb4" +
    "\016\uffb4\021\uffb4\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027" +
    "\uffb4\032\uffb4\034\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4" +
    "\043\uffb4\044\uffb4\001\002\000\042\017\uffd9\045\uffd9\046" +
    "\uffd9\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9" +
    "\055\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\064\uffd9\065" +
    "\uffd9\001\002\000\040\017\uffd8\045\uffd8\046\uffd8\047\uffd8" +
    "\050\uffd8\051\uffd8\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056" +
    "\uffd8\057\uffd8\060\uffd8\061\uffd8\064\uffd8\001\002\000\020" +
    "\004\ufff1\005\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047\063" +
    "\ufff1\001\002\000\042\017\uffdd\045\uffdd\046\uffdd\047\uffdd" +
    "\050\uffdd\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056" +
    "\uffdd\057\uffdd\060\uffdd\061\uffdd\064\uffdd\065\uffdd\001\002" +
    "\000\042\017\uffda\045\uffda\046\uffda\047\uffda\050\uffda\051" +
    "\uffda\052\uffda\053\uffda\054\uffda\055\uffda\056\uffda\057\uffda" +
    "\060\uffda\061\uffda\064\uffda\065\uffda\001\002\000\042\017" +
    "\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052\uffdb" +
    "\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061" +
    "\uffdb\064\uffdb\065\uffdb\001\002\000\042\017\uffdc\045\uffdc" +
    "\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc\053\uffdc\054" +
    "\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061\uffdc\064\uffdc" +
    "\065\uffdc\001\002\000\010\052\077\053\101\064\122\001" +
    "\002\000\040\017\uffd7\045\uffd7\046\uffd7\047\uffd7\050\uffd7" +
    "\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7\056\uffd7\057" +
    "\uffd7\060\uffd7\061\uffd7\064\uffd7\001\002\000\020\004\ufff1" +
    "\005\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047\063\ufff1\001" +
    "\002\000\010\052\077\053\101\064\125\001\002\000\034" +
    "\003\103\011\015\012\017\013\024\014\023\015\021\016" +
    "\031\021\012\023\032\027\022\035\025\036\uffa2\044\014" +
    "\001\002\000\004\036\127\001\002\000\052\011\uffc0\012" +
    "\uffc0\013\uffc0\014\uffc0\015\uffc0\016\uffc0\021\uffc0\022\uffc0" +
    "\023\uffc0\024\uffc0\026\uffc0\027\uffc0\032\uffc0\034\uffc0\035" +
    "\uffc0\036\uffc0\040\uffc0\042\uffc0\043\uffc0\044\uffc0\001\002" +
    "\000\010\005\134\007\133\011\131\001\002\000\004\064" +
    "\uffbd\001\002\000\004\064\135\001\002\000\004\064\uffbf" +
    "\001\002\000\004\064\uffbe\001\002\000\010\030\uffb9\031" +
    "\uffb9\033\uffb9\001\002\000\010\030\uffbb\031\140\033\141" +
    "\001\002\000\004\030\151\001\002\000\004\063\144\001" +
    "\002\000\034\003\103\011\015\012\017\013\024\014\023" +
    "\015\021\016\031\021\012\023\032\027\022\034\uffa2\035" +
    "\025\044\014\001\002\000\004\034\143\001\002\000\004" +
    "\030\uffbc\001\002\000\010\005\134\007\133\011\131\001" +
    "\002\000\004\064\146\001\002\000\034\003\103\011\015" +
    "\012\017\013\024\014\023\015\021\016\031\021\012\023" +
    "\032\027\022\032\uffa2\035\025\044\014\001\002\000\004" +
    "\032\150\001\002\000\010\030\uffba\031\uffba\033\uffba\001" +
    "\002\000\052\011\uffb8\012\uffb8\013\uffb8\014\uffb8\015\uffb8" +
    "\016\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\026\uffb8\027" +
    "\uffb8\032\uffb8\034\uffb8\035\uffb8\036\uffb8\040\uffb8\042\uffb8" +
    "\043\uffb8\044\uffb8\001\002\000\004\011\153\001\002\000" +
    "\004\063\154\001\002\000\016\012\017\013\024\014\023" +
    "\015\021\016\031\064\uffc4\001\002\000\006\064\uffc5\065" +
    "\205\001\002\000\004\064\161\001\002\000\004\011\160" +
    "\001\002\000\006\064\uffc6\065\uffc6\001\002\000\036\003" +
    "\103\011\015\012\017\013\024\014\023\015\021\016\031" +
    "\021\012\023\032\027\022\035\025\042\uffa2\043\uffa2\044" +
    "\014\001\002\000\006\042\uffc8\043\163\001\002\000\016" +
    "\004\171\005\174\006\173\007\172\010\167\011\166\001" +
    "\002\000\004\042\165\001\002\000\052\011\uffc1\012\uffc1" +
    "\013\uffc1\014\uffc1\015\uffc1\016\uffc1\021\uffc1\022\uffc1\023" +
    "\uffc1\024\uffc1\026\uffc1\027\uffc1\032\uffc1\034\uffc1\035\uffc1" +
    "\036\uffc1\040\uffc1\042\uffc1\043\uffc1\044\uffc1\001\002\000" +
    "\022\017\ufff6\045\ufff6\046\ufff6\047\ufff6\050\ufff6\051\ufff6" +
    "\063\176\064\ufff6\001\002\000\020\017\ufff7\045\ufff7\046" +
    "\ufff7\047\ufff7\050\ufff7\051\ufff7\064\ufff7\001\002\000\004" +
    "\017\175\001\002\000\020\017\ufffb\045\ufffb\046\ufffb\047" +
    "\ufffb\050\ufffb\051\ufffb\064\ufffb\001\002\000\020\017\ufff8" +
    "\045\ufff8\046\ufff8\047\ufff8\050\ufff8\051\ufff8\064\ufff8\001" +
    "\002\000\020\017\ufff9\045\ufff9\046\ufff9\047\ufff9\050\ufff9" +
    "\051\ufff9\064\ufff9\001\002\000\020\017\ufffa\045\ufffa\046" +
    "\ufffa\047\ufffa\050\ufffa\051\ufffa\064\ufffa\001\002\000\004" +
    "\042\uffc9\001\002\000\020\004\115\005\120\006\117\007" +
    "\116\011\112\064\uffca\065\uffca\001\002\000\006\064\uffcc" +
    "\065\uffcc\001\002\000\006\064\203\065\202\001\002\000" +
    "\006\064\uffcb\065\uffcb\001\002\000\014\004\115\005\120" +
    "\006\117\007\116\011\112\001\002\000\020\017\ufff5\045" +
    "\ufff5\046\ufff5\047\ufff5\050\ufff5\051\ufff5\064\ufff5\001\002" +
    "\000\006\064\uffcd\065\uffcd\001\002\000\014\012\017\013" +
    "\024\014\023\015\021\016\031\001\002\000\004\011\207" +
    "\001\002\000\006\064\uffc7\065\uffc7\001\002\000\052\011" +
    "\uffa6\012\uffa6\013\uffa6\014\uffa6\015\uffa6\016\uffa6\021\uffa6" +
    "\022\uffa6\023\uffa6\024\uffa6\026\uffa6\027\uffa6\032\uffa6\034" +
    "\uffa6\035\uffa6\036\uffa6\040\uffa6\042\uffa6\043\uffa6\044\uffa6" +
    "\001\002\000\020\004\115\005\120\006\117\007\116\011" +
    "\112\064\uffca\065\uffca\001\002\000\020\004\171\005\174" +
    "\006\173\007\172\010\167\011\166\063\215\001\002\000" +
    "\020\017\uffea\045\uffea\046\uffea\047\uffea\050\uffea\051\uffea" +
    "\064\uffea\001\002\000\020\017\uffe2\045\uffe2\046\uffe2\047" +
    "\225\050\226\051\224\064\uffe2\001\002\000\020\004\171" +
    "\005\174\006\173\007\172\010\167\011\166\063\215\001" +
    "\002\000\020\017\uffe5\045\uffe5\046\uffe5\047\uffe5\050\uffe5" +
    "\051\uffe5\064\uffe5\001\002\000\010\017\222\045\220\046" +
    "\221\001\002\000\020\004\171\005\174\006\173\007\172" +
    "\010\167\011\166\063\215\001\002\000\020\004\171\005" +
    "\174\006\173\007\172\010\167\011\166\063\215\001\002" +
    "\000\052\011\uffce\012\uffce\013\uffce\014\uffce\015\uffce\016" +
    "\uffce\021\uffce\022\uffce\023\uffce\024\uffce\026\uffce\027\uffce" +
    "\032\uffce\034\uffce\035\uffce\036\uffce\040\uffce\042\uffce\043" +
    "\uffce\044\uffce\001\002\000\020\017\uffe3\045\uffe3\046\uffe3" +
    "\047\225\050\226\051\224\064\uffe3\001\002\000\020\004" +
    "\171\005\174\006\173\007\172\010\167\011\166\063\215" +
    "\001\002\000\020\004\171\005\174\006\173\007\172\010" +
    "\167\011\166\063\215\001\002\000\020\004\171\005\174" +
    "\006\173\007\172\010\167\011\166\063\215\001\002\000" +
    "\020\017\uffe7\045\uffe7\046\uffe7\047\uffe7\050\uffe7\051\uffe7" +
    "\064\uffe7\001\002\000\020\017\uffe8\045\uffe8\046\uffe8\047" +
    "\uffe8\050\uffe8\051\uffe8\064\uffe8\001\002\000\020\017\uffe6" +
    "\045\uffe6\046\uffe6\047\uffe6\050\uffe6\051\uffe6\064\uffe6\001" +
    "\002\000\020\017\uffe4\045\uffe4\046\uffe4\047\225\050\226" +
    "\051\224\064\uffe4\001\002\000\010\045\220\046\221\064" +
    "\234\001\002\000\020\017\uffe9\045\uffe9\046\uffe9\047\uffe9" +
    "\050\uffe9\051\uffe9\064\uffe9\001\002\000\006\064\236\065" +
    "\202\001\002\000\004\017\237\001\002\000\052\011\uffcf" +
    "\012\uffcf\013\uffcf\014\uffcf\015\uffcf\016\uffcf\021\uffcf\022" +
    "\uffcf\023\uffcf\024\uffcf\026\uffcf\027\uffcf\032\uffcf\034\uffcf" +
    "\035\uffcf\036\uffcf\040\uffcf\042\uffcf\043\uffcf\044\uffcf\001" +
    "\002\000\006\011\241\017\uffb6\001\002\000\004\020\252" +
    "\001\002\000\004\017\243\001\002\000\020\004\ufff1\005" +
    "\ufff1\006\ufff1\007\ufff1\011\ufff1\062\047\063\ufff1\001\002" +
    "\000\010\017\245\052\077\053\101\001\002\000\006\011" +
    "\241\064\uffb6\001\002\000\004\064\247\001\002\000\034" +
    "\003\103\011\015\012\017\013\024\014\023\015\021\016" +
    "\031\021\012\022\uffa2\023\032\027\022\035\025\044\014" +
    "\001\002\000\004\022\251\001\002\000\052\011\uffb5\012" +
    "\uffb5\013\uffb5\014\uffb5\015\uffb5\016\uffb5\021\uffb5\022\uffb5" +
    "\023\uffb5\024\uffb5\026\uffb5\027\uffb5\032\uffb5\034\uffb5\035" +
    "\uffb5\036\uffb5\040\uffb5\042\uffb5\043\uffb5\044\uffb5\001\002" +
    "\000\020\004\171\005\174\006\173\007\172\010\167\011" +
    "\166\063\215\001\002\000\012\017\uffb7\045\220\046\221" +
    "\064\uffb7\001\002\000\006\017\255\020\256\001\002\000" +
    "\054\011\uffb0\012\uffb0\013\uffb0\014\uffb0\015\uffb0\016\uffb0" +
    "\021\uffb0\022\uffb0\023\uffb0\024\uffb0\026\uffb0\027\uffb0\032" +
    "\uffb0\034\uffb0\035\uffb0\036\uffb0\040\uffb0\042\uffb0\043\uffb0" +
    "\044\uffb0\065\uffb0\001\002\000\020\004\171\005\174\006" +
    "\173\007\172\010\167\011\166\063\215\001\002\000\010" +
    "\017\260\045\220\046\221\001\002\000\052\011\uffaf\012" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\016\uffaf\021\uffaf\022\uffaf" +
    "\023\uffaf\024\uffaf\026\uffaf\027\uffaf\032\uffaf\034\uffaf\035" +
    "\uffaf\036\uffaf\040\uffaf\042\uffaf\043\uffaf\044\uffaf\001\002" +
    "\000\004\040\262\001\002\000\004\002\uffa0\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\013\005\001\001\000\034\006\026\007" +
    "\037\011\036\012\035\014\260\015\027\026\010\027\017" +
    "\034\033\035\015\036\007\041\012\046\034\001\001\000" +
    "\034\006\026\007\037\011\036\012\035\014\032\015\027" +
    "\026\010\027\017\034\033\035\015\036\007\041\012\046" +
    "\034\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\006\026" +
    "\007\037\011\036\012\035\015\027\026\010\027\017\034" +
    "\207\036\007\041\012\046\034\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\050\023\045\030\052\031\044\032" +
    "\051\033\047\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\002\112\001\001\000\004\025" +
    "\077\001\001\000\002\001\001\000\004\024\062\001\001" +
    "\000\010\031\074\032\051\033\047\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\031\065" +
    "\032\051\033\047\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\023\064\030\052\031\044\032\051\033\047" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\032\073\033\047\001\001\000\006\032\072" +
    "\033\047\001\001\000\006\032\071\033\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\034\006\026\007\037\011\036\012\035\014" +
    "\103\015\027\026\010\027\017\034\033\035\015\036\007" +
    "\041\012\046\034\001\001\000\002\001\001\000\014\023" +
    "\101\030\052\031\044\032\051\033\047\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\010\105\001\001\000\002\001\001\000\034" +
    "\006\026\007\037\011\036\012\035\014\107\015\027\026" +
    "\010\027\017\034\033\035\015\036\007\041\012\046\034" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\016\022\120\023\045\030\052" +
    "\031\044\032\051\033\047\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\025\077\001\001\000\002\001\001\000\016\022\123\023" +
    "\045\030\052\031\044\032\051\033\047\001\001\000\004" +
    "\025\077\001\001\000\034\006\026\007\037\011\036\012" +
    "\035\014\125\015\027\026\010\027\017\034\033\035\015" +
    "\036\007\041\012\046\034\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\003\131\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\135\001\001\000\004\004\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\034\006\026\007\037\011" +
    "\036\012\035\014\141\015\027\026\010\027\017\034\033" +
    "\035\015\036\007\041\012\046\034\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\003\144\001\001\000\002" +
    "\001\001\000\034\006\026\007\037\011\036\012\035\014" +
    "\146\015\027\026\010\027\017\034\033\035\015\036\007" +
    "\041\012\046\034\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\026\156\044\154\045\155\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\006\026\007\037\011\036\012\035\014\161\015" +
    "\027\026\010\027\017\034\033\035\015\036\007\041\012" +
    "\046\034\001\001\000\004\043\163\001\001\000\004\016" +
    "\167\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\002\176\040\177\042\200\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\002\203\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\026\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\002\176\040\234\042" +
    "\200\001\001\000\012\016\212\017\216\020\213\021\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\016" +
    "\212\017\232\020\213\021\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\016\212\020\231\021\215\001" +
    "\001\000\010\016\212\020\222\021\215\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\016\212\021\230\001" +
    "\001\000\006\016\212\021\227\001\001\000\006\016\212" +
    "\021\226\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\037\241\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\022\243\023\045\030\052\031\044\032" +
    "\051\033\047\001\001\000\004\025\077\001\001\000\004" +
    "\037\245\001\001\000\002\001\001\000\034\006\026\007" +
    "\037\011\036\012\035\014\247\015\027\026\010\027\017" +
    "\034\033\035\015\036\007\041\012\046\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\012\016\212\017\252" +
    "\020\213\021\215\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\016\212\017\256\020\213" +
    "\021\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TieParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TieParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TieParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TreeNode AST = new TreeNode();
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
        if (info instanceof String){
            errors++; 
            outputArea.append("("+errors+")> " + message + info + "\n");
        }
        else {
            StringBuffer m = new StringBuffer("Error ");
            if (info instanceof java_cup.runtime.Symbol) 
               m.append( "("+info.toString()+")" );     
            m.append(" : "+message);   
            System.err.println(m);
        }
    }
   
    @Override
    public void report_fatal_error(String message, Object info) {
      report_error(message, info);
      throw new RuntimeException("Fatal Syntax Error");
    }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TieParser$actions {
  private final TieParser parser;

  /** Constructor */
  CUP$TieParser$actions(TieParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TieParser$do_action(
    int                        CUP$TieParser$act_num,
    java_cup.runtime.lr_parser CUP$TieParser$parser,
    java.util.Stack            CUP$TieParser$stack,
    int                        CUP$TieParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TieParser$result;

      /* select the action based on the action number */
      switch (CUP$TieParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // PROGRAM ::= MAIN error 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error Reaching RUN END", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // PROGRAM ::= error PROGRAM_BODY MAINEND 
            {
              TreeNode RESULT =null;
		 parser.report_error("RUN END without RUN", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              TreeNode RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Run", body); parser.AST = RESULT; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PROGRAM_BODY ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PROGRAM_BODY ::= STATEMENTS 
            {
              TreeNode RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statements = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = statements; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // STATEMENTS ::= error 
            {
              TreeNode RESULT =null;
		 parser.report_error("Error in a Statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // STATEMENTS ::= STATEMENT 
            {
              TreeNode RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statement = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Statements", statement); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              TreeNode RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode statements = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode statement = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)statements).addChild(statement); RESULT = statements; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STATEMENT ::= CALL_FUNCTION 
            {
              TreeNode RESULT =null;
		int callfunctionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int callfunctionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode callfunction = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = callfunction; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STATEMENT ::= DECLARE_FUNCTION 
            {
              TreeNode RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode function = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = function; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STATEMENT ::= _SWITCH 
            {
              TreeNode RESULT =null;
		int _switchleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _switchright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _switch = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _switch; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STATEMENT ::= _WHILE 
            {
              TreeNode RESULT =null;
		int _whileleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _whileright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _while = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _while; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STATEMENT ::= _FOR 
            {
              TreeNode RESULT =null;
		int _forleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _forright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _for = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _for; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STATEMENT ::= _IF 
            {
              TreeNode RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _if = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _if; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STATEMENT ::= DECLARE_VARIABLE 
            {
              TreeNode RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode declare = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = declare; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARE_VARIABLE ::= LISTA_IDS 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARE_VARIABLE ::= TYPES ID ASSIGN E END 
            {
              TreeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode("=", new TreeNode(id) , e) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // LISTA_IDS ::= TYPES ID END 
            {
              TreeNode RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		String type = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode(id) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // LISTA_IDS ::= LISTA_IDS COMMA ID 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)li).addChild(new TreeNode(id)); RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // _IF ::= COND PARIZQ LogicalA PARDER PROGRAM_BODY CONDEND _ELSE 
            {
              TreeNode RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode _else = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("con", la, body, _else); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // _ELSE ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _ELSE ::= YET PROGRAM_BODY YETEND 
            {
              TreeNode RESULT =null;
		int yetleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int yetright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object yet = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("yet", body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _FOR ::= REP PARIZQ FOR_ASSIGN END LogicalA END FOR_ASSIGN PARDER PROGRAM_BODY REPEND 
            {
              TreeNode RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).left;
		int repright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		TreeNode fa = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int fa2left = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int fa2right = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode fa2 = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("rep", fa, la, fa2, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // FOR_ASSIGN ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // FOR_ASSIGN ::= ID ASSIGN E 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("=", new TreeNode(id), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // _SWITCH ::= SET PARIZQ SWITCH_LITERALS PARDER CASE DEFAULT SETEND 
            {
              TreeNode RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object set = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode sl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode d = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("set", sl, c, d); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // CASE ::= 
            {
              TreeNode RESULT =null;
		RESULT = new TreeNode("CASES"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // CASE ::= CASE OPT PARIZQ SWITCH_LITERALS PARDER PROGRAM_BODY OPTEND 
            {
              TreeNode RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		TreeNode c = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode sl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode b = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 ((TreeNode)c).addChild( new TreeNode("opt", sl, b) ); RESULT = c; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DEFAULT ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DEFAULT ::= ANY PROGRAM_BODY ANYEND 
            {
              TreeNode RESULT =null;
		int anyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int anyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object any = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("any", body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // SWITCH_LITERALS ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // SWITCH_LITERALS ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(Integer.toString(dt) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCH_LITERALS ::= CHAR 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(Character.toString(ch) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // _WHILE ::= TIL PARIZQ LogicalA PARDER PROGRAM_BODY TILEND 
            {
              TreeNode RESULT =null;
		int tilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object til = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("til", la, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARE_FUNCTION ::= FUNCTION_TYPES ACT ID PARIZQ ARGUMENTS PARDER PROGRAM_BODY RETURN ACTEND 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		TreeNode args = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode body = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode r = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("act", t, new TreeNode(id), args, body, r); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // FUNCTION_TYPES ::= NIL 
            {
              String RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "nil"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // FUNCTION_TYPES ::= TYPES 
            {
              String RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // ARGUMENTS ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // ARGUMENTS ::= ARGUMENT 
            {
              TreeNode RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode args = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = args; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGUMENT ::= TYPES ID 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Arguments", new TreeNode(id, t.toString()) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENT ::= ARGUMENT COMMA TYPES ID 
            {
              TreeNode RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		TreeNode arg = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String t = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)arg).addChild( new TreeNode(id, t.toString()) ); RESULT = arg; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RETURN ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // RETURN ::= RET LITERALS END 
            {
              TreeNode RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode lit = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("ret", lit); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // PARAMS ::= 
            {
              TreeNode RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // PARAMS ::= PARAM 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAM ::= BooleanTypes 
            {
              TreeNode RESULT =null;
		int btleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode bt = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Params", bt); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAM ::= PARAMS COMMA BooleanTypes 
            {
              TreeNode RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int btleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int btright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode bt = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)p).addChild(bt); RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CALL_FUNCTION ::= ID ASSIGN E END 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("=", new TreeNode(id), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // CALL_FUNCTION ::= ID PARIZQ PARAMS PARDER END 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		 RESULT = new TreeNode("Call Function", id, p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // ELogical ::= TLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = tl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // ELogical ::= ELogical MINUS TLogical 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("-", fl, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELogical ::= ELogical PLUS TLogical 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("+", el, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TLogical ::= FLogical 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TLogical ::= TLogical MOD FLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("%", tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TLogical ::= TLogical DIV FLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("/", tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TLogical ::= TLogical MULT FLogical 
            {
              TreeNode RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode tl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode fl = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("*", tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // FLogical ::= Negation PARIZQ LogicalA PARDER 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode la = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 if((Boolean)n){ RESULT = new TreeNode("!", la); }else{ RESULT = la; } 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // FLogical ::= Negation BooleanTypes 
            {
              TreeNode RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Boolean n = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lit = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 if((Boolean)n){ RESULT = new TreeNode("!", lit); }else{ RESULT = lit; } 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // BooleanTypes ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // BooleanTypes ::= CHAR 
            {
              TreeNode RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Character.toString(ch) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BooleanTypes ::= FLOAT 
            {
              TreeNode RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Float fl = (Float)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Float.toString(fl) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BooleanTypes ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int diright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer di = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Integer.toString(di) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BooleanTypes ::= BOOL 
            {
              TreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalA ::= LogicalB 
            {
              TreeNode RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = lb; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalA ::= LogicalA Concat LogicalB 
            {
              TreeNode RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode al = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int concatleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String concat = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(concat, al, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalB ::= ELogical 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = el; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              TreeNode RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode el = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String op = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode lb = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(op ,el, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= T 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E MINUS T 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("-",e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E PLUS T 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("+",e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T ::= F 
            {
              TreeNode RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = f; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T ::= T MOD F 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("%",t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= T DIV F 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("/",t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= T MULT F 
            {
              TreeNode RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		TreeNode t = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode f = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("*",t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F ::= PARIZQ E PARDER 
            {
              TreeNode RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode e = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = e; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= LITERALS 
            {
              TreeNode RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		TreeNode li = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LogicalOperators ::= NOTEQUAL 
            {
              String RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "!="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LogicalOperators ::= EQUAL 
            {
              String RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "=="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              String RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = ">="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LogicalOperators ::= LESSEQUALTHAN 
            {
              String RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "<="; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LogicalOperators ::= GREATERTHAN 
            {
              String RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = ">"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LogicalOperators ::= LESSTHAN 
            {
              String RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "<"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Negation ::= 
            {
              Boolean RESULT =null;
		 RESULT = false; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Negation ::= NOT 
            {
              Boolean RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = true; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Concat ::= OR 
            {
              String RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "or"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Concat ::= AND 
            {
              String RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "and"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERALS ::= ID PARIZQ PARAMS PARDER 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode p = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(id, p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= ID 
            {
              TreeNode RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= STRING 
            {
              TreeNode RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(str); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= CHAR 
            {
              TreeNode RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Character.toString(chr) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= FLOAT 
            {
              TreeNode RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Float ft = (Float)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Float.toString(ft) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= DIGIT 
            {
              TreeNode RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Integer.toString(dt) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERALS ::= BOOL 
            {
              TreeNode RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              String RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "str"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              String RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "sym"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              String RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "bin"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              String RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "dec"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              String RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = "num"; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		TreeNode start_val = (TreeNode)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		RESULT = start_val;
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TieParser$parser.done_parsing();
          return CUP$TieParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

