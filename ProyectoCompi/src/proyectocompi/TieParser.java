
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Mon May 25 19:17:41 CST 2015
//----------------------------------------------------

package proyectocompi;

import java_cup.runtime.*;
import java.io.FileInputStream;
import java.io.InputStream;
import javax.swing.JTextArea;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Mon May 25 19:17:41 CST 2015
  */
public class TieParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public TieParser() {super();}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public TieParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\141\000\002\002\004\000\002\030\003\000\002\030" +
    "\003\000\002\030\003\000\002\030\003\000\002\030\003" +
    "\000\002\031\003\000\002\031\003\000\002\031\003\000" +
    "\002\031\003\000\002\031\003\000\002\031\003\000\002" +
    "\031\006\000\002\036\003\000\002\036\003\000\002\037" +
    "\003\000\002\037\002\000\002\035\003\000\002\035\003" +
    "\000\002\035\003\000\002\035\003\000\002\035\003\000" +
    "\002\035\003\000\002\034\003\000\002\034\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\005\000\002\033" +
    "\003\000\002\032\005\000\002\032\005\000\002\032\003" +
    "\000\002\041\005\000\002\041\003\000\002\040\005\000" +
    "\002\040\003\000\002\025\003\000\002\025\003\000\002" +
    "\025\006\000\002\044\004\000\002\044\006\000\002\043" +
    "\005\000\002\043\005\000\002\043\005\000\002\043\003" +
    "\000\002\042\005\000\002\042\005\000\002\042\003\000" +
    "\002\016\007\000\002\016\006\000\002\017\005\000\002" +
    "\017\003\000\002\015\003\000\002\015\002\000\002\020" +
    "\005\000\002\020\002\000\002\021\006\000\002\021\004" +
    "\000\002\022\003\000\002\022\002\000\002\023\003\000" +
    "\002\023\003\000\002\024\013\000\002\014\010\000\002" +
    "\010\003\000\002\010\003\000\002\010\003\000\002\011" +
    "\005\000\002\011\002\000\002\012\011\000\002\012\002" +
    "\000\002\013\011\000\002\005\005\000\002\005\002\000" +
    "\002\004\014\000\002\007\005\000\002\007\002\000\002" +
    "\006\011\000\002\002\005\000\002\002\005\000\002\003" +
    "\007\000\002\003\003\000\002\045\003\000\002\045\003" +
    "\000\002\045\003\000\002\045\003\000\002\045\003\000" +
    "\002\045\003\000\002\045\003\000\002\046\004\000\002" +
    "\046\003\000\002\046\003\000\002\027\003\000\002\027" +
    "\002\000\002\026\005\000\002\026\005\000\002\026\004" +
    "" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\006\003\004\037\005\001\002\000\034\003" +
    "\117\004\017\005\024\006\023\007\021\010\030\016\015" +
    "\021\012\023\033\027\022\035\025\040\uffa4\044\014\001" +
    "\002\000\034\003\026\004\017\005\024\006\023\007\021" +
    "\010\030\016\015\021\012\023\033\027\022\035\025\040" +
    "\uffa4\044\014\001\002\000\004\002\007\001\002\000\004" +
    "\002\001\001\002\000\052\004\uffad\005\uffad\006\uffad\007" +
    "\uffad\010\uffad\016\uffad\021\uffad\022\uffad\023\uffad\024\uffad" +
    "\026\uffad\027\uffad\032\uffad\034\uffad\035\uffad\036\uffad\040" +
    "\uffad\042\uffad\043\uffad\044\uffad\001\002\000\006\016\254" +
    "\041\uffc5\001\002\000\004\063\240\001\002\000\052\004" +
    "\uffa9\005\uffa9\006\uffa9\007\uffa9\010\uffa9\016\uffa9\021\uffa9" +
    "\022\uffa9\023\uffa9\024\uffa9\026\uffa9\027\uffa9\032\uffa9\034" +
    "\uffa9\035\uffa9\036\uffa9\040\uffa9\042\uffa9\043\uffa9\044\uffa9" +
    "\001\002\000\004\041\uffc4\001\002\000\006\020\212\063" +
    "\211\001\002\000\052\004\017\005\024\006\023\007\021" +
    "\010\030\016\015\021\012\022\uffa5\023\033\024\uffa5\026" +
    "\uffa5\027\022\032\uffa5\034\uffa5\035\025\036\uffa5\040\uffa5" +
    "\042\uffa5\043\uffa5\044\014\001\002\000\006\016\000\041" +
    "\000\001\002\000\004\041\156\001\002\000\006\016\ufffd" +
    "\041\ufffd\001\002\000\004\063\134\001\002\000\006\016" +
    "\uffff\041\uffff\001\002\000\006\016\ufffe\041\ufffe\001\002" +
    "\000\004\063\127\001\002\000\034\002\uffa1\004\uffa6\005" +
    "\uffa6\006\uffa6\007\uffa6\010\uffa6\016\uffa6\021\uffa6\023\uffa6" +
    "\027\uffa6\035\uffa6\040\uffa6\044\uffa6\001\002\000\052\004" +
    "\uffab\005\uffab\006\uffab\007\uffab\010\uffab\016\uffab\021\uffab" +
    "\022\uffab\023\uffab\024\uffab\026\uffab\027\uffab\032\uffab\034" +
    "\uffab\035\uffab\036\uffab\040\uffab\042\uffab\043\uffab\044\uffab" +
    "\001\002\000\006\016\ufffc\041\ufffc\001\002\000\052\004" +
    "\uffac\005\uffac\006\uffac\007\uffac\010\uffac\016\uffac\021\uffac" +
    "\022\uffac\023\uffac\024\uffac\026\uffac\027\uffac\032\uffac\034" +
    "\uffac\035\uffac\036\uffac\040\uffac\042\uffac\043\uffac\044\uffac" +
    "\001\002\000\004\040\126\001\002\000\004\063\043\001" +
    "\002\000\052\004\uffa7\005\uffa7\006\uffa7\007\uffa7\010\uffa7" +
    "\016\uffa7\021\uffa7\022\uffa7\023\uffa7\024\uffa7\026\uffa7\027" +
    "\uffa7\032\uffa7\034\uffa7\035\uffa7\036\uffa7\040\uffa7\042\uffa7" +
    "\043\uffa7\044\uffa7\001\002\000\054\004\uffb0\005\uffb0\006" +
    "\uffb0\007\uffb0\010\uffb0\016\uffb0\021\uffb0\022\uffb0\023\uffb0" +
    "\024\uffb0\026\uffb0\027\uffb0\032\uffb0\034\uffb0\035\uffb0\036" +
    "\uffb0\040\uffb0\042\uffb0\043\uffb0\044\uffb0\065\041\001\002" +
    "\000\052\004\uffaa\005\uffaa\006\uffaa\007\uffaa\010\uffaa\016" +
    "\uffaa\021\uffaa\022\uffaa\023\uffaa\024\uffaa\026\uffaa\027\uffaa" +
    "\032\uffaa\034\uffaa\035\uffaa\036\uffaa\040\uffaa\042\uffaa\043" +
    "\uffaa\044\uffaa\001\002\000\052\004\uffaf\005\uffaf\006\uffaf" +
    "\007\uffaf\010\uffaf\016\uffaf\021\uffaf\022\uffaf\023\uffaf\024" +
    "\uffaf\026\uffaf\027\uffaf\032\uffaf\034\uffaf\035\uffaf\036\uffaf" +
    "\040\uffaf\042\uffaf\043\uffaf\044\uffaf\001\002\000\052\004" +
    "\uffae\005\uffae\006\uffae\007\uffae\010\uffae\016\uffae\021\uffae" +
    "\022\uffae\023\uffae\024\uffae\026\uffae\027\uffae\032\uffae\034" +
    "\uffae\035\uffae\036\uffae\040\uffae\042\uffae\043\uffae\044\uffae" +
    "\001\002\000\004\016\042\001\002\000\054\004\uffb3\005" +
    "\uffb3\006\uffb3\007\uffb3\010\uffb3\016\uffb3\021\uffb3\022\uffb3" +
    "\023\uffb3\024\uffb3\026\uffb3\027\uffb3\032\uffb3\034\uffb3\035" +
    "\uffb3\036\uffb3\040\uffb3\042\uffb3\043\uffb3\044\uffb3\065\uffb3" +
    "\001\002\000\012\011\ufff1\016\ufff1\062\046\063\ufff1\001" +
    "\002\000\040\017\uffd2\045\uffd2\046\uffd2\047\067\050\070" +
    "\051\066\052\uffd2\053\uffd2\054\uffd2\055\uffd2\056\uffd2\057" +
    "\uffd2\060\uffd2\061\uffd2\064\uffd2\001\002\000\012\017\uffde" +
    "\052\uffde\053\uffde\064\uffde\001\002\000\010\011\ufff2\016" +
    "\ufff2\063\ufff2\001\002\000\010\052\102\053\105\064\116" +
    "\001\002\000\010\011\100\016\075\063\077\001\002\000" +
    "\040\017\uffd5\045\uffd5\046\uffd5\047\uffd5\050\uffd5\051\uffd5" +
    "\052\uffd5\053\uffd5\054\uffd5\055\uffd5\056\uffd5\057\uffd5\060" +
    "\uffd5\061\uffd5\064\uffd5\001\002\000\032\017\uffe0\045\057" +
    "\046\053\052\uffe0\053\uffe0\054\063\055\061\056\055\057" +
    "\060\060\056\061\054\064\uffe0\001\002\000\012\011\ufff1" +
    "\016\ufff1\062\046\063\ufff1\001\002\000\012\011\uffeb\016" +
    "\uffeb\062\uffeb\063\uffeb\001\002\000\012\011\uffed\016\uffed" +
    "\062\uffed\063\uffed\001\002\000\012\011\uffec\016\uffec\062" +
    "\uffec\063\uffec\001\002\000\012\011\ufff1\016\ufff1\062\046" +
    "\063\ufff1\001\002\000\012\011\uffee\016\uffee\062\uffee\063" +
    "\uffee\001\002\000\012\011\uffef\016\uffef\062\uffef\063\uffef" +
    "\001\002\000\012\011\ufff1\016\ufff1\062\046\063\ufff1\001" +
    "\002\000\012\011\ufff0\016\ufff0\062\ufff0\063\ufff0\001\002" +
    "\000\012\017\uffe1\052\uffe1\053\uffe1\064\uffe1\001\002\000" +
    "\040\017\uffd4\045\uffd4\046\uffd4\047\067\050\070\051\066" +
    "\052\uffd4\053\uffd4\054\uffd4\055\uffd4\056\uffd4\057\uffd4\060" +
    "\uffd4\061\uffd4\064\uffd4\001\002\000\012\011\ufff1\016\ufff1" +
    "\062\046\063\ufff1\001\002\000\012\011\ufff1\016\ufff1\062" +
    "\046\063\ufff1\001\002\000\012\011\ufff1\016\ufff1\062\046" +
    "\063\ufff1\001\002\000\040\017\uffd7\045\uffd7\046\uffd7\047" +
    "\uffd7\050\uffd7\051\uffd7\052\uffd7\053\uffd7\054\uffd7\055\uffd7" +
    "\056\uffd7\057\uffd7\060\uffd7\061\uffd7\064\uffd7\001\002\000" +
    "\040\017\uffd8\045\uffd8\046\uffd8\047\uffd8\050\uffd8\051\uffd8" +
    "\052\uffd8\053\uffd8\054\uffd8\055\uffd8\056\uffd8\057\uffd8\060" +
    "\uffd8\061\uffd8\064\uffd8\001\002\000\040\017\uffd6\045\uffd6" +
    "\046\uffd6\047\uffd6\050\uffd6\051\uffd6\052\uffd6\053\uffd6\054" +
    "\uffd6\055\uffd6\056\uffd6\057\uffd6\060\uffd6\061\uffd6\064\uffd6" +
    "\001\002\000\040\017\uffd3\045\uffd3\046\uffd3\047\067\050" +
    "\070\051\066\052\uffd3\053\uffd3\054\uffd3\055\uffd3\056\uffd3" +
    "\057\uffd3\060\uffd3\061\uffd3\064\uffd3\001\002\000\042\017" +
    "\uffdc\045\uffdc\046\uffdc\047\uffdc\050\uffdc\051\uffdc\052\uffdc" +
    "\053\uffdc\054\uffdc\055\uffdc\056\uffdc\057\uffdc\060\uffdc\061" +
    "\uffdc\063\107\064\uffdc\001\002\000\040\017\uffda\045\uffda" +
    "\046\uffda\047\uffda\050\uffda\051\uffda\052\uffda\053\uffda\054" +
    "\uffda\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\064\uffda" +
    "\001\002\000\012\011\ufff1\016\ufff1\062\046\063\ufff1\001" +
    "\002\000\040\017\uffdd\045\uffdd\046\uffdd\047\uffdd\050\uffdd" +
    "\051\uffdd\052\uffdd\053\uffdd\054\uffdd\055\uffdd\056\uffdd\057" +
    "\uffdd\060\uffdd\061\uffdd\064\uffdd\001\002\000\010\052\102" +
    "\053\105\064\103\001\002\000\012\011\ufff4\016\ufff4\062" +
    "\ufff4\063\ufff4\001\002\000\040\017\uffd9\045\uffd9\046\uffd9" +
    "\047\uffd9\050\uffd9\051\uffd9\052\uffd9\053\uffd9\054\uffd9\055" +
    "\uffd9\056\uffd9\057\uffd9\060\uffd9\061\uffd9\064\uffd9\001\002" +
    "\000\012\011\ufff1\016\ufff1\062\046\063\ufff1\001\002\000" +
    "\012\011\ufff3\016\ufff3\062\ufff3\063\ufff3\001\002\000\012" +
    "\017\uffdf\052\uffdf\053\uffdf\064\uffdf\001\002\000\010\016" +
    "\110\064\uffcc\065\uffcc\001\002\000\006\064\uffce\065\uffce" +
    "\001\002\000\006\064\114\065\113\001\002\000\006\064" +
    "\uffcd\065\uffcd\001\002\000\004\016\115\001\002\000\040" +
    "\017\uffdb\045\uffdb\046\uffdb\047\uffdb\050\uffdb\051\uffdb\052" +
    "\uffdb\053\uffdb\054\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb" +
    "\061\uffdb\064\uffdb\001\002\000\006\064\uffcf\065\uffcf\001" +
    "\002\000\034\003\117\004\017\005\024\006\023\007\021" +
    "\010\030\016\015\021\012\023\033\024\uffa4\027\022\035" +
    "\025\044\014\001\002\000\052\004\uffa6\005\uffa6\006\uffa6" +
    "\007\uffa6\010\uffa6\016\uffa6\021\uffa6\022\uffa6\023\uffa6\024" +
    "\uffa6\026\uffa6\027\uffa6\032\uffa6\034\uffa6\035\uffa6\036\uffa6" +
    "\040\uffa6\042\uffa6\043\uffa6\044\uffa6\001\002\000\004\024" +
    "\121\001\002\000\054\004\uffb5\005\uffb5\006\uffb5\007\uffb5" +
    "\010\uffb5\016\uffb5\021\uffb5\022\uffb5\023\uffb5\024\uffb5\025" +
    "\123\026\uffb5\027\uffb5\032\uffb5\034\uffb5\035\uffb5\036\uffb5" +
    "\040\uffb5\042\uffb5\043\uffb5\044\uffb5\001\002\000\052\004" +
    "\uffb4\005\uffb4\006\uffb4\007\uffb4\010\uffb4\016\uffb4\021\uffb4" +
    "\022\uffb4\023\uffb4\024\uffb4\026\uffb4\027\uffb4\032\uffb4\034" +
    "\uffb4\035\uffb4\036\uffb4\040\uffb4\042\uffb4\043\uffb4\044\uffb4" +
    "\001\002\000\034\003\117\004\017\005\024\006\023\007" +
    "\021\010\030\016\015\021\012\023\033\026\uffa4\027\022" +
    "\035\025\044\014\001\002\000\004\026\125\001\002\000" +
    "\052\004\uffb6\005\uffb6\006\uffb6\007\uffb6\010\uffb6\016\uffb6" +
    "\021\uffb6\022\uffb6\023\uffb6\024\uffb6\026\uffb6\027\uffb6\032" +
    "\uffb6\034\uffb6\035\uffb6\036\uffb6\040\uffb6\042\uffb6\043\uffb6" +
    "\044\uffb6\001\002\000\004\002\uffa3\001\002\000\012\011" +
    "\ufff1\016\ufff1\062\046\063\ufff1\001\002\000\010\052\102" +
    "\053\105\064\131\001\002\000\034\003\117\004\017\005" +
    "\024\006\023\007\021\010\030\016\015\021\012\023\033" +
    "\027\022\035\025\036\uffa4\044\014\001\002\000\004\036" +
    "\133\001\002\000\052\004\uffc2\005\uffc2\006\uffc2\007\uffc2" +
    "\010\uffc2\016\uffc2\021\uffc2\022\uffc2\023\uffc2\024\uffc2\026" +
    "\uffc2\027\uffc2\032\uffc2\034\uffc2\035\uffc2\036\uffc2\040\uffc2" +
    "\042\uffc2\043\uffc2\044\uffc2\001\002\000\010\012\140\014" +
    "\137\016\135\001\002\000\004\064\uffbf\001\002\000\004" +
    "\064\141\001\002\000\004\064\uffc1\001\002\000\004\064" +
    "\uffc0\001\002\000\010\030\uffbb\031\uffbb\033\uffbb\001\002" +
    "\000\010\030\uffbd\031\144\033\145\001\002\000\004\030" +
    "\155\001\002\000\004\063\150\001\002\000\034\003\117" +
    "\004\017\005\024\006\023\007\021\010\030\016\015\021" +
    "\012\023\033\027\022\034\uffa4\035\025\044\014\001\002" +
    "\000\004\034\147\001\002\000\004\030\uffbe\001\002\000" +
    "\010\012\140\014\137\016\135\001\002\000\004\064\152" +
    "\001\002\000\034\003\117\004\017\005\024\006\023\007" +
    "\021\010\030\016\015\021\012\023\033\027\022\032\uffa4" +
    "\035\025\044\014\001\002\000\004\032\154\001\002\000" +
    "\010\030\uffbc\031\uffbc\033\uffbc\001\002\000\052\004\uffba" +
    "\005\uffba\006\uffba\007\uffba\010\uffba\016\uffba\021\uffba\022" +
    "\uffba\023\uffba\024\uffba\026\uffba\027\uffba\032\uffba\034\uffba" +
    "\035\uffba\036\uffba\040\uffba\042\uffba\043\uffba\044\uffba\001" +
    "\002\000\004\016\157\001\002\000\004\063\160\001\002" +
    "\000\016\004\017\005\024\006\023\007\021\010\030\064" +
    "\uffc6\001\002\000\006\064\uffc7\065\205\001\002\000\004" +
    "\064\165\001\002\000\004\016\164\001\002\000\006\064" +
    "\uffc8\065\uffc8\001\002\000\036\003\117\004\017\005\024" +
    "\006\023\007\021\010\030\016\015\021\012\023\033\027" +
    "\022\035\025\042\uffa4\043\uffa4\044\014\001\002\000\006" +
    "\042\uffca\043\167\001\002\000\016\011\175\012\200\013" +
    "\177\014\176\015\173\016\172\001\002\000\004\042\171" +
    "\001\002\000\052\004\uffc3\005\uffc3\006\uffc3\007\uffc3\010" +
    "\uffc3\016\uffc3\021\uffc3\022\uffc3\023\uffc3\024\uffc3\026\uffc3" +
    "\027\uffc3\032\uffc3\034\uffc3\035\uffc3\036\uffc3\040\uffc3\042" +
    "\uffc3\043\uffc3\044\uffc3\001\002\000\022\017\ufff6\045\ufff6" +
    "\046\ufff6\047\ufff6\050\ufff6\051\ufff6\063\202\064\ufff6\001" +
    "\002\000\020\017\ufff7\045\ufff7\046\ufff7\047\ufff7\050\ufff7" +
    "\051\ufff7\064\ufff7\001\002\000\004\017\201\001\002\000" +
    "\020\017\ufffb\045\ufffb\046\ufffb\047\ufffb\050\ufffb\051\ufffb" +
    "\064\ufffb\001\002\000\020\017\ufff8\045\ufff8\046\ufff8\047" +
    "\ufff8\050\ufff8\051\ufff8\064\ufff8\001\002\000\020\017\ufff9" +
    "\045\ufff9\046\ufff9\047\ufff9\050\ufff9\051\ufff9\064\ufff9\001" +
    "\002\000\020\017\ufffa\045\ufffa\046\ufffa\047\ufffa\050\ufffa" +
    "\051\ufffa\064\ufffa\001\002\000\004\042\uffcb\001\002\000" +
    "\010\016\110\064\uffcc\065\uffcc\001\002\000\006\064\204" +
    "\065\113\001\002\000\020\017\ufff5\045\ufff5\046\ufff5\047" +
    "\ufff5\050\ufff5\051\ufff5\064\ufff5\001\002\000\014\004\017" +
    "\005\024\006\023\007\021\010\030\001\002\000\004\016" +
    "\207\001\002\000\006\064\uffc9\065\uffc9\001\002\000\052" +
    "\004\uffa8\005\uffa8\006\uffa8\007\uffa8\010\uffa8\016\uffa8\021" +
    "\uffa8\022\uffa8\023\uffa8\024\uffa8\026\uffa8\027\uffa8\032\uffa8" +
    "\034\uffa8\035\uffa8\036\uffa8\040\uffa8\042\uffa8\043\uffa8\044" +
    "\uffa8\001\002\000\010\016\110\064\uffcc\065\uffcc\001\002" +
    "\000\020\011\175\012\200\013\177\014\176\015\173\016" +
    "\172\063\215\001\002\000\020\017\uffea\045\uffea\046\uffea" +
    "\047\uffea\050\uffea\051\uffea\064\uffea\001\002\000\020\017" +
    "\uffe2\045\uffe2\046\uffe2\047\225\050\226\051\224\064\uffe2" +
    "\001\002\000\020\011\175\012\200\013\177\014\176\015" +
    "\173\016\172\063\215\001\002\000\020\017\uffe5\045\uffe5" +
    "\046\uffe5\047\uffe5\050\uffe5\051\uffe5\064\uffe5\001\002\000" +
    "\010\017\222\045\220\046\221\001\002\000\020\011\175" +
    "\012\200\013\177\014\176\015\173\016\172\063\215\001" +
    "\002\000\020\011\175\012\200\013\177\014\176\015\173" +
    "\016\172\063\215\001\002\000\052\004\uffd0\005\uffd0\006" +
    "\uffd0\007\uffd0\010\uffd0\016\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\026\uffd0\027\uffd0\032\uffd0\034\uffd0\035\uffd0\036" +
    "\uffd0\040\uffd0\042\uffd0\043\uffd0\044\uffd0\001\002\000\020" +
    "\017\uffe3\045\uffe3\046\uffe3\047\225\050\226\051\224\064" +
    "\uffe3\001\002\000\020\011\175\012\200\013\177\014\176" +
    "\015\173\016\172\063\215\001\002\000\020\011\175\012" +
    "\200\013\177\014\176\015\173\016\172\063\215\001\002" +
    "\000\020\011\175\012\200\013\177\014\176\015\173\016" +
    "\172\063\215\001\002\000\020\017\uffe7\045\uffe7\046\uffe7" +
    "\047\uffe7\050\uffe7\051\uffe7\064\uffe7\001\002\000\020\017" +
    "\uffe8\045\uffe8\046\uffe8\047\uffe8\050\uffe8\051\uffe8\064\uffe8" +
    "\001\002\000\020\017\uffe6\045\uffe6\046\uffe6\047\uffe6\050" +
    "\uffe6\051\uffe6\064\uffe6\001\002\000\020\017\uffe4\045\uffe4" +
    "\046\uffe4\047\225\050\226\051\224\064\uffe4\001\002\000" +
    "\010\045\220\046\221\064\234\001\002\000\020\017\uffe9" +
    "\045\uffe9\046\uffe9\047\uffe9\050\uffe9\051\uffe9\064\uffe9\001" +
    "\002\000\006\064\236\065\113\001\002\000\004\017\237" +
    "\001\002\000\052\004\uffd1\005\uffd1\006\uffd1\007\uffd1\010" +
    "\uffd1\016\uffd1\021\uffd1\022\uffd1\023\uffd1\024\uffd1\026\uffd1" +
    "\027\uffd1\032\uffd1\034\uffd1\035\uffd1\036\uffd1\040\uffd1\042" +
    "\uffd1\043\uffd1\044\uffd1\001\002\000\006\016\241\017\uffb8" +
    "\001\002\000\004\020\252\001\002\000\004\017\243\001" +
    "\002\000\012\011\ufff1\016\ufff1\062\046\063\ufff1\001\002" +
    "\000\010\017\245\052\102\053\105\001\002\000\006\016" +
    "\241\064\uffb8\001\002\000\004\064\247\001\002\000\034" +
    "\003\117\004\017\005\024\006\023\007\021\010\030\016" +
    "\015\021\012\022\uffa4\023\033\027\022\035\025\044\014" +
    "\001\002\000\004\022\251\001\002\000\052\004\uffb7\005" +
    "\uffb7\006\uffb7\007\uffb7\010\uffb7\016\uffb7\021\uffb7\022\uffb7" +
    "\023\uffb7\024\uffb7\026\uffb7\027\uffb7\032\uffb7\034\uffb7\035" +
    "\uffb7\036\uffb7\040\uffb7\042\uffb7\043\uffb7\044\uffb7\001\002" +
    "\000\020\011\175\012\200\013\177\014\176\015\173\016" +
    "\172\063\215\001\002\000\012\017\uffb9\045\220\046\221" +
    "\064\uffb9\001\002\000\006\017\255\020\256\001\002\000" +
    "\054\004\uffb2\005\uffb2\006\uffb2\007\uffb2\010\uffb2\016\uffb2" +
    "\021\uffb2\022\uffb2\023\uffb2\024\uffb2\026\uffb2\027\uffb2\032" +
    "\uffb2\034\uffb2\035\uffb2\036\uffb2\040\uffb2\042\uffb2\043\uffb2" +
    "\044\uffb2\065\uffb2\001\002\000\020\011\175\012\200\013" +
    "\177\014\176\015\173\016\172\063\215\001\002\000\010" +
    "\017\260\045\220\046\221\001\002\000\052\004\uffb1\005" +
    "\uffb1\006\uffb1\007\uffb1\010\uffb1\016\uffb1\021\uffb1\022\uffb1" +
    "\023\uffb1\024\uffb1\026\uffb1\027\uffb1\032\uffb1\034\uffb1\035" +
    "\uffb1\036\uffb1\040\uffb1\042\uffb1\043\uffb1\044\uffb1\001\002" +
    "\000\004\040\262\001\002\000\004\002\uffa2\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\260\000\004\026\005\001\001\000\034\002\034\003" +
    "\036\004\007\006\037\013\026\014\030\016\012\023\017" +
    "\024\035\027\260\030\010\045\033\046\015\001\001\000" +
    "\034\002\034\003\036\004\007\006\037\013\026\014\030" +
    "\016\012\023\017\024\035\027\031\030\010\045\033\046" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\002\034" +
    "\003\036\004\007\006\037\013\026\014\030\016\012\023" +
    "\017\024\035\030\010\045\207\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\016" +
    "\037\047\040\046\041\044\042\051\043\043\044\050\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\036\103\001\001\000\004\025\075\001\001\000" +
    "\002\001\001\000\004\035\061\001\001\000\010\037\047" +
    "\043\073\044\050\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\037\047\043\064\044\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\037" +
    "\047\041\063\042\051\043\043\044\050\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\037" +
    "\047\044\072\001\001\000\006\037\047\044\071\001\001" +
    "\000\006\037\047\044\070\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\037\047\040\100\041" +
    "\044\042\051\043\043\044\050\001\001\000\002\001\001" +
    "\000\004\036\103\001\001\000\002\001\001\000\002\001" +
    "\001\000\014\037\047\041\105\042\051\043\043\044\050" +
    "\001\001\000\002\001\001\000\002\001\001\000\006\015" +
    "\110\017\111\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\034\002\034\003\036\004\007\006\037" +
    "\013\026\014\030\016\012\023\017\024\035\027\117\030" +
    "\010\045\033\046\015\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\007\121\001\001\000\002\001\001\000" +
    "\034\002\034\003\036\004\007\006\037\013\026\014\030" +
    "\016\012\023\017\024\035\027\123\030\010\045\033\046" +
    "\015\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\016\037\047\040\127\041\044\042\051\043" +
    "\043\044\050\001\001\000\004\036\103\001\001\000\034" +
    "\002\034\003\036\004\007\006\037\013\026\014\030\016" +
    "\012\023\017\024\035\027\131\030\010\045\033\046\015" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\010" +
    "\135\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\012\141\001\001\000" +
    "\004\011\142\001\001\000\002\001\001\000\002\001\001" +
    "\000\034\002\034\003\036\004\007\006\037\013\026\014" +
    "\030\016\012\023\017\024\035\027\145\030\010\045\033" +
    "\046\015\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\150\001\001\000\002\001\001\000\034\002\034" +
    "\003\036\004\007\006\037\013\026\014\030\016\012\023" +
    "\017\024\035\027\152\030\010\045\033\046\015\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\021\160\022\161" +
    "\030\162\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\034\002\034\003\036" +
    "\004\007\006\037\013\026\014\030\016\012\023\017\024" +
    "\035\027\165\030\010\045\033\046\015\001\001\000\004" +
    "\020\167\001\001\000\004\031\173\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\015\202\017\111\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\030\205\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\015\234\017\111\001" +
    "\001\000\012\031\212\032\216\033\213\034\215\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\031\212\032" +
    "\232\033\213\034\215\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\031\212\033\231\034\215\001\001\000" +
    "\010\031\212\033\222\034\215\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\031\212\034\230\001\001\000" +
    "\006\031\212\034\227\001\001\000\006\031\212\034\226" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\241\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\037\047\040\243\041\044\042\051\043\043\044" +
    "\050\001\001\000\004\036\103\001\001\000\004\005\245" +
    "\001\001\000\002\001\001\000\034\002\034\003\036\004" +
    "\007\006\037\013\026\014\030\016\012\023\017\024\035" +
    "\027\247\030\010\045\033\046\015\001\001\000\002\001" +
    "\001\000\002\001\001\000\012\031\212\032\252\033\213" +
    "\034\215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\012\031\212\032\256\033\213\034\215" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$TieParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$TieParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$TieParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    
    public TreeNode AST = new TreeNode();
    public JTextArea outputArea;
    public  int errors = 0;
    
    @Override
    public void syntax_error(Symbol s){
        report_error("Syntax Error: Unexpected Token "+s.value+" at Line "+(s.left+1)+" Column "+(s.right+1), "" );
    }

    @Override
    public void report_error(String message, Object info) {
    if (info instanceof String){
	errors++; 
        outputArea.append("("+errors+")> " + message + info + "\n");
    }
    else {
    	StringBuffer m = new StringBuffer("Error ");
    	if (info instanceof java_cup.runtime.Symbol) 
     	   m.append( "("+info.toString()+")" );     
    	m.append(" : "+message);   
    	System.err.println(m);
    }
  }
   
  @Override
  public void report_fatal_error(String message, Object info) {
    report_error(message, info);
    throw new RuntimeException("Fatal Syntax Error");
  }

    public void setOutput(JTextArea out){
        this.outputArea = out;
    }


}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$TieParser$actions {
  private final TieParser parser;

  /** Constructor */
  CUP$TieParser$actions(TieParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$TieParser$do_action(
    int                        CUP$TieParser$act_num,
    java_cup.runtime.lr_parser CUP$TieParser$parser,
    java.util.Stack            CUP$TieParser$stack,
    int                        CUP$TieParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$TieParser$result;

      /* select the action based on the action number */
      switch (CUP$TieParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // PROGRAM ::= MAIN error 
            {
              Object RESULT =null;
		 parser.report_error("Error Reaching RUN END", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // PROGRAM ::= error PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;
		 parser.report_error("RUN END without RUN", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // PROGRAM ::= MAIN PROGRAM_BODY MAINEND 
            {
              Object RESULT =null;
		int mainleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int mainright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object main = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 parser.AST = new TreeNode(main.toString(), body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM",20, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // PROGRAM_BODY ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // PROGRAM_BODY ::= STATEMENTS 
            {
              Object RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = statements; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PROGRAM_BODY",21, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // STATEMENTS ::= error 
            {
              Object RESULT =null;
		 parser.report_error("Error in a Statement", ""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // STATEMENTS ::= STATEMENT 
            {
              Object RESULT =null;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Statements", statement); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // STATEMENTS ::= STATEMENTS STATEMENT 
            {
              Object RESULT =null;
		int statementsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int statementsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object statements = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int statementleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int statementright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object statement = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)statements).addChild(statement); RESULT = statements; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENTS",36, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // STATEMENT ::= CALL_FUNCTION 
            {
              Object RESULT =null;
		int callfunctionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int callfunctionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object callfunction = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = callfunction; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // STATEMENT ::= DECLARE_FUNCTION 
            {
              Object RESULT =null;
		int functionleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int functionright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object function = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = function; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // STATEMENT ::= _SWITCH 
            {
              Object RESULT =null;
		int _switchleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _switchright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object _switch = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _switch; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // STATEMENT ::= _WHILE 
            {
              Object RESULT =null;
		int _whileleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _whileright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object _while = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _while; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // STATEMENT ::= _FOR 
            {
              Object RESULT =null;
		int _forleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _forright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object _for = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _for; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // STATEMENT ::= _IF 
            {
              Object RESULT =null;
		int _ifleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _ifright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object _if = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = _if; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // STATEMENT ::= DECLARE_VARIABLE 
            {
              Object RESULT =null;
		int declareleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int declareright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object declare = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = declare; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("STATEMENT",35, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARE_VARIABLE ::= LISTA_IDS 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARE_VARIABLE ::= TYPES ID ASSIGN E END 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode(a.toString(), new TreeNode(id.toString()) , e) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_VARIABLE",1, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // LISTA_IDS ::= TYPES ID END 
            {
              Object RESULT =null;
		int typeleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int typeright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object type = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode("Declare ID", type.toString(), new TreeNode(id.toString()) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // LISTA_IDS ::= LISTA_IDS COMMA ID 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)li).addChild(new TreeNode(id.toString())); RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LISTA_IDS",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // _IF ::= COND PARIZQ LogicalA PARDER PROGRAM_BODY CONDEND _ELSE 
            {
              Object RESULT =null;
		int condleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int condright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object cond = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int _elseleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int _elseright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object _else = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(cond.toString(), la, _else); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_IF",4, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // _ELSE ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // _ELSE ::= YET PROGRAM_BODY YETEND 
            {
              Object RESULT =null;
		int yetleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int yetright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object yet = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(yet.toString(), body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_ELSE",5, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // _FOR ::= REP PARIZQ FOR_ASSIGN END LogicalA END FOR_ASSIGN PARDER PROGRAM_BODY REPEND 
            {
              Object RESULT =null;
		int repleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).left;
		int repright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).right;
		Object rep = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)).value;
		int faleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int faright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		Object fa = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int fa2left = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int fa2right = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object fa2 = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(rep.toString(), fa, la, fa2, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_FOR",2, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-9)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // FOR_ASSIGN ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // FOR_ASSIGN ::= ID ASSIGN E 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(a.toString(), new TreeNode(id.toString()), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FOR_ASSIGN",3, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // _SWITCH ::= SET PARIZQ SWITCH_LITERALS PARDER CASE DEFAULT SETEND 
            {
              Object RESULT =null;
		int setleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int setright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object set = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(set.toString(), sl, c, d); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_SWITCH",9, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // CASE ::= 
            {
              Object RESULT =null;
		RESULT = new TreeNode("CASES"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // CASE ::= CASE OPT PARIZQ SWITCH_LITERALS PARDER PROGRAM_BODY OPTEND 
            {
              Object RESULT =null;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int optleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int optright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object opt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int slleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int slright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object sl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 ((TreeNode)c).addChild( new TreeNode(opt.toString(), sl, b) ); RESULT = c; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CASE",8, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DEFAULT ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DEFAULT ::= ANY PROGRAM_BODY ANYEND 
            {
              Object RESULT =null;
		int anyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int anyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object any = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(any.toString(), body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DEFAULT",7, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // SWITCH_LITERALS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // SWITCH_LITERALS ::= DIGIT 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(Integer.toString(dt) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // SWITCH_LITERALS ::= CHAR 
            {
              Object RESULT =null;
		int chleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character ch = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(Character.toString(ch) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("SWITCH_LITERALS",6, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // _WHILE ::= TIL PARIZQ LogicalA PARDER PROGRAM_BODY TILEND 
            {
              Object RESULT =null;
		int tilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).left;
		int tilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).right;
		Object til = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(til.toString(), la, body); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("_WHILE",10, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-5)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARE_FUNCTION ::= FUNCTION_TYPES ACT ID PARIZQ ARGUMENTS PARDER PROGRAM_BODY RETURN ACTEND 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)).value;
		int actleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).left;
		int actright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).right;
		Object act = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-7)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-6)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int bodyleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int bodyright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object body = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int rleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object r = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(act.toString(), t.toString(), new TreeNode(id.toString()), args, body, r); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("DECLARE_FUNCTION",18, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-8)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // FUNCTION_TYPES ::= NIL 
            {
              Object RESULT =null;
		int nilleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int nilright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object nil = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(nil.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // FUNCTION_TYPES ::= TYPES 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FUNCTION_TYPES",17, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // ARGUMENTS ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // ARGUMENTS ::= ARGUMENT 
            {
              Object RESULT =null;
		int argsleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object args = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = args; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENTS",16, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // ARGUMENT ::= TYPES ID 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Arguments", new TreeNode(id.toString(), t.toString()) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARGUMENT ::= ARGUMENT COMMA TYPES ID 
            {
              Object RESULT =null;
		int argleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int argright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object arg = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)arg).addChild( new TreeNode(id.toString(), t.toString()) ); RESULT = arg; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ARGUMENT",15, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // RETURN ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // RETURN ::= RET LITERALS END 
            {
              Object RESULT =null;
		int retleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int retright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object ret = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(ret.toString(), lit); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("RETURN",14, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // PARAMS ::= 
            {
              Object RESULT =null;
		 RESULT = new TreeNode(""); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // PARAMS ::= PARAM 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAMS",11, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // PARAM ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("Params", new TreeNode(id.toString())); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PARAM ::= PARAMS COMMA ID 
            {
              Object RESULT =null;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object c = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 ((TreeNode)p).addChild(new TreeNode(id.toString())); RESULT = p; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("PARAM",13, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CALL_FUNCTION ::= ID ASSIGN E END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object a = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(a.toString(), new TreeNode(id.toString()), e); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CALL_FUNCTION ::= ID PARIZQ PARAMS PARDER END 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		 RESULT = new TreeNode(id.toString(), p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("CALL_FUNCTION",12, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-4)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // ELogical ::= TLogical 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = tl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // ELogical ::= ELogical MINUS TLogical 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(), fl, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // ELogical ::= ELogical PLUS TLogical 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(p.toString(), el, tl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("ELogical",32, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TLogical ::= FLogical 
            {
              Object RESULT =null;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = fl; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TLogical ::= TLogical MOD FLogical 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(), tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TLogical ::= TLogical DIV FLogical 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(d.toString(), tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TLogical ::= TLogical MULT FLogical 
            {
              Object RESULT =null;
		int tlleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tlright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object tl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int flleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int flright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object fl = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(), tl, fl); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TLogical",33, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // FLogical ::= Negation PARIZQ LogicalA PARDER 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int laleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int laright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object la = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 if((Boolean)n){ RESULT = new TreeNode("!", la); }else{ RESULT = la; } 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // FLogical ::= Negation BooleanTypes 
            {
              Object RESULT =null;
		int nleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int nright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object n = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int litleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int litright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lit = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 if((Boolean)n){ RESULT = new TreeNode("!", lit); }else{ RESULT = lit; } 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("FLogical",34, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // BooleanTypes ::= ID PARIZQ PARAMS PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(id.toString(), p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // BooleanTypes ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // BooleanTypes ::= BOOL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("BooleanTypes",19, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LogicalA ::= LogicalB 
            {
              Object RESULT =null;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = lb; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LogicalA ::= LogicalA Concat LogicalB 
            {
              Object RESULT =null;
		int alleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int alright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object al = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int concatleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int concatright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object concat = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(concat.toString(), al, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalA",30, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LogicalB ::= ELogical 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = el; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // LogicalB ::= ELogical LogicalOperators LogicalB 
            {
              Object RESULT =null;
		int elleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int elright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object el = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int lbleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int lbright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lb = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(op.toString(), el, lb); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalB",31, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // E ::= T 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = t; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // E ::= E MINUS T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(),e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // E ::= E PLUS T 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(p.toString(),e,t); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("E",24, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // T ::= F 
            {
              Object RESULT =null;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = f; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // T ::= T MOD F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(),t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // T ::= T DIV F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object d = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(d.toString(),t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // T ::= T MULT F 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)).value;
		int mleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		int fleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int fright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object f = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(m.toString(),t,f); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("T",25, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // F ::= PARIZQ E PARDER 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = e; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-2)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // F ::= LITERALS 
            {
              Object RESULT =null;
		int lileft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int liright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object li = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = li; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("F",26, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // LogicalOperators ::= NOTEQUAL 
            {
              Object RESULT =null;
		int neleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int neright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object ne = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = ne; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // LogicalOperators ::= EQUAL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = e; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // LogicalOperators ::= GREATEREQUALTHAN 
            {
              Object RESULT =null;
		int getleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int getright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object get = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = get; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // LogicalOperators ::= LESSEQUALTHAN 
            {
              Object RESULT =null;
		int letleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int letright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object let = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = let; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // LogicalOperators ::= GREATERTHAN 
            {
              Object RESULT =null;
		int gtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int gtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object gt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = gt; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // LogicalOperators ::= LESSTHAN 
            {
              Object RESULT =null;
		int ltleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ltright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object lt = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = lt; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LogicalOperators",27, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // Negation ::= 
            {
              Object RESULT =null;
		 RESULT = false; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Negation ::= NOT 
            {
              Object RESULT =null;
		int notleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int notright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object not = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = true; 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Negation",29, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Concat ::= OR 
            {
              Object RESULT =null;
		int orleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int orright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object or = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(or.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Concat ::= AND 
            {
              Object RESULT =null;
		int andleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int andright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object and = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(and.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("Concat",28, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // LITERALS ::= ID PARIZQ PARAMS PARDER 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object p = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		 RESULT = new TreeNode(id.toString(), p); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-3)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // LITERALS ::= ID 
            {
              Object RESULT =null;
		int idleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int idright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String id = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(id.toString()); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // LITERALS ::= STRING 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		String str = (String)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(str); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // LITERALS ::= CHAR 
            {
              Object RESULT =null;
		int chrleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int chrright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Character chr = (Character)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Character.toString(chr) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // LITERALS ::= FLOAT 
            {
              Object RESULT =null;
		int ftleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int ftright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Float ft = (Float)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Float.toString(ft) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // LITERALS ::= DIGIT 
            {
              Object RESULT =null;
		int dtleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int dtright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Integer dt = (Integer)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Integer.toString(dt) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // LITERALS ::= BOOL 
            {
              Object RESULT =null;
		int blleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int blright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Boolean bl = (Boolean)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode( Boolean.toString(bl) ); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("LITERALS",23, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // TYPES ::= STR 
            {
              Object RESULT =null;
		int strleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int strright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object str = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("str"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // TYPES ::= SYM 
            {
              Object RESULT =null;
		int symleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int symright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object sym = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode("sym"); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // TYPES ::= BIN 
            {
              Object RESULT =null;
		int binleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int binright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object bin = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(bin); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // TYPES ::= DEC 
            {
              Object RESULT =null;
		int decleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int decright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object dec = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(dec); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // TYPES ::= NUM 
            {
              Object RESULT =null;
		int numleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).left;
		int numright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()).right;
		Object num = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.peek()).value;
		 RESULT = new TreeNode(num); 
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("TYPES",22, ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          return CUP$TieParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= PROGRAM EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)).value;
		RESULT = start_val;
              CUP$TieParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$TieParser$stack.elementAt(CUP$TieParser$top-1)), ((java_cup.runtime.Symbol)CUP$TieParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$TieParser$parser.done_parsing();
          return CUP$TieParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

