/* The following code was generated by JFlex 1.6.0 */

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.0
 * from the specification file <tt>LenguajeCompi.flex</tt>
 */
class LenguajeCompi {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int COMMENTS = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0,  0,  1, 1
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\20\1\13\1\14\1\14\1\14\22\0\1\14\1\51\1\0"+
    "\1\53\1\0\1\47\1\0\1\12\1\15\1\21\1\22\1\46\1\52"+
    "\1\40\1\16\1\23\12\1\2\0\1\50\1\25\1\41\2\0\4\24"+
    "\1\42\7\24\1\44\15\24\1\54\1\0\1\55\1\0\1\24\1\0"+
    "\1\7\1\30\1\33\1\32\1\5\1\6\1\24\1\45\1\31\2\24"+
    "\1\10\1\27\1\26\1\37\1\36\1\24\1\3\1\11\1\2\1\4"+
    "\2\24\1\43\1\34\1\24\1\0\1\17\1\0\1\35\6\0\1\14"+
    "\32\0\1\14\u15df\0\1\14\u097f\0\13\14\35\0\1\14\1\14\5\0"+
    "\1\14\57\0\1\14\u0fa0\0\1\14\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\ud00f\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\5\4\1\1\1\5\1\6"+
    "\1\7\1\3\1\10\1\11\1\12\1\13\1\3\4\4"+
    "\1\14\1\3\1\15\1\16\1\17\1\20\1\21\1\3"+
    "\1\22\1\1\1\23\1\24\3\25\1\0\10\4\2\0"+
    "\1\4\10\0\1\26\6\4\1\27\2\4\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\4\1\37\1\40"+
    "\1\41\1\4\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\11\0\1\50\1\51\1\52\1\4\1\53\1\54\1\55"+
    "\1\56\1\57\1\36\1\60\1\0\1\61\1\62\1\63"+
    "\1\64\1\0\1\65\1\66\1\67\1\4\2\0\1\4"+
    "\2\0\1\4\2\0\1\4\2\0\1\4\2\0\1\4"+
    "\1\70\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\71\1\72";

  private static int [] zzUnpackAction() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\56\0\134\0\212\0\270\0\346\0\u0114\0\u0142"+
    "\0\u0170\0\u019e\0\u01cc\0\u01fa\0\u0228\0\134\0\u0256\0\134"+
    "\0\134\0\u0284\0\u02b2\0\u02e0\0\u030e\0\u033c\0\u036a\0\u0398"+
    "\0\134\0\u03c6\0\u03f4\0\u0422\0\134\0\134\0\u0450\0\u047e"+
    "\0\134\0\u04ac\0\134\0\134\0\134\0\u04da\0\u0508\0\u0536"+
    "\0\u0564\0\u0592\0\u05c0\0\u05ee\0\u061c\0\u064a\0\u0678\0\u06a6"+
    "\0\u06d4\0\u0702\0\u0256\0\u0730\0\u075e\0\u078c\0\u07ba\0\u07e8"+
    "\0\u0816\0\u0844\0\u0872\0\134\0\u08a0\0\u08ce\0\u08fc\0\u092a"+
    "\0\u0958\0\u0986\0\u0114\0\u09b4\0\u09e2\0\134\0\134\0\134"+
    "\0\134\0\134\0\134\0\u0a10\0\u0a3e\0\u0114\0\u0114\0\u0114"+
    "\0\u0a6c\0\u0114\0\u0114\0\u0114\0\u0114\0\u0114\0\134\0\u0a9a"+
    "\0\u0ac8\0\u0af6\0\u0b24\0\u0b52\0\u0b80\0\u0bae\0\u0bdc\0\u0c0a"+
    "\0\u0114\0\u0114\0\u0114\0\u0c38\0\u0114\0\u0114\0\u0114\0\u0114"+
    "\0\u0114\0\134\0\u0114\0\u0c66\0\134\0\134\0\134\0\134"+
    "\0\u0c94\0\134\0\134\0\134\0\u0cc2\0\u0cf0\0\u0d1e\0\u0d4c"+
    "\0\u0d7a\0\u0da8\0\u0dd6\0\u0e04\0\u0e32\0\u0e60\0\u0e8e\0\u0ebc"+
    "\0\u0eea\0\u0f18\0\u0f46\0\u0f74\0\134\0\u0fa2\0\u0fd0\0\u0ffe"+
    "\0\u102c\0\u105a\0\u1088\0\u10b6\0\u0114\0\134";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\1\4\1\5\1\6\2\7\1\10\1\11\1\7"+
    "\1\12\1\13\2\14\1\15\1\16\1\17\1\14\1\20"+
    "\1\21\1\22\1\7\1\23\1\24\1\7\1\25\1\7"+
    "\1\26\1\27\1\30\1\31\1\7\1\32\1\33\1\34"+
    "\4\7\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\13\45\2\46\2\45\2\46\1\45\1\47\33\45"+
    "\57\0\1\4\14\0\1\50\40\0\2\7\1\51\6\7"+
    "\5\0\1\7\4\0\1\7\1\0\3\7\1\52\3\7"+
    "\1\0\2\7\2\0\4\7\11\0\4\7\1\53\4\7"+
    "\5\0\1\7\4\0\1\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\11\0\11\7\5\0\1\7\4\0\1\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\6\7"+
    "\1\54\2\7\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\11\7\5\0\1\7"+
    "\4\0\1\7\1\0\1\55\4\7\1\56\1\7\1\0"+
    "\2\7\2\0\4\7\11\0\4\7\1\57\4\7\5\0"+
    "\1\7\4\0\1\7\1\0\6\7\1\60\1\0\2\7"+
    "\2\0\4\7\10\0\56\61\13\0\2\14\2\0\2\14"+
    "\53\0\1\62\40\0\11\7\1\0\2\14\2\0\1\63"+
    "\1\14\3\0\1\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\12\0\1\64\1\65\3\0\1\66\1\0\1\67"+
    "\20\0\1\70\1\71\1\72\2\0\1\73\43\0\1\74"+
    "\31\0\3\7\1\75\5\7\5\0\1\7\4\0\1\7"+
    "\1\0\3\7\1\76\3\7\1\0\2\7\2\0\4\7"+
    "\11\0\11\7\5\0\1\7\4\0\1\7\1\0\3\7"+
    "\1\77\3\7\1\0\2\7\2\0\4\7\11\0\4\7"+
    "\1\100\4\7\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\11\0\11\7\5\0\1\7"+
    "\4\0\1\7\1\0\7\7\1\0\1\7\1\101\2\0"+
    "\4\7\11\0\4\7\1\102\4\7\5\0\1\7\4\0"+
    "\1\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\2\7\1\103\1\104\5\7\5\0\1\7\4\0\1\7"+
    "\1\0\7\7\1\0\1\105\1\7\2\0\4\7\51\0"+
    "\1\106\41\0\1\107\55\0\1\110\55\0\1\111\52\0"+
    "\1\112\46\0\2\46\2\0\2\46\110\0\1\113\3\0"+
    "\1\114\14\0\1\114\4\0\1\114\33\0\3\7\1\115"+
    "\5\7\5\0\1\7\4\0\1\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\7\7\1\116\1\7\5\0"+
    "\1\7\4\0\1\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\117\7\7\5\0\1\7\4\0"+
    "\1\7\1\0\7\7\1\0\1\120\1\7\2\0\4\7"+
    "\11\0\7\7\1\121\1\7\5\0\1\7\4\0\1\7"+
    "\1\0\7\7\1\0\2\7\2\0\4\7\11\0\11\7"+
    "\5\0\1\7\4\0\1\7\1\0\4\7\1\122\1\7"+
    "\1\123\1\0\2\7\2\0\4\7\11\0\1\7\1\124"+
    "\7\7\5\0\1\7\4\0\1\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\7\1\125\7\7\5\0"+
    "\1\7\4\0\1\7\1\0\7\7\1\0\2\7\2\0"+
    "\4\7\11\0\11\7\5\0\1\7\4\0\1\7\1\0"+
    "\1\7\1\126\5\7\1\0\2\7\2\0\4\7\22\0"+
    "\1\127\62\0\1\130\67\0\1\131\31\0\1\132\103\0"+
    "\1\133\27\0\1\134\55\0\1\135\107\0\1\136\23\0"+
    "\1\137\106\0\1\140\20\0\11\7\5\0\1\7\4\0"+
    "\1\7\1\0\1\7\1\141\5\7\1\0\2\7\2\0"+
    "\4\7\11\0\7\7\1\142\1\7\5\0\1\7\4\0"+
    "\1\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\11\7\5\0\1\7\4\0\1\7\1\0\1\143\6\7"+
    "\1\0\2\7\2\0\4\7\11\0\3\7\1\144\5\7"+
    "\5\0\1\7\4\0\1\7\1\0\5\7\1\145\1\7"+
    "\1\0\2\7\2\0\4\7\11\0\11\7\5\0\1\7"+
    "\4\0\1\7\1\0\1\146\6\7\1\0\2\7\2\0"+
    "\4\7\11\0\1\7\1\147\7\7\5\0\1\7\4\0"+
    "\1\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\1\7\1\150\7\7\5\0\1\7\4\0\1\7\1\0"+
    "\7\7\1\0\2\7\2\0\4\7\11\0\1\7\1\151"+
    "\7\7\5\0\1\7\4\0\1\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\11\0\1\152\14\0\1\152\4\0"+
    "\1\152\33\0\4\7\1\153\4\7\5\0\1\7\4\0"+
    "\1\7\1\0\7\7\1\0\2\7\2\0\4\7\11\0"+
    "\10\7\1\115\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\21\0\1\154\54\0\1\155"+
    "\103\0\1\156\21\0\1\157\55\0\1\160\57\0\1\161"+
    "\77\0\1\162\31\0\1\163\55\0\1\164\54\0\10\7"+
    "\1\165\5\0\1\7\4\0\1\7\1\0\7\7\1\0"+
    "\2\7\2\0\4\7\27\0\1\166\47\0\1\167\45\0"+
    "\11\7\5\0\1\7\4\0\1\7\1\0\7\7\1\0"+
    "\2\7\2\0\1\170\3\7\30\0\1\171\77\0\1\172"+
    "\14\0\11\7\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\1\7\1\173\2\7\27\0\1\174"+
    "\101\0\1\175\13\0\11\7\5\0\1\7\4\0\1\7"+
    "\1\0\7\7\1\0\2\7\2\0\2\7\1\176\1\7"+
    "\23\0\1\177\106\0\1\200\12\0\6\7\1\201\2\7"+
    "\5\0\1\7\4\0\1\7\1\0\7\7\1\0\2\7"+
    "\2\0\4\7\31\0\1\202\43\0\1\203\47\0\11\7"+
    "\5\0\1\7\4\0\1\7\1\0\5\7\1\204\1\7"+
    "\1\0\2\7\2\0\4\7\32\0\1\205\66\0\1\206"+
    "\23\0\11\7\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\3\7\1\207\55\0\1\210\11\0"+
    "\11\7\5\0\1\7\4\0\1\7\1\0\3\7\1\211"+
    "\3\7\1\0\2\7\2\0\4\7\41\0\1\212\25\0"+
    "\11\7\5\0\1\7\4\0\1\7\1\0\1\213\6\7"+
    "\1\0\2\7\2\0\4\7\36\0\1\214\30\0\6\7"+
    "\1\215\2\7\5\0\1\7\4\0\1\7\1\0\7\7"+
    "\1\0\2\7\2\0\4\7\17\0\1\216\46\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[4324];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\12\1\1\11\1\1\2\11\7\1\1\11"+
    "\3\1\2\11\2\1\1\11\1\1\3\11\2\1\1\0"+
    "\10\1\2\0\1\1\10\0\1\11\11\1\6\11\13\1"+
    "\1\11\11\0\11\1\1\11\1\1\1\0\4\11\1\0"+
    "\3\11\1\1\2\0\1\1\2\0\1\1\2\0\1\1"+
    "\2\0\1\1\2\0\1\1\1\11\1\0\1\1\1\0"+
    "\1\1\1\0\1\1\1\0\1\1\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[142];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LenguajeCompi(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 204) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;           
    int totalRead = 0;
    while (totalRead < requested) {
      int numRead = zzReader.read(zzBuffer, zzEndRead + totalRead, requested - totalRead);
      if (numRead == -1) {
        break;
      }
      totalRead += numRead;
    }

    if (totalRead > 0) {
      zzEndRead += totalRead;
      if (totalRead == requested) { /* possibly more input available */
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      return false;
    }

    // totalRead = 0: End of stream
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public int yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      boolean zzR = false;
      int zzCh;
      int zzCharCount;
      for (zzCurrentPosL = zzStartRead  ;
           zzCurrentPosL < zzMarkedPosL ;
           zzCurrentPosL += zzCharCount ) {
        zzCh = Character.codePointAt(zzBufferL, zzCurrentPosL, zzMarkedPosL);
        zzCharCount = Character.charCount(zzCh);
        switch (zzCh) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn += zzCharCount;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 1: 
          { System.err.println("Unknown Token: "+yytext()+" Line "+Integer.toString(yyline)+" Column "+Integer.toString(yycolumn));
          }
        case 59: break;
        case 2: 
          { System.out.print("Number("+ yytext() +") ");
          }
        case 60: break;
        case 3: 
          { System.out.print("NOT ");
          }
        case 61: break;
        case 4: 
          { System.out.print("IDENTIFIER("+ yytext() +") ");
          }
        case 62: break;
        case 5: 
          { 
          }
        case 63: break;
        case 6: 
          { System.out.print(" ( ");
          }
        case 64: break;
        case 7: 
          { System.out.print(" . ");
          }
        case 65: break;
        case 8: 
          { System.out.print(" ) ");
          }
        case 66: break;
        case 9: 
          { System.out.print("* ");
          }
        case 67: break;
        case 10: 
          { System.out.print("/ ");
          }
        case 68: break;
        case 11: 
          { System.out.print("ASSIGN ");
          }
        case 69: break;
        case 12: 
          { System.out.println("END OF STATEMENT");
          }
        case 70: break;
        case 13: 
          { System.out.print("- ");
          }
        case 71: break;
        case 14: 
          { System.out.print("> ");
          }
        case 72: break;
        case 15: 
          { System.out.print("+ ");
          }
        case 73: break;
        case 16: 
          { System.out.print("% ");
          }
        case 74: break;
        case 17: 
          { System.out.print("< ");
          }
        case 75: break;
        case 18: 
          { System.out.print(" , ");
          }
        case 76: break;
        case 19: 
          { System.out.print(" [ ");
          }
        case 77: break;
        case 20: 
          { System.out.print(" ] ");
          }
        case 78: break;
        case 21: 
          { System.out.print(yytext());
          }
        case 79: break;
        case 22: 
          { System.out.print("== ");
          }
        case 80: break;
        case 23: 
          { System.out.print("OR ");
          }
        case 81: break;
        case 24: 
          { System.out.print("THEN ");
          }
        case 82: break;
        case 25: 
          { System.out.print(">= ");
          }
        case 83: break;
        case 26: 
          { System.out.print("<= ");
          }
        case 84: break;
        case 27: 
          { System.out.print("!= ");
          }
        case 85: break;
        case 28: 
          { System.out.println(" COMMENT BLOCK"); yybegin(COMMENTS);
          }
        case 86: break;
        case 29: 
          { System.out.println("COMMENT BLOCK END"); yybegin(YYINITIAL);
          }
        case 87: break;
        case 30: 
          { System.out.print("Float(" +yytext() +") ");
          }
        case 88: break;
        case 31: 
          { System.out.print("WHILE ");
          }
        case 89: break;
        case 32: 
          { System.out.print("RETURN ");
          }
        case 90: break;
        case 33: 
          { System.out.print("FOR ");
          }
        case 91: break;
        case 34: 
          { System.out.print("AND ");
          }
        case 92: break;
        case 35: 
          { System.out.print("DEFAULT ");
          }
        case 93: break;
        case 36: 
          { System.out.print("FUNCTION ");
          }
        case 94: break;
        case 37: 
          { System.out.print("SWITCH ");
          }
        case 95: break;
        case 38: 
          { System.out.print("CHARACTER ");
          }
        case 96: break;
        case 39: 
          { System.out.print("Character("+ yytext() +") ");
          }
        case 97: break;
        case 40: 
          { System.out.print("INTEGER ");
          }
        case 98: break;
        case 41: 
          { System.out.print("VOID ");
          }
        case 99: break;
        case 42: 
          { System.out.print("BOOLEAN ");
          }
        case 100: break;
        case 43: 
          { System.out.print("FLOAT ");
          }
        case 101: break;
        case 44: 
          { System.out.print("IF ");
          }
        case 102: break;
        case 45: 
          { System.out.print("ELSE ");
          }
        case 103: break;
        case 46: 
          { System.out.print("BREAK ");
          }
        case 104: break;
        case 47: 
          { System.out.print("CASE ");
          }
        case 105: break;
        case 48: 
          { System.out.print("Boolean("+ yytext() +") ");
          }
        case 106: break;
        case 49: 
          { System.out.print("WHILE END ");
          }
        case 107: break;
        case 50: 
          { System.out.println("END OF FOR");
          }
        case 108: break;
        case 51: 
          { System.out.println("END OF FUNCTION");
          }
        case 109: break;
        case 52: 
          { System.out.println("END OF SWITCH");
          }
        case 110: break;
        case 53: 
          { System.out.println("END OF IF");
          }
        case 111: break;
        case 54: 
          { System.out.print("END OF ELSE ");
          }
        case 112: break;
        case 55: 
          { System.out.println("END OF CASE");
          }
        case 113: break;
        case 56: 
          { System.out.print("String("+ yytext() +") ");
          }
        case 114: break;
        case 57: 
          { System.out.println("MAIN FUNCTION ");
          }
        case 115: break;
        case 58: 
          { System.out.println("END OF MAIN FUNCTION");
          }
        case 116: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            return YYEOF;
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
